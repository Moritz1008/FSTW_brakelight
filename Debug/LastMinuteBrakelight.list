
LastMinuteBrakelight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fe0  08003fe0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fe0  08003fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003ff4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003ff4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f3b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1e  00000000  00000000  00029f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bbb  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c10a  00000000  00000000  00045a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1aa  00000000  00000000  00051b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f0  00000000  00000000  000e0d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f58 	.word	0x08003f58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f58 	.word	0x08003f58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 ff39 	bl	80010a0 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe99 	bl	8000f6c <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fb00 	bl	8000848 <__aeabi_dsub>
 8000248:	f000 fe90 	bl	8000f6c <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4681      	mov	r9, r0
 800026a:	0005      	movs	r5, r0
 800026c:	030c      	lsls	r4, r1, #12
 800026e:	0048      	lsls	r0, r1, #1
 8000270:	4692      	mov	sl, r2
 8000272:	001f      	movs	r7, r3
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d40      	lsrs	r0, r0, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2800      	cmp	r0, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e156      	b.n	8000530 <__aeabi_ddiv+0x2d4>
 8000282:	4bd4      	ldr	r3, [pc, #848]	; (80005d4 <__aeabi_ddiv+0x378>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e172      	b.n	8000570 <__aeabi_ddiv+0x314>
 800028a:	0f6b      	lsrs	r3, r5, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	431c      	orrs	r4, r3
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	041b      	lsls	r3, r3, #16
 8000294:	4323      	orrs	r3, r4
 8000296:	4698      	mov	r8, r3
 8000298:	4bcf      	ldr	r3, [pc, #828]	; (80005d8 <__aeabi_ddiv+0x37c>)
 800029a:	00ed      	lsls	r5, r5, #3
 800029c:	469b      	mov	fp, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	4699      	mov	r9, r3
 80002a2:	4483      	add	fp, r0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11f      	b.n	80004f8 <__aeabi_ddiv+0x29c>
 80002b8:	4ac6      	ldr	r2, [pc, #792]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e162      	b.n	8000586 <__aeabi_ddiv+0x32a>
 80002c0:	49c5      	ldr	r1, [pc, #788]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80002c2:	0f42      	lsrs	r2, r0, #29
 80002c4:	468c      	mov	ip, r1
 80002c6:	00e4      	lsls	r4, r4, #3
 80002c8:	4659      	mov	r1, fp
 80002ca:	4314      	orrs	r4, r2
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	4463      	add	r3, ip
 80002d0:	0412      	lsls	r2, r2, #16
 80002d2:	1acb      	subs	r3, r1, r3
 80002d4:	4314      	orrs	r4, r2
 80002d6:	469b      	mov	fp, r3
 80002d8:	00c2      	lsls	r2, r0, #3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	49bc      	ldr	r1, [pc, #752]	; (80005dc <__aeabi_ddiv+0x380>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58cb      	ldr	r3, [r1, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e28e      	b.n	800081c <__aeabi_ddiv+0x5c0>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d9      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 8000304:	2300      	movs	r3, #0
 8000306:	2400      	movs	r4, #0
 8000308:	2500      	movs	r5, #0
 800030a:	4652      	mov	r2, sl
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2400      	movs	r4, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4baa      	ldr	r3, [pc, #680]	; (80005d4 <__aeabi_ddiv+0x378>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	0015      	movs	r5, r2
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c7      	b.n	80006ce <__aeabi_ddiv+0x472>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1c2      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e14      	lsrs	r4, r2, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	0c1f      	lsrs	r7, r3, #16
 800035e:	0212      	lsls	r2, r2, #8
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e207      	b.n	800079a <__aeabi_ddiv+0x53e>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff41 	bl	8000214 <__aeabi_uidivmod>
 8000392:	0409      	lsls	r1, r1, #16
 8000394:	468c      	mov	ip, r1
 8000396:	0431      	lsls	r1, r6, #16
 8000398:	4666      	mov	r6, ip
 800039a:	9a01      	ldr	r2, [sp, #4]
 800039c:	0c09      	lsrs	r1, r1, #16
 800039e:	4342      	muls	r2, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	4331      	orrs	r1, r6
 80003a4:	428a      	cmp	r2, r1
 80003a6:	d904      	bls.n	80003b2 <__aeabi_ddiv+0x156>
 80003a8:	1909      	adds	r1, r1, r4
 80003aa:	3b01      	subs	r3, #1
 80003ac:	428c      	cmp	r4, r1
 80003ae:	d800      	bhi.n	80003b2 <__aeabi_ddiv+0x156>
 80003b0:	e1ed      	b.n	800078e <__aeabi_ddiv+0x532>
 80003b2:	1a88      	subs	r0, r1, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	0412      	lsls	r2, r2, #16
 80003b8:	431a      	orrs	r2, r3
 80003ba:	4690      	mov	r8, r2
 80003bc:	4641      	mov	r1, r8
 80003be:	9b00      	ldr	r3, [sp, #0]
 80003c0:	040e      	lsls	r6, r1, #16
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	001f      	movs	r7, r3
 80003c6:	9302      	str	r3, [sp, #8]
 80003c8:	9b00      	ldr	r3, [sp, #0]
 80003ca:	0c36      	lsrs	r6, r6, #16
 80003cc:	041b      	lsls	r3, r3, #16
 80003ce:	0c19      	lsrs	r1, r3, #16
 80003d0:	000b      	movs	r3, r1
 80003d2:	4373      	muls	r3, r6
 80003d4:	0c12      	lsrs	r2, r2, #16
 80003d6:	437e      	muls	r6, r7
 80003d8:	9103      	str	r1, [sp, #12]
 80003da:	4351      	muls	r1, r2
 80003dc:	437a      	muls	r2, r7
 80003de:	0c1f      	lsrs	r7, r3, #16
 80003e0:	46bc      	mov	ip, r7
 80003e2:	1876      	adds	r6, r6, r1
 80003e4:	4466      	add	r6, ip
 80003e6:	42b1      	cmp	r1, r6
 80003e8:	d903      	bls.n	80003f2 <__aeabi_ddiv+0x196>
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0249      	lsls	r1, r1, #9
 80003ee:	468c      	mov	ip, r1
 80003f0:	4462      	add	r2, ip
 80003f2:	0c31      	lsrs	r1, r6, #16
 80003f4:	188a      	adds	r2, r1, r2
 80003f6:	0431      	lsls	r1, r6, #16
 80003f8:	041e      	lsls	r6, r3, #16
 80003fa:	0c36      	lsrs	r6, r6, #16
 80003fc:	198e      	adds	r6, r1, r6
 80003fe:	4290      	cmp	r0, r2
 8000400:	d302      	bcc.n	8000408 <__aeabi_ddiv+0x1ac>
 8000402:	d112      	bne.n	800042a <__aeabi_ddiv+0x1ce>
 8000404:	42b5      	cmp	r5, r6
 8000406:	d210      	bcs.n	800042a <__aeabi_ddiv+0x1ce>
 8000408:	4643      	mov	r3, r8
 800040a:	1e59      	subs	r1, r3, #1
 800040c:	9b00      	ldr	r3, [sp, #0]
 800040e:	469c      	mov	ip, r3
 8000410:	4465      	add	r5, ip
 8000412:	001f      	movs	r7, r3
 8000414:	429d      	cmp	r5, r3
 8000416:	419b      	sbcs	r3, r3
 8000418:	425b      	negs	r3, r3
 800041a:	191b      	adds	r3, r3, r4
 800041c:	18c0      	adds	r0, r0, r3
 800041e:	4284      	cmp	r4, r0
 8000420:	d200      	bcs.n	8000424 <__aeabi_ddiv+0x1c8>
 8000422:	e1a0      	b.n	8000766 <__aeabi_ddiv+0x50a>
 8000424:	d100      	bne.n	8000428 <__aeabi_ddiv+0x1cc>
 8000426:	e19b      	b.n	8000760 <__aeabi_ddiv+0x504>
 8000428:	4688      	mov	r8, r1
 800042a:	1bae      	subs	r6, r5, r6
 800042c:	42b5      	cmp	r5, r6
 800042e:	41ad      	sbcs	r5, r5
 8000430:	1a80      	subs	r0, r0, r2
 8000432:	426d      	negs	r5, r5
 8000434:	1b40      	subs	r0, r0, r5
 8000436:	4284      	cmp	r4, r0
 8000438:	d100      	bne.n	800043c <__aeabi_ddiv+0x1e0>
 800043a:	e1d5      	b.n	80007e8 <__aeabi_ddiv+0x58c>
 800043c:	4649      	mov	r1, r9
 800043e:	f7ff fee9 	bl	8000214 <__aeabi_uidivmod>
 8000442:	9a01      	ldr	r2, [sp, #4]
 8000444:	040b      	lsls	r3, r1, #16
 8000446:	4342      	muls	r2, r0
 8000448:	0c31      	lsrs	r1, r6, #16
 800044a:	0005      	movs	r5, r0
 800044c:	4319      	orrs	r1, r3
 800044e:	428a      	cmp	r2, r1
 8000450:	d900      	bls.n	8000454 <__aeabi_ddiv+0x1f8>
 8000452:	e16c      	b.n	800072e <__aeabi_ddiv+0x4d2>
 8000454:	1a88      	subs	r0, r1, r2
 8000456:	4649      	mov	r1, r9
 8000458:	f7ff fedc 	bl	8000214 <__aeabi_uidivmod>
 800045c:	9a01      	ldr	r2, [sp, #4]
 800045e:	0436      	lsls	r6, r6, #16
 8000460:	4342      	muls	r2, r0
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	0c36      	lsrs	r6, r6, #16
 8000466:	0003      	movs	r3, r0
 8000468:	430e      	orrs	r6, r1
 800046a:	42b2      	cmp	r2, r6
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x214>
 800046e:	e153      	b.n	8000718 <__aeabi_ddiv+0x4bc>
 8000470:	9803      	ldr	r0, [sp, #12]
 8000472:	1ab6      	subs	r6, r6, r2
 8000474:	0002      	movs	r2, r0
 8000476:	042d      	lsls	r5, r5, #16
 8000478:	431d      	orrs	r5, r3
 800047a:	9f02      	ldr	r7, [sp, #8]
 800047c:	042b      	lsls	r3, r5, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	435a      	muls	r2, r3
 8000482:	437b      	muls	r3, r7
 8000484:	469c      	mov	ip, r3
 8000486:	0c29      	lsrs	r1, r5, #16
 8000488:	4348      	muls	r0, r1
 800048a:	0c13      	lsrs	r3, r2, #16
 800048c:	4484      	add	ip, r0
 800048e:	4463      	add	r3, ip
 8000490:	4379      	muls	r1, r7
 8000492:	4298      	cmp	r0, r3
 8000494:	d903      	bls.n	800049e <__aeabi_ddiv+0x242>
 8000496:	2080      	movs	r0, #128	; 0x80
 8000498:	0240      	lsls	r0, r0, #9
 800049a:	4684      	mov	ip, r0
 800049c:	4461      	add	r1, ip
 800049e:	0c18      	lsrs	r0, r3, #16
 80004a0:	0412      	lsls	r2, r2, #16
 80004a2:	041b      	lsls	r3, r3, #16
 80004a4:	0c12      	lsrs	r2, r2, #16
 80004a6:	1841      	adds	r1, r0, r1
 80004a8:	189b      	adds	r3, r3, r2
 80004aa:	428e      	cmp	r6, r1
 80004ac:	d200      	bcs.n	80004b0 <__aeabi_ddiv+0x254>
 80004ae:	e0ff      	b.n	80006b0 <__aeabi_ddiv+0x454>
 80004b0:	d100      	bne.n	80004b4 <__aeabi_ddiv+0x258>
 80004b2:	e0fa      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004b4:	2301      	movs	r3, #1
 80004b6:	431d      	orrs	r5, r3
 80004b8:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004ba:	445a      	add	r2, fp
 80004bc:	2a00      	cmp	r2, #0
 80004be:	dc00      	bgt.n	80004c2 <__aeabi_ddiv+0x266>
 80004c0:	e0aa      	b.n	8000618 <__aeabi_ddiv+0x3bc>
 80004c2:	076b      	lsls	r3, r5, #29
 80004c4:	d000      	beq.n	80004c8 <__aeabi_ddiv+0x26c>
 80004c6:	e13d      	b.n	8000744 <__aeabi_ddiv+0x4e8>
 80004c8:	08ed      	lsrs	r5, r5, #3
 80004ca:	4643      	mov	r3, r8
 80004cc:	01db      	lsls	r3, r3, #7
 80004ce:	d506      	bpl.n	80004de <__aeabi_ddiv+0x282>
 80004d0:	4642      	mov	r2, r8
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <__aeabi_ddiv+0x388>)
 80004d4:	401a      	ands	r2, r3
 80004d6:	4690      	mov	r8, r2
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	00d2      	lsls	r2, r2, #3
 80004dc:	445a      	add	r2, fp
 80004de:	4b42      	ldr	r3, [pc, #264]	; (80005e8 <__aeabi_ddiv+0x38c>)
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dd00      	ble.n	80004e6 <__aeabi_ddiv+0x28a>
 80004e4:	e71f      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004e6:	4643      	mov	r3, r8
 80004e8:	075b      	lsls	r3, r3, #29
 80004ea:	431d      	orrs	r5, r3
 80004ec:	4643      	mov	r3, r8
 80004ee:	0552      	lsls	r2, r2, #21
 80004f0:	025c      	lsls	r4, r3, #9
 80004f2:	0b24      	lsrs	r4, r4, #12
 80004f4:	0d53      	lsrs	r3, r2, #21
 80004f6:	e708      	b.n	800030a <__aeabi_ddiv+0xae>
 80004f8:	4652      	mov	r2, sl
 80004fa:	4322      	orrs	r2, r4
 80004fc:	d100      	bne.n	8000500 <__aeabi_ddiv+0x2a4>
 80004fe:	e07b      	b.n	80005f8 <__aeabi_ddiv+0x39c>
 8000500:	2c00      	cmp	r4, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_ddiv+0x2aa>
 8000504:	e0fa      	b.n	80006fc <__aeabi_ddiv+0x4a0>
 8000506:	0020      	movs	r0, r4
 8000508:	f000 fdd4 	bl	80010b4 <__clzsi2>
 800050c:	0002      	movs	r2, r0
 800050e:	3a0b      	subs	r2, #11
 8000510:	231d      	movs	r3, #29
 8000512:	0001      	movs	r1, r0
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	4652      	mov	r2, sl
 8000518:	3908      	subs	r1, #8
 800051a:	40da      	lsrs	r2, r3
 800051c:	408c      	lsls	r4, r1
 800051e:	4314      	orrs	r4, r2
 8000520:	4652      	mov	r2, sl
 8000522:	408a      	lsls	r2, r1
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <__aeabi_ddiv+0x390>)
 8000526:	4458      	add	r0, fp
 8000528:	469b      	mov	fp, r3
 800052a:	4483      	add	fp, r0
 800052c:	2000      	movs	r0, #0
 800052e:	e6d5      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000530:	464b      	mov	r3, r9
 8000532:	4323      	orrs	r3, r4
 8000534:	4698      	mov	r8, r3
 8000536:	d044      	beq.n	80005c2 <__aeabi_ddiv+0x366>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d100      	bne.n	800053e <__aeabi_ddiv+0x2e2>
 800053c:	e0ce      	b.n	80006dc <__aeabi_ddiv+0x480>
 800053e:	0020      	movs	r0, r4
 8000540:	f000 fdb8 	bl	80010b4 <__clzsi2>
 8000544:	0001      	movs	r1, r0
 8000546:	0002      	movs	r2, r0
 8000548:	390b      	subs	r1, #11
 800054a:	231d      	movs	r3, #29
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	4649      	mov	r1, r9
 8000550:	0010      	movs	r0, r2
 8000552:	40d9      	lsrs	r1, r3
 8000554:	3808      	subs	r0, #8
 8000556:	4084      	lsls	r4, r0
 8000558:	000b      	movs	r3, r1
 800055a:	464d      	mov	r5, r9
 800055c:	4323      	orrs	r3, r4
 800055e:	4698      	mov	r8, r3
 8000560:	4085      	lsls	r5, r0
 8000562:	4823      	ldr	r0, [pc, #140]	; (80005f0 <__aeabi_ddiv+0x394>)
 8000564:	1a83      	subs	r3, r0, r2
 8000566:	469b      	mov	fp, r3
 8000568:	2300      	movs	r3, #0
 800056a:	4699      	mov	r9, r3
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e69a      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000570:	464b      	mov	r3, r9
 8000572:	4323      	orrs	r3, r4
 8000574:	4698      	mov	r8, r3
 8000576:	d11d      	bne.n	80005b4 <__aeabi_ddiv+0x358>
 8000578:	2308      	movs	r3, #8
 800057a:	4699      	mov	r9, r3
 800057c:	3b06      	subs	r3, #6
 800057e:	2500      	movs	r5, #0
 8000580:	4683      	mov	fp, r0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	e68f      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000586:	4652      	mov	r2, sl
 8000588:	4322      	orrs	r2, r4
 800058a:	d109      	bne.n	80005a0 <__aeabi_ddiv+0x344>
 800058c:	2302      	movs	r3, #2
 800058e:	4649      	mov	r1, r9
 8000590:	4319      	orrs	r1, r3
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <__aeabi_ddiv+0x398>)
 8000594:	4689      	mov	r9, r1
 8000596:	469c      	mov	ip, r3
 8000598:	2400      	movs	r4, #0
 800059a:	2002      	movs	r0, #2
 800059c:	44e3      	add	fp, ip
 800059e:	e69d      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005a0:	2303      	movs	r3, #3
 80005a2:	464a      	mov	r2, r9
 80005a4:	431a      	orrs	r2, r3
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <__aeabi_ddiv+0x398>)
 80005a8:	4691      	mov	r9, r2
 80005aa:	469c      	mov	ip, r3
 80005ac:	4652      	mov	r2, sl
 80005ae:	2003      	movs	r0, #3
 80005b0:	44e3      	add	fp, ip
 80005b2:	e693      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	46a0      	mov	r8, r4
 80005bc:	4683      	mov	fp, r0
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	e671      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005c2:	2304      	movs	r3, #4
 80005c4:	4699      	mov	r9, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	469b      	mov	fp, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	2500      	movs	r5, #0
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	e669      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	000007ff 	.word	0x000007ff
 80005d8:	fffffc01 	.word	0xfffffc01
 80005dc:	08003f70 	.word	0x08003f70
 80005e0:	000003ff 	.word	0x000003ff
 80005e4:	feffffff 	.word	0xfeffffff
 80005e8:	000007fe 	.word	0x000007fe
 80005ec:	000003f3 	.word	0x000003f3
 80005f0:	fffffc0d 	.word	0xfffffc0d
 80005f4:	fffff801 	.word	0xfffff801
 80005f8:	4649      	mov	r1, r9
 80005fa:	2301      	movs	r3, #1
 80005fc:	4319      	orrs	r1, r3
 80005fe:	4689      	mov	r9, r1
 8000600:	2400      	movs	r4, #0
 8000602:	2001      	movs	r0, #1
 8000604:	e66a      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000606:	2300      	movs	r3, #0
 8000608:	2480      	movs	r4, #128	; 0x80
 800060a:	469a      	mov	sl, r3
 800060c:	2500      	movs	r5, #0
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000610:	0324      	lsls	r4, r4, #12
 8000612:	e67a      	b.n	800030a <__aeabi_ddiv+0xae>
 8000614:	2501      	movs	r5, #1
 8000616:	426d      	negs	r5, r5
 8000618:	2301      	movs	r3, #1
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	2b38      	cmp	r3, #56	; 0x38
 800061e:	dd00      	ble.n	8000622 <__aeabi_ddiv+0x3c6>
 8000620:	e670      	b.n	8000304 <__aeabi_ddiv+0xa8>
 8000622:	2b1f      	cmp	r3, #31
 8000624:	dc00      	bgt.n	8000628 <__aeabi_ddiv+0x3cc>
 8000626:	e0bf      	b.n	80007a8 <__aeabi_ddiv+0x54c>
 8000628:	211f      	movs	r1, #31
 800062a:	4249      	negs	r1, r1
 800062c:	1a8a      	subs	r2, r1, r2
 800062e:	4641      	mov	r1, r8
 8000630:	40d1      	lsrs	r1, r2
 8000632:	000a      	movs	r2, r1
 8000634:	2b20      	cmp	r3, #32
 8000636:	d004      	beq.n	8000642 <__aeabi_ddiv+0x3e6>
 8000638:	4641      	mov	r1, r8
 800063a:	4b80      	ldr	r3, [pc, #512]	; (800083c <__aeabi_ddiv+0x5e0>)
 800063c:	445b      	add	r3, fp
 800063e:	4099      	lsls	r1, r3
 8000640:	430d      	orrs	r5, r1
 8000642:	1e6b      	subs	r3, r5, #1
 8000644:	419d      	sbcs	r5, r3
 8000646:	2307      	movs	r3, #7
 8000648:	432a      	orrs	r2, r5
 800064a:	001d      	movs	r5, r3
 800064c:	2400      	movs	r4, #0
 800064e:	4015      	ands	r5, r2
 8000650:	4213      	tst	r3, r2
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x3fa>
 8000654:	e0d4      	b.n	8000800 <__aeabi_ddiv+0x5a4>
 8000656:	210f      	movs	r1, #15
 8000658:	2300      	movs	r3, #0
 800065a:	4011      	ands	r1, r2
 800065c:	2904      	cmp	r1, #4
 800065e:	d100      	bne.n	8000662 <__aeabi_ddiv+0x406>
 8000660:	e0cb      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000662:	1d11      	adds	r1, r2, #4
 8000664:	4291      	cmp	r1, r2
 8000666:	4192      	sbcs	r2, r2
 8000668:	4252      	negs	r2, r2
 800066a:	189b      	adds	r3, r3, r2
 800066c:	000a      	movs	r2, r1
 800066e:	0219      	lsls	r1, r3, #8
 8000670:	d400      	bmi.n	8000674 <__aeabi_ddiv+0x418>
 8000672:	e0c2      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000674:	2301      	movs	r3, #1
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	e646      	b.n	800030a <__aeabi_ddiv+0xae>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	4641      	mov	r1, r8
 8000680:	031b      	lsls	r3, r3, #12
 8000682:	4219      	tst	r1, r3
 8000684:	d008      	beq.n	8000698 <__aeabi_ddiv+0x43c>
 8000686:	421c      	tst	r4, r3
 8000688:	d106      	bne.n	8000698 <__aeabi_ddiv+0x43c>
 800068a:	431c      	orrs	r4, r3
 800068c:	0324      	lsls	r4, r4, #12
 800068e:	46ba      	mov	sl, r7
 8000690:	0015      	movs	r5, r2
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000694:	0b24      	lsrs	r4, r4, #12
 8000696:	e638      	b.n	800030a <__aeabi_ddiv+0xae>
 8000698:	2480      	movs	r4, #128	; 0x80
 800069a:	4643      	mov	r3, r8
 800069c:	0324      	lsls	r4, r4, #12
 800069e:	431c      	orrs	r4, r3
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	46b2      	mov	sl, r6
 80006a4:	4b64      	ldr	r3, [pc, #400]	; (8000838 <__aeabi_ddiv+0x5dc>)
 80006a6:	0b24      	lsrs	r4, r4, #12
 80006a8:	e62f      	b.n	800030a <__aeabi_ddiv+0xae>
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x454>
 80006ae:	e703      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 80006b0:	19a6      	adds	r6, r4, r6
 80006b2:	1e68      	subs	r0, r5, #1
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e08d      	b.n	80007d6 <__aeabi_ddiv+0x57a>
 80006ba:	428e      	cmp	r6, r1
 80006bc:	d200      	bcs.n	80006c0 <__aeabi_ddiv+0x464>
 80006be:	e0a3      	b.n	8000808 <__aeabi_ddiv+0x5ac>
 80006c0:	d100      	bne.n	80006c4 <__aeabi_ddiv+0x468>
 80006c2:	e0b3      	b.n	800082c <__aeabi_ddiv+0x5d0>
 80006c4:	0005      	movs	r5, r0
 80006c6:	e6f5      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80006c8:	42aa      	cmp	r2, r5
 80006ca:	d900      	bls.n	80006ce <__aeabi_ddiv+0x472>
 80006cc:	e639      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006ce:	4643      	mov	r3, r8
 80006d0:	07de      	lsls	r6, r3, #31
 80006d2:	0858      	lsrs	r0, r3, #1
 80006d4:	086b      	lsrs	r3, r5, #1
 80006d6:	431e      	orrs	r6, r3
 80006d8:	07ed      	lsls	r5, r5, #31
 80006da:	e639      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006dc:	4648      	mov	r0, r9
 80006de:	f000 fce9 	bl	80010b4 <__clzsi2>
 80006e2:	0001      	movs	r1, r0
 80006e4:	0002      	movs	r2, r0
 80006e6:	3115      	adds	r1, #21
 80006e8:	3220      	adds	r2, #32
 80006ea:	291c      	cmp	r1, #28
 80006ec:	dc00      	bgt.n	80006f0 <__aeabi_ddiv+0x494>
 80006ee:	e72c      	b.n	800054a <__aeabi_ddiv+0x2ee>
 80006f0:	464b      	mov	r3, r9
 80006f2:	3808      	subs	r0, #8
 80006f4:	4083      	lsls	r3, r0
 80006f6:	2500      	movs	r5, #0
 80006f8:	4698      	mov	r8, r3
 80006fa:	e732      	b.n	8000562 <__aeabi_ddiv+0x306>
 80006fc:	f000 fcda 	bl	80010b4 <__clzsi2>
 8000700:	0003      	movs	r3, r0
 8000702:	001a      	movs	r2, r3
 8000704:	3215      	adds	r2, #21
 8000706:	3020      	adds	r0, #32
 8000708:	2a1c      	cmp	r2, #28
 800070a:	dc00      	bgt.n	800070e <__aeabi_ddiv+0x4b2>
 800070c:	e700      	b.n	8000510 <__aeabi_ddiv+0x2b4>
 800070e:	4654      	mov	r4, sl
 8000710:	3b08      	subs	r3, #8
 8000712:	2200      	movs	r2, #0
 8000714:	409c      	lsls	r4, r3
 8000716:	e705      	b.n	8000524 <__aeabi_ddiv+0x2c8>
 8000718:	1936      	adds	r6, r6, r4
 800071a:	3b01      	subs	r3, #1
 800071c:	42b4      	cmp	r4, r6
 800071e:	d900      	bls.n	8000722 <__aeabi_ddiv+0x4c6>
 8000720:	e6a6      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000722:	42b2      	cmp	r2, r6
 8000724:	d800      	bhi.n	8000728 <__aeabi_ddiv+0x4cc>
 8000726:	e6a3      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000728:	1e83      	subs	r3, r0, #2
 800072a:	1936      	adds	r6, r6, r4
 800072c:	e6a0      	b.n	8000470 <__aeabi_ddiv+0x214>
 800072e:	1909      	adds	r1, r1, r4
 8000730:	3d01      	subs	r5, #1
 8000732:	428c      	cmp	r4, r1
 8000734:	d900      	bls.n	8000738 <__aeabi_ddiv+0x4dc>
 8000736:	e68d      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 8000738:	428a      	cmp	r2, r1
 800073a:	d800      	bhi.n	800073e <__aeabi_ddiv+0x4e2>
 800073c:	e68a      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 800073e:	1e85      	subs	r5, r0, #2
 8000740:	1909      	adds	r1, r1, r4
 8000742:	e687      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 8000744:	230f      	movs	r3, #15
 8000746:	402b      	ands	r3, r5
 8000748:	2b04      	cmp	r3, #4
 800074a:	d100      	bne.n	800074e <__aeabi_ddiv+0x4f2>
 800074c:	e6bc      	b.n	80004c8 <__aeabi_ddiv+0x26c>
 800074e:	2305      	movs	r3, #5
 8000750:	425b      	negs	r3, r3
 8000752:	42ab      	cmp	r3, r5
 8000754:	419b      	sbcs	r3, r3
 8000756:	3504      	adds	r5, #4
 8000758:	425b      	negs	r3, r3
 800075a:	08ed      	lsrs	r5, r5, #3
 800075c:	4498      	add	r8, r3
 800075e:	e6b4      	b.n	80004ca <__aeabi_ddiv+0x26e>
 8000760:	42af      	cmp	r7, r5
 8000762:	d900      	bls.n	8000766 <__aeabi_ddiv+0x50a>
 8000764:	e660      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 8000766:	4282      	cmp	r2, r0
 8000768:	d804      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 800076a:	d000      	beq.n	800076e <__aeabi_ddiv+0x512>
 800076c:	e65c      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 800076e:	42ae      	cmp	r6, r5
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 8000772:	e659      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 8000774:	2302      	movs	r3, #2
 8000776:	425b      	negs	r3, r3
 8000778:	469c      	mov	ip, r3
 800077a:	9b00      	ldr	r3, [sp, #0]
 800077c:	44e0      	add	r8, ip
 800077e:	469c      	mov	ip, r3
 8000780:	4465      	add	r5, ip
 8000782:	429d      	cmp	r5, r3
 8000784:	419b      	sbcs	r3, r3
 8000786:	425b      	negs	r3, r3
 8000788:	191b      	adds	r3, r3, r4
 800078a:	18c0      	adds	r0, r0, r3
 800078c:	e64d      	b.n	800042a <__aeabi_ddiv+0x1ce>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e60e      	b.n	80003b2 <__aeabi_ddiv+0x156>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	1909      	adds	r1, r1, r4
 8000798:	e60b      	b.n	80003b2 <__aeabi_ddiv+0x156>
 800079a:	428a      	cmp	r2, r1
 800079c:	d800      	bhi.n	80007a0 <__aeabi_ddiv+0x544>
 800079e:	e5f4      	b.n	800038a <__aeabi_ddiv+0x12e>
 80007a0:	1e83      	subs	r3, r0, #2
 80007a2:	4698      	mov	r8, r3
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	e5f0      	b.n	800038a <__aeabi_ddiv+0x12e>
 80007a8:	4925      	ldr	r1, [pc, #148]	; (8000840 <__aeabi_ddiv+0x5e4>)
 80007aa:	0028      	movs	r0, r5
 80007ac:	4459      	add	r1, fp
 80007ae:	408d      	lsls	r5, r1
 80007b0:	4642      	mov	r2, r8
 80007b2:	408a      	lsls	r2, r1
 80007b4:	1e69      	subs	r1, r5, #1
 80007b6:	418d      	sbcs	r5, r1
 80007b8:	4641      	mov	r1, r8
 80007ba:	40d8      	lsrs	r0, r3
 80007bc:	40d9      	lsrs	r1, r3
 80007be:	4302      	orrs	r2, r0
 80007c0:	432a      	orrs	r2, r5
 80007c2:	000b      	movs	r3, r1
 80007c4:	0751      	lsls	r1, r2, #29
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x56e>
 80007c8:	e751      	b.n	800066e <__aeabi_ddiv+0x412>
 80007ca:	210f      	movs	r1, #15
 80007cc:	4011      	ands	r1, r2
 80007ce:	2904      	cmp	r1, #4
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x578>
 80007d2:	e746      	b.n	8000662 <__aeabi_ddiv+0x406>
 80007d4:	e74b      	b.n	800066e <__aeabi_ddiv+0x412>
 80007d6:	0005      	movs	r5, r0
 80007d8:	428e      	cmp	r6, r1
 80007da:	d000      	beq.n	80007de <__aeabi_ddiv+0x582>
 80007dc:	e66a      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80007de:	9a00      	ldr	r2, [sp, #0]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d000      	beq.n	80007e6 <__aeabi_ddiv+0x58a>
 80007e4:	e666      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80007e6:	e667      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <__aeabi_ddiv+0x5e8>)
 80007ea:	445a      	add	r2, fp
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_ddiv+0x596>
 80007f0:	e710      	b.n	8000614 <__aeabi_ddiv+0x3b8>
 80007f2:	2301      	movs	r3, #1
 80007f4:	2500      	movs	r5, #0
 80007f6:	4498      	add	r8, r3
 80007f8:	e667      	b.n	80004ca <__aeabi_ddiv+0x26e>
 80007fa:	075d      	lsls	r5, r3, #29
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	0b1c      	lsrs	r4, r3, #12
 8000800:	08d2      	lsrs	r2, r2, #3
 8000802:	2300      	movs	r3, #0
 8000804:	4315      	orrs	r5, r2
 8000806:	e580      	b.n	800030a <__aeabi_ddiv+0xae>
 8000808:	9800      	ldr	r0, [sp, #0]
 800080a:	3d02      	subs	r5, #2
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	4282      	cmp	r2, r0
 8000810:	41bf      	sbcs	r7, r7
 8000812:	427f      	negs	r7, r7
 8000814:	193c      	adds	r4, r7, r4
 8000816:	1936      	adds	r6, r6, r4
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	e7dd      	b.n	80007d8 <__aeabi_ddiv+0x57c>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	4643      	mov	r3, r8
 8000820:	0324      	lsls	r4, r4, #12
 8000822:	431c      	orrs	r4, r3
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000828:	0b24      	lsrs	r4, r4, #12
 800082a:	e56e      	b.n	800030a <__aeabi_ddiv+0xae>
 800082c:	9a00      	ldr	r2, [sp, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d3ea      	bcc.n	8000808 <__aeabi_ddiv+0x5ac>
 8000832:	0005      	movs	r5, r0
 8000834:	e7d3      	b.n	80007de <__aeabi_ddiv+0x582>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	000007ff 	.word	0x000007ff
 800083c:	0000043e 	.word	0x0000043e
 8000840:	0000041e 	.word	0x0000041e
 8000844:	000003ff 	.word	0x000003ff

08000848 <__aeabi_dsub>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	4657      	mov	r7, sl
 800084c:	464e      	mov	r6, r9
 800084e:	4645      	mov	r5, r8
 8000850:	46de      	mov	lr, fp
 8000852:	b5e0      	push	{r5, r6, r7, lr}
 8000854:	001e      	movs	r6, r3
 8000856:	0017      	movs	r7, r2
 8000858:	004a      	lsls	r2, r1, #1
 800085a:	030b      	lsls	r3, r1, #12
 800085c:	0d52      	lsrs	r2, r2, #21
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	4690      	mov	r8, r2
 8000862:	0f42      	lsrs	r2, r0, #29
 8000864:	431a      	orrs	r2, r3
 8000866:	0fcd      	lsrs	r5, r1, #31
 8000868:	4ccd      	ldr	r4, [pc, #820]	; (8000ba0 <__aeabi_dsub+0x358>)
 800086a:	0331      	lsls	r1, r6, #12
 800086c:	00c3      	lsls	r3, r0, #3
 800086e:	4694      	mov	ip, r2
 8000870:	0070      	lsls	r0, r6, #1
 8000872:	0f7a      	lsrs	r2, r7, #29
 8000874:	0a49      	lsrs	r1, r1, #9
 8000876:	00ff      	lsls	r7, r7, #3
 8000878:	469a      	mov	sl, r3
 800087a:	46b9      	mov	r9, r7
 800087c:	0d40      	lsrs	r0, r0, #21
 800087e:	0ff6      	lsrs	r6, r6, #31
 8000880:	4311      	orrs	r1, r2
 8000882:	42a0      	cmp	r0, r4
 8000884:	d100      	bne.n	8000888 <__aeabi_dsub+0x40>
 8000886:	e0b1      	b.n	80009ec <__aeabi_dsub+0x1a4>
 8000888:	2201      	movs	r2, #1
 800088a:	4056      	eors	r6, r2
 800088c:	46b3      	mov	fp, r6
 800088e:	42b5      	cmp	r5, r6
 8000890:	d100      	bne.n	8000894 <__aeabi_dsub+0x4c>
 8000892:	e088      	b.n	80009a6 <__aeabi_dsub+0x15e>
 8000894:	4642      	mov	r2, r8
 8000896:	1a12      	subs	r2, r2, r0
 8000898:	2a00      	cmp	r2, #0
 800089a:	dc00      	bgt.n	800089e <__aeabi_dsub+0x56>
 800089c:	e0ae      	b.n	80009fc <__aeabi_dsub+0x1b4>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x5c>
 80008a2:	e0c1      	b.n	8000a28 <__aeabi_dsub+0x1e0>
 80008a4:	48be      	ldr	r0, [pc, #760]	; (8000ba0 <__aeabi_dsub+0x358>)
 80008a6:	4580      	cmp	r8, r0
 80008a8:	d100      	bne.n	80008ac <__aeabi_dsub+0x64>
 80008aa:	e151      	b.n	8000b50 <__aeabi_dsub+0x308>
 80008ac:	2080      	movs	r0, #128	; 0x80
 80008ae:	0400      	lsls	r0, r0, #16
 80008b0:	4301      	orrs	r1, r0
 80008b2:	2a38      	cmp	r2, #56	; 0x38
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dsub+0x70>
 80008b6:	e17b      	b.n	8000bb0 <__aeabi_dsub+0x368>
 80008b8:	2a1f      	cmp	r2, #31
 80008ba:	dd00      	ble.n	80008be <__aeabi_dsub+0x76>
 80008bc:	e1ee      	b.n	8000c9c <__aeabi_dsub+0x454>
 80008be:	2020      	movs	r0, #32
 80008c0:	003e      	movs	r6, r7
 80008c2:	1a80      	subs	r0, r0, r2
 80008c4:	000c      	movs	r4, r1
 80008c6:	40d6      	lsrs	r6, r2
 80008c8:	40d1      	lsrs	r1, r2
 80008ca:	4087      	lsls	r7, r0
 80008cc:	4662      	mov	r2, ip
 80008ce:	4084      	lsls	r4, r0
 80008d0:	1a52      	subs	r2, r2, r1
 80008d2:	1e78      	subs	r0, r7, #1
 80008d4:	4187      	sbcs	r7, r0
 80008d6:	4694      	mov	ip, r2
 80008d8:	4334      	orrs	r4, r6
 80008da:	4327      	orrs	r7, r4
 80008dc:	1bdc      	subs	r4, r3, r7
 80008de:	42a3      	cmp	r3, r4
 80008e0:	419b      	sbcs	r3, r3
 80008e2:	4662      	mov	r2, ip
 80008e4:	425b      	negs	r3, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4699      	mov	r9, r3
 80008ea:	464b      	mov	r3, r9
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	d400      	bmi.n	80008f2 <__aeabi_dsub+0xaa>
 80008f0:	e118      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 80008f2:	464b      	mov	r3, r9
 80008f4:	0258      	lsls	r0, r3, #9
 80008f6:	0a43      	lsrs	r3, r0, #9
 80008f8:	4699      	mov	r9, r3
 80008fa:	464b      	mov	r3, r9
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0xba>
 8000900:	e137      	b.n	8000b72 <__aeabi_dsub+0x32a>
 8000902:	4648      	mov	r0, r9
 8000904:	f000 fbd6 	bl	80010b4 <__clzsi2>
 8000908:	0001      	movs	r1, r0
 800090a:	3908      	subs	r1, #8
 800090c:	2320      	movs	r3, #32
 800090e:	0022      	movs	r2, r4
 8000910:	4648      	mov	r0, r9
 8000912:	1a5b      	subs	r3, r3, r1
 8000914:	40da      	lsrs	r2, r3
 8000916:	4088      	lsls	r0, r1
 8000918:	408c      	lsls	r4, r1
 800091a:	4643      	mov	r3, r8
 800091c:	4310      	orrs	r0, r2
 800091e:	4588      	cmp	r8, r1
 8000920:	dd00      	ble.n	8000924 <__aeabi_dsub+0xdc>
 8000922:	e136      	b.n	8000b92 <__aeabi_dsub+0x34a>
 8000924:	1ac9      	subs	r1, r1, r3
 8000926:	1c4b      	adds	r3, r1, #1
 8000928:	2b1f      	cmp	r3, #31
 800092a:	dd00      	ble.n	800092e <__aeabi_dsub+0xe6>
 800092c:	e0ea      	b.n	8000b04 <__aeabi_dsub+0x2bc>
 800092e:	2220      	movs	r2, #32
 8000930:	0026      	movs	r6, r4
 8000932:	1ad2      	subs	r2, r2, r3
 8000934:	0001      	movs	r1, r0
 8000936:	4094      	lsls	r4, r2
 8000938:	40de      	lsrs	r6, r3
 800093a:	40d8      	lsrs	r0, r3
 800093c:	2300      	movs	r3, #0
 800093e:	4091      	lsls	r1, r2
 8000940:	1e62      	subs	r2, r4, #1
 8000942:	4194      	sbcs	r4, r2
 8000944:	4681      	mov	r9, r0
 8000946:	4698      	mov	r8, r3
 8000948:	4331      	orrs	r1, r6
 800094a:	430c      	orrs	r4, r1
 800094c:	0763      	lsls	r3, r4, #29
 800094e:	d009      	beq.n	8000964 <__aeabi_dsub+0x11c>
 8000950:	230f      	movs	r3, #15
 8000952:	4023      	ands	r3, r4
 8000954:	2b04      	cmp	r3, #4
 8000956:	d005      	beq.n	8000964 <__aeabi_dsub+0x11c>
 8000958:	1d23      	adds	r3, r4, #4
 800095a:	42a3      	cmp	r3, r4
 800095c:	41a4      	sbcs	r4, r4
 800095e:	4264      	negs	r4, r4
 8000960:	44a1      	add	r9, r4
 8000962:	001c      	movs	r4, r3
 8000964:	464b      	mov	r3, r9
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	d400      	bmi.n	800096c <__aeabi_dsub+0x124>
 800096a:	e0de      	b.n	8000b2a <__aeabi_dsub+0x2e2>
 800096c:	4641      	mov	r1, r8
 800096e:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000970:	3101      	adds	r1, #1
 8000972:	4299      	cmp	r1, r3
 8000974:	d100      	bne.n	8000978 <__aeabi_dsub+0x130>
 8000976:	e0e7      	b.n	8000b48 <__aeabi_dsub+0x300>
 8000978:	464b      	mov	r3, r9
 800097a:	488a      	ldr	r0, [pc, #552]	; (8000ba4 <__aeabi_dsub+0x35c>)
 800097c:	08e4      	lsrs	r4, r4, #3
 800097e:	4003      	ands	r3, r0
 8000980:	0018      	movs	r0, r3
 8000982:	0549      	lsls	r1, r1, #21
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	0240      	lsls	r0, r0, #9
 8000988:	4323      	orrs	r3, r4
 800098a:	0d4a      	lsrs	r2, r1, #21
 800098c:	0b04      	lsrs	r4, r0, #12
 800098e:	0512      	lsls	r2, r2, #20
 8000990:	07ed      	lsls	r5, r5, #31
 8000992:	4322      	orrs	r2, r4
 8000994:	432a      	orrs	r2, r5
 8000996:	0018      	movs	r0, r3
 8000998:	0011      	movs	r1, r2
 800099a:	bcf0      	pop	{r4, r5, r6, r7}
 800099c:	46bb      	mov	fp, r7
 800099e:	46b2      	mov	sl, r6
 80009a0:	46a9      	mov	r9, r5
 80009a2:	46a0      	mov	r8, r4
 80009a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a6:	4642      	mov	r2, r8
 80009a8:	1a12      	subs	r2, r2, r0
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	dd52      	ble.n	8000a54 <__aeabi_dsub+0x20c>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dsub+0x16c>
 80009b2:	e09c      	b.n	8000aee <__aeabi_dsub+0x2a6>
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d100      	bne.n	80009ba <__aeabi_dsub+0x172>
 80009b8:	e0ca      	b.n	8000b50 <__aeabi_dsub+0x308>
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	0400      	lsls	r0, r0, #16
 80009be:	4301      	orrs	r1, r0
 80009c0:	2a38      	cmp	r2, #56	; 0x38
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dsub+0x17e>
 80009c4:	e149      	b.n	8000c5a <__aeabi_dsub+0x412>
 80009c6:	2a1f      	cmp	r2, #31
 80009c8:	dc00      	bgt.n	80009cc <__aeabi_dsub+0x184>
 80009ca:	e197      	b.n	8000cfc <__aeabi_dsub+0x4b4>
 80009cc:	0010      	movs	r0, r2
 80009ce:	000e      	movs	r6, r1
 80009d0:	3820      	subs	r0, #32
 80009d2:	40c6      	lsrs	r6, r0
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_dsub+0x19a>
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	1a82      	subs	r2, r0, r2
 80009dc:	4091      	lsls	r1, r2
 80009de:	430f      	orrs	r7, r1
 80009e0:	46b9      	mov	r9, r7
 80009e2:	464c      	mov	r4, r9
 80009e4:	1e62      	subs	r2, r4, #1
 80009e6:	4194      	sbcs	r4, r2
 80009e8:	4334      	orrs	r4, r6
 80009ea:	e13a      	b.n	8000c62 <__aeabi_dsub+0x41a>
 80009ec:	000a      	movs	r2, r1
 80009ee:	433a      	orrs	r2, r7
 80009f0:	d028      	beq.n	8000a44 <__aeabi_dsub+0x1fc>
 80009f2:	46b3      	mov	fp, r6
 80009f4:	42b5      	cmp	r5, r6
 80009f6:	d02b      	beq.n	8000a50 <__aeabi_dsub+0x208>
 80009f8:	4a6b      	ldr	r2, [pc, #428]	; (8000ba8 <__aeabi_dsub+0x360>)
 80009fa:	4442      	add	r2, r8
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	d05d      	beq.n	8000abc <__aeabi_dsub+0x274>
 8000a00:	4642      	mov	r2, r8
 8000a02:	4644      	mov	r4, r8
 8000a04:	1a82      	subs	r2, r0, r2
 8000a06:	2c00      	cmp	r4, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dsub+0x1c4>
 8000a0a:	e0f5      	b.n	8000bf8 <__aeabi_dsub+0x3b0>
 8000a0c:	4665      	mov	r5, ip
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x1cc>
 8000a12:	e19c      	b.n	8000d4e <__aeabi_dsub+0x506>
 8000a14:	1e55      	subs	r5, r2, #1
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dsub+0x1d4>
 8000a1a:	e1fb      	b.n	8000e14 <__aeabi_dsub+0x5cc>
 8000a1c:	4c60      	ldr	r4, [pc, #384]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a1e:	42a2      	cmp	r2, r4
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dsub+0x1dc>
 8000a22:	e1bd      	b.n	8000da0 <__aeabi_dsub+0x558>
 8000a24:	002a      	movs	r2, r5
 8000a26:	e0f0      	b.n	8000c0a <__aeabi_dsub+0x3c2>
 8000a28:	0008      	movs	r0, r1
 8000a2a:	4338      	orrs	r0, r7
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dsub+0x1e8>
 8000a2e:	e0c3      	b.n	8000bb8 <__aeabi_dsub+0x370>
 8000a30:	1e50      	subs	r0, r2, #1
 8000a32:	2a01      	cmp	r2, #1
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x1f0>
 8000a36:	e1a8      	b.n	8000d8a <__aeabi_dsub+0x542>
 8000a38:	4c59      	ldr	r4, [pc, #356]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a3a:	42a2      	cmp	r2, r4
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x1f8>
 8000a3e:	e087      	b.n	8000b50 <__aeabi_dsub+0x308>
 8000a40:	0002      	movs	r2, r0
 8000a42:	e736      	b.n	80008b2 <__aeabi_dsub+0x6a>
 8000a44:	2201      	movs	r2, #1
 8000a46:	4056      	eors	r6, r2
 8000a48:	46b3      	mov	fp, r6
 8000a4a:	42b5      	cmp	r5, r6
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dsub+0x208>
 8000a4e:	e721      	b.n	8000894 <__aeabi_dsub+0x4c>
 8000a50:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <__aeabi_dsub+0x360>)
 8000a52:	4442      	add	r2, r8
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dsub+0x212>
 8000a58:	e0b5      	b.n	8000bc6 <__aeabi_dsub+0x37e>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	4644      	mov	r4, r8
 8000a5e:	1a82      	subs	r2, r0, r2
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dsub+0x21e>
 8000a64:	e138      	b.n	8000cd8 <__aeabi_dsub+0x490>
 8000a66:	4e4e      	ldr	r6, [pc, #312]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a68:	42b0      	cmp	r0, r6
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dsub+0x226>
 8000a6c:	e1de      	b.n	8000e2c <__aeabi_dsub+0x5e4>
 8000a6e:	2680      	movs	r6, #128	; 0x80
 8000a70:	4664      	mov	r4, ip
 8000a72:	0436      	lsls	r6, r6, #16
 8000a74:	4334      	orrs	r4, r6
 8000a76:	46a4      	mov	ip, r4
 8000a78:	2a38      	cmp	r2, #56	; 0x38
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dsub+0x236>
 8000a7c:	e196      	b.n	8000dac <__aeabi_dsub+0x564>
 8000a7e:	2a1f      	cmp	r2, #31
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dsub+0x23c>
 8000a82:	e224      	b.n	8000ece <__aeabi_dsub+0x686>
 8000a84:	2620      	movs	r6, #32
 8000a86:	1ab4      	subs	r4, r6, r2
 8000a88:	46a2      	mov	sl, r4
 8000a8a:	4664      	mov	r4, ip
 8000a8c:	4656      	mov	r6, sl
 8000a8e:	40b4      	lsls	r4, r6
 8000a90:	46a1      	mov	r9, r4
 8000a92:	001c      	movs	r4, r3
 8000a94:	464e      	mov	r6, r9
 8000a96:	40d4      	lsrs	r4, r2
 8000a98:	4326      	orrs	r6, r4
 8000a9a:	0034      	movs	r4, r6
 8000a9c:	4656      	mov	r6, sl
 8000a9e:	40b3      	lsls	r3, r6
 8000aa0:	1e5e      	subs	r6, r3, #1
 8000aa2:	41b3      	sbcs	r3, r6
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	40d3      	lsrs	r3, r2
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	19e4      	adds	r4, r4, r7
 8000aae:	42bc      	cmp	r4, r7
 8000ab0:	41bf      	sbcs	r7, r7
 8000ab2:	427f      	negs	r7, r7
 8000ab4:	46b9      	mov	r9, r7
 8000ab6:	4680      	mov	r8, r0
 8000ab8:	4489      	add	r9, r1
 8000aba:	e0d8      	b.n	8000c6e <__aeabi_dsub+0x426>
 8000abc:	4640      	mov	r0, r8
 8000abe:	4c3b      	ldr	r4, [pc, #236]	; (8000bac <__aeabi_dsub+0x364>)
 8000ac0:	3001      	adds	r0, #1
 8000ac2:	4220      	tst	r0, r4
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_dsub+0x280>
 8000ac6:	e0b4      	b.n	8000c32 <__aeabi_dsub+0x3ea>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dsub+0x288>
 8000ace:	e144      	b.n	8000d5a <__aeabi_dsub+0x512>
 8000ad0:	4660      	mov	r0, ip
 8000ad2:	4318      	orrs	r0, r3
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dsub+0x290>
 8000ad6:	e190      	b.n	8000dfa <__aeabi_dsub+0x5b2>
 8000ad8:	0008      	movs	r0, r1
 8000ada:	4338      	orrs	r0, r7
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_dsub+0x298>
 8000ade:	e1aa      	b.n	8000e36 <__aeabi_dsub+0x5ee>
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	0749      	lsls	r1, r1, #29
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	4661      	mov	r1, ip
 8000aea:	08cc      	lsrs	r4, r1, #3
 8000aec:	e027      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000aee:	0008      	movs	r0, r1
 8000af0:	4338      	orrs	r0, r7
 8000af2:	d061      	beq.n	8000bb8 <__aeabi_dsub+0x370>
 8000af4:	1e50      	subs	r0, r2, #1
 8000af6:	2a01      	cmp	r2, #1
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x2b4>
 8000afa:	e139      	b.n	8000d70 <__aeabi_dsub+0x528>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	d027      	beq.n	8000b50 <__aeabi_dsub+0x308>
 8000b00:	0002      	movs	r2, r0
 8000b02:	e75d      	b.n	80009c0 <__aeabi_dsub+0x178>
 8000b04:	0002      	movs	r2, r0
 8000b06:	391f      	subs	r1, #31
 8000b08:	40ca      	lsrs	r2, r1
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d003      	beq.n	8000b18 <__aeabi_dsub+0x2d0>
 8000b10:	2240      	movs	r2, #64	; 0x40
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4098      	lsls	r0, r3
 8000b16:	4304      	orrs	r4, r0
 8000b18:	1e63      	subs	r3, r4, #1
 8000b1a:	419c      	sbcs	r4, r3
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4699      	mov	r9, r3
 8000b20:	4698      	mov	r8, r3
 8000b22:	430c      	orrs	r4, r1
 8000b24:	0763      	lsls	r3, r4, #29
 8000b26:	d000      	beq.n	8000b2a <__aeabi_dsub+0x2e2>
 8000b28:	e712      	b.n	8000950 <__aeabi_dsub+0x108>
 8000b2a:	464b      	mov	r3, r9
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	08e4      	lsrs	r4, r4, #3
 8000b30:	075b      	lsls	r3, r3, #29
 8000b32:	4323      	orrs	r3, r4
 8000b34:	08d4      	lsrs	r4, r2, #3
 8000b36:	4642      	mov	r2, r8
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	d00e      	beq.n	8000b5c <__aeabi_dsub+0x314>
 8000b3e:	0324      	lsls	r4, r4, #12
 8000b40:	0552      	lsls	r2, r2, #21
 8000b42:	0b24      	lsrs	r4, r4, #12
 8000b44:	0d52      	lsrs	r2, r2, #21
 8000b46:	e722      	b.n	800098e <__aeabi_dsub+0x146>
 8000b48:	000a      	movs	r2, r1
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e71e      	b.n	800098e <__aeabi_dsub+0x146>
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	4662      	mov	r2, ip
 8000b54:	0752      	lsls	r2, r2, #29
 8000b56:	4313      	orrs	r3, r2
 8000b58:	4662      	mov	r2, ip
 8000b5a:	08d4      	lsrs	r4, r2, #3
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4322      	orrs	r2, r4
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dsub+0x31c>
 8000b62:	e1fc      	b.n	8000f5e <__aeabi_dsub+0x716>
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	0312      	lsls	r2, r2, #12
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000b6e:	0b24      	lsrs	r4, r4, #12
 8000b70:	e70d      	b.n	800098e <__aeabi_dsub+0x146>
 8000b72:	0020      	movs	r0, r4
 8000b74:	f000 fa9e 	bl	80010b4 <__clzsi2>
 8000b78:	0001      	movs	r1, r0
 8000b7a:	3118      	adds	r1, #24
 8000b7c:	291f      	cmp	r1, #31
 8000b7e:	dc00      	bgt.n	8000b82 <__aeabi_dsub+0x33a>
 8000b80:	e6c4      	b.n	800090c <__aeabi_dsub+0xc4>
 8000b82:	3808      	subs	r0, #8
 8000b84:	4084      	lsls	r4, r0
 8000b86:	4643      	mov	r3, r8
 8000b88:	0020      	movs	r0, r4
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	4588      	cmp	r8, r1
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_dsub+0x34a>
 8000b90:	e6c8      	b.n	8000924 <__aeabi_dsub+0xdc>
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__aeabi_dsub+0x35c>)
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	4010      	ands	r0, r2
 8000b98:	4698      	mov	r8, r3
 8000b9a:	4681      	mov	r9, r0
 8000b9c:	e6d6      	b.n	800094c <__aeabi_dsub+0x104>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	ff7fffff 	.word	0xff7fffff
 8000ba8:	fffff801 	.word	0xfffff801
 8000bac:	000007fe 	.word	0x000007fe
 8000bb0:	430f      	orrs	r7, r1
 8000bb2:	1e7a      	subs	r2, r7, #1
 8000bb4:	4197      	sbcs	r7, r2
 8000bb6:	e691      	b.n	80008dc <__aeabi_dsub+0x94>
 8000bb8:	4661      	mov	r1, ip
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	0749      	lsls	r1, r1, #29
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	4661      	mov	r1, ip
 8000bc2:	08cc      	lsrs	r4, r1, #3
 8000bc4:	e7b8      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000bc6:	4640      	mov	r0, r8
 8000bc8:	4cd3      	ldr	r4, [pc, #844]	; (8000f18 <__aeabi_dsub+0x6d0>)
 8000bca:	3001      	adds	r0, #1
 8000bcc:	4220      	tst	r0, r4
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dsub+0x38a>
 8000bd0:	e0a2      	b.n	8000d18 <__aeabi_dsub+0x4d0>
 8000bd2:	4640      	mov	r0, r8
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dsub+0x392>
 8000bd8:	e101      	b.n	8000dde <__aeabi_dsub+0x596>
 8000bda:	4660      	mov	r0, ip
 8000bdc:	4318      	orrs	r0, r3
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dsub+0x39a>
 8000be0:	e15e      	b.n	8000ea0 <__aeabi_dsub+0x658>
 8000be2:	0008      	movs	r0, r1
 8000be4:	4338      	orrs	r0, r7
 8000be6:	d000      	beq.n	8000bea <__aeabi_dsub+0x3a2>
 8000be8:	e15f      	b.n	8000eaa <__aeabi_dsub+0x662>
 8000bea:	4661      	mov	r1, ip
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	0749      	lsls	r1, r1, #29
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	4661      	mov	r1, ip
 8000bf4:	08cc      	lsrs	r4, r1, #3
 8000bf6:	e7a2      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000bf8:	4dc8      	ldr	r5, [pc, #800]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000bfa:	42a8      	cmp	r0, r5
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dsub+0x3b8>
 8000bfe:	e0cf      	b.n	8000da0 <__aeabi_dsub+0x558>
 8000c00:	2580      	movs	r5, #128	; 0x80
 8000c02:	4664      	mov	r4, ip
 8000c04:	042d      	lsls	r5, r5, #16
 8000c06:	432c      	orrs	r4, r5
 8000c08:	46a4      	mov	ip, r4
 8000c0a:	2a38      	cmp	r2, #56	; 0x38
 8000c0c:	dc56      	bgt.n	8000cbc <__aeabi_dsub+0x474>
 8000c0e:	2a1f      	cmp	r2, #31
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dsub+0x3cc>
 8000c12:	e0d1      	b.n	8000db8 <__aeabi_dsub+0x570>
 8000c14:	2520      	movs	r5, #32
 8000c16:	001e      	movs	r6, r3
 8000c18:	1aad      	subs	r5, r5, r2
 8000c1a:	4664      	mov	r4, ip
 8000c1c:	40ab      	lsls	r3, r5
 8000c1e:	40ac      	lsls	r4, r5
 8000c20:	40d6      	lsrs	r6, r2
 8000c22:	1e5d      	subs	r5, r3, #1
 8000c24:	41ab      	sbcs	r3, r5
 8000c26:	4334      	orrs	r4, r6
 8000c28:	4323      	orrs	r3, r4
 8000c2a:	4664      	mov	r4, ip
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	1b09      	subs	r1, r1, r4
 8000c30:	e049      	b.n	8000cc6 <__aeabi_dsub+0x47e>
 8000c32:	4660      	mov	r0, ip
 8000c34:	1bdc      	subs	r4, r3, r7
 8000c36:	1a46      	subs	r6, r0, r1
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	4180      	sbcs	r0, r0
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	4681      	mov	r9, r0
 8000c40:	0030      	movs	r0, r6
 8000c42:	464e      	mov	r6, r9
 8000c44:	1b80      	subs	r0, r0, r6
 8000c46:	4681      	mov	r9, r0
 8000c48:	0200      	lsls	r0, r0, #8
 8000c4a:	d476      	bmi.n	8000d3a <__aeabi_dsub+0x4f2>
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4323      	orrs	r3, r4
 8000c50:	d000      	beq.n	8000c54 <__aeabi_dsub+0x40c>
 8000c52:	e652      	b.n	80008fa <__aeabi_dsub+0xb2>
 8000c54:	2400      	movs	r4, #0
 8000c56:	2500      	movs	r5, #0
 8000c58:	e771      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000c5a:	4339      	orrs	r1, r7
 8000c5c:	000c      	movs	r4, r1
 8000c5e:	1e62      	subs	r2, r4, #1
 8000c60:	4194      	sbcs	r4, r2
 8000c62:	18e4      	adds	r4, r4, r3
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	425b      	negs	r3, r3
 8000c6a:	4463      	add	r3, ip
 8000c6c:	4699      	mov	r9, r3
 8000c6e:	464b      	mov	r3, r9
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_dsub+0x42e>
 8000c74:	e756      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000c76:	2301      	movs	r3, #1
 8000c78:	469c      	mov	ip, r3
 8000c7a:	4ba8      	ldr	r3, [pc, #672]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000c7c:	44e0      	add	r8, ip
 8000c7e:	4598      	cmp	r8, r3
 8000c80:	d038      	beq.n	8000cf4 <__aeabi_dsub+0x4ac>
 8000c82:	464b      	mov	r3, r9
 8000c84:	48a6      	ldr	r0, [pc, #664]	; (8000f20 <__aeabi_dsub+0x6d8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	4003      	ands	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	0863      	lsrs	r3, r4, #1
 8000c8e:	4014      	ands	r4, r2
 8000c90:	431c      	orrs	r4, r3
 8000c92:	07c3      	lsls	r3, r0, #31
 8000c94:	431c      	orrs	r4, r3
 8000c96:	0843      	lsrs	r3, r0, #1
 8000c98:	4699      	mov	r9, r3
 8000c9a:	e657      	b.n	800094c <__aeabi_dsub+0x104>
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	000e      	movs	r6, r1
 8000ca0:	3820      	subs	r0, #32
 8000ca2:	40c6      	lsrs	r6, r0
 8000ca4:	2a20      	cmp	r2, #32
 8000ca6:	d004      	beq.n	8000cb2 <__aeabi_dsub+0x46a>
 8000ca8:	2040      	movs	r0, #64	; 0x40
 8000caa:	1a82      	subs	r2, r0, r2
 8000cac:	4091      	lsls	r1, r2
 8000cae:	430f      	orrs	r7, r1
 8000cb0:	46b9      	mov	r9, r7
 8000cb2:	464f      	mov	r7, r9
 8000cb4:	1e7a      	subs	r2, r7, #1
 8000cb6:	4197      	sbcs	r7, r2
 8000cb8:	4337      	orrs	r7, r6
 8000cba:	e60f      	b.n	80008dc <__aeabi_dsub+0x94>
 8000cbc:	4662      	mov	r2, ip
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	1afc      	subs	r4, r7, r3
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	41bf      	sbcs	r7, r7
 8000ccc:	427f      	negs	r7, r7
 8000cce:	1bcb      	subs	r3, r1, r7
 8000cd0:	4699      	mov	r9, r3
 8000cd2:	465d      	mov	r5, fp
 8000cd4:	4680      	mov	r8, r0
 8000cd6:	e608      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000cd8:	4666      	mov	r6, ip
 8000cda:	431e      	orrs	r6, r3
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x498>
 8000cde:	e0be      	b.n	8000e5e <__aeabi_dsub+0x616>
 8000ce0:	1e56      	subs	r6, r2, #1
 8000ce2:	2a01      	cmp	r2, #1
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dsub+0x4a0>
 8000ce6:	e109      	b.n	8000efc <__aeabi_dsub+0x6b4>
 8000ce8:	4c8c      	ldr	r4, [pc, #560]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000cea:	42a2      	cmp	r2, r4
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dsub+0x4a8>
 8000cee:	e119      	b.n	8000f24 <__aeabi_dsub+0x6dc>
 8000cf0:	0032      	movs	r2, r6
 8000cf2:	e6c1      	b.n	8000a78 <__aeabi_dsub+0x230>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e648      	b.n	800098e <__aeabi_dsub+0x146>
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1a80      	subs	r0, r0, r2
 8000d02:	003e      	movs	r6, r7
 8000d04:	4087      	lsls	r7, r0
 8000d06:	4084      	lsls	r4, r0
 8000d08:	40d6      	lsrs	r6, r2
 8000d0a:	1e78      	subs	r0, r7, #1
 8000d0c:	4187      	sbcs	r7, r0
 8000d0e:	40d1      	lsrs	r1, r2
 8000d10:	4334      	orrs	r4, r6
 8000d12:	433c      	orrs	r4, r7
 8000d14:	448c      	add	ip, r1
 8000d16:	e7a4      	b.n	8000c62 <__aeabi_dsub+0x41a>
 8000d18:	4a80      	ldr	r2, [pc, #512]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dsub+0x4d8>
 8000d1e:	e0e9      	b.n	8000ef4 <__aeabi_dsub+0x6ac>
 8000d20:	19df      	adds	r7, r3, r7
 8000d22:	429f      	cmp	r7, r3
 8000d24:	419b      	sbcs	r3, r3
 8000d26:	4461      	add	r1, ip
 8000d28:	425b      	negs	r3, r3
 8000d2a:	18c9      	adds	r1, r1, r3
 8000d2c:	07cc      	lsls	r4, r1, #31
 8000d2e:	087f      	lsrs	r7, r7, #1
 8000d30:	084b      	lsrs	r3, r1, #1
 8000d32:	4699      	mov	r9, r3
 8000d34:	4680      	mov	r8, r0
 8000d36:	433c      	orrs	r4, r7
 8000d38:	e6f4      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000d3a:	1afc      	subs	r4, r7, r3
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	41bf      	sbcs	r7, r7
 8000d40:	4663      	mov	r3, ip
 8000d42:	427f      	negs	r7, r7
 8000d44:	1ac9      	subs	r1, r1, r3
 8000d46:	1bcb      	subs	r3, r1, r7
 8000d48:	4699      	mov	r9, r3
 8000d4a:	465d      	mov	r5, fp
 8000d4c:	e5d5      	b.n	80008fa <__aeabi_dsub+0xb2>
 8000d4e:	08ff      	lsrs	r7, r7, #3
 8000d50:	074b      	lsls	r3, r1, #29
 8000d52:	465d      	mov	r5, fp
 8000d54:	433b      	orrs	r3, r7
 8000d56:	08cc      	lsrs	r4, r1, #3
 8000d58:	e6ee      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dsub+0x51a>
 8000d60:	e082      	b.n	8000e68 <__aeabi_dsub+0x620>
 8000d62:	000b      	movs	r3, r1
 8000d64:	433b      	orrs	r3, r7
 8000d66:	d11b      	bne.n	8000da0 <__aeabi_dsub+0x558>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	2500      	movs	r5, #0
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	e6f9      	b.n	8000b64 <__aeabi_dsub+0x31c>
 8000d70:	19dc      	adds	r4, r3, r7
 8000d72:	429c      	cmp	r4, r3
 8000d74:	419b      	sbcs	r3, r3
 8000d76:	4461      	add	r1, ip
 8000d78:	4689      	mov	r9, r1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	4499      	add	r9, r3
 8000d7e:	464b      	mov	r3, r9
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	d444      	bmi.n	8000e0e <__aeabi_dsub+0x5c6>
 8000d84:	2301      	movs	r3, #1
 8000d86:	4698      	mov	r8, r3
 8000d88:	e6cc      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000d8a:	1bdc      	subs	r4, r3, r7
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	419b      	sbcs	r3, r3
 8000d92:	1a51      	subs	r1, r2, r1
 8000d94:	425b      	negs	r3, r3
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	4699      	mov	r9, r3
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	e5a4      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000da0:	08ff      	lsrs	r7, r7, #3
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	465d      	mov	r5, fp
 8000da6:	433b      	orrs	r3, r7
 8000da8:	08cc      	lsrs	r4, r1, #3
 8000daa:	e6d7      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000dac:	4662      	mov	r2, ip
 8000dae:	431a      	orrs	r2, r3
 8000db0:	0014      	movs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	e679      	b.n	8000aac <__aeabi_dsub+0x264>
 8000db8:	0015      	movs	r5, r2
 8000dba:	4664      	mov	r4, ip
 8000dbc:	3d20      	subs	r5, #32
 8000dbe:	40ec      	lsrs	r4, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	2a20      	cmp	r2, #32
 8000dc4:	d005      	beq.n	8000dd2 <__aeabi_dsub+0x58a>
 8000dc6:	2540      	movs	r5, #64	; 0x40
 8000dc8:	4664      	mov	r4, ip
 8000dca:	1aaa      	subs	r2, r5, r2
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	4654      	mov	r4, sl
 8000dd4:	1e63      	subs	r3, r4, #1
 8000dd6:	419c      	sbcs	r4, r3
 8000dd8:	4643      	mov	r3, r8
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	e773      	b.n	8000cc6 <__aeabi_dsub+0x47e>
 8000dde:	4662      	mov	r2, ip
 8000de0:	431a      	orrs	r2, r3
 8000de2:	d023      	beq.n	8000e2c <__aeabi_dsub+0x5e4>
 8000de4:	000a      	movs	r2, r1
 8000de6:	433a      	orrs	r2, r7
 8000de8:	d000      	beq.n	8000dec <__aeabi_dsub+0x5a4>
 8000dea:	e0a0      	b.n	8000f2e <__aeabi_dsub+0x6e6>
 8000dec:	4662      	mov	r2, ip
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	0752      	lsls	r2, r2, #29
 8000df2:	4313      	orrs	r3, r2
 8000df4:	4662      	mov	r2, ip
 8000df6:	08d4      	lsrs	r4, r2, #3
 8000df8:	e6b0      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000dfa:	000b      	movs	r3, r1
 8000dfc:	433b      	orrs	r3, r7
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dsub+0x5ba>
 8000e00:	e728      	b.n	8000c54 <__aeabi_dsub+0x40c>
 8000e02:	08ff      	lsrs	r7, r7, #3
 8000e04:	074b      	lsls	r3, r1, #29
 8000e06:	465d      	mov	r5, fp
 8000e08:	433b      	orrs	r3, r7
 8000e0a:	08cc      	lsrs	r4, r1, #3
 8000e0c:	e697      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4698      	mov	r8, r3
 8000e12:	e736      	b.n	8000c82 <__aeabi_dsub+0x43a>
 8000e14:	1afc      	subs	r4, r7, r3
 8000e16:	42a7      	cmp	r7, r4
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	427f      	negs	r7, r7
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	1bcb      	subs	r3, r1, r7
 8000e22:	4699      	mov	r9, r3
 8000e24:	2301      	movs	r3, #1
 8000e26:	465d      	mov	r5, fp
 8000e28:	4698      	mov	r8, r3
 8000e2a:	e55e      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000e2c:	074b      	lsls	r3, r1, #29
 8000e2e:	08ff      	lsrs	r7, r7, #3
 8000e30:	433b      	orrs	r3, r7
 8000e32:	08cc      	lsrs	r4, r1, #3
 8000e34:	e692      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000e36:	1bdc      	subs	r4, r3, r7
 8000e38:	4660      	mov	r0, ip
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	41b6      	sbcs	r6, r6
 8000e3e:	1a40      	subs	r0, r0, r1
 8000e40:	4276      	negs	r6, r6
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	4681      	mov	r9, r0
 8000e46:	0200      	lsls	r0, r0, #8
 8000e48:	d560      	bpl.n	8000f0c <__aeabi_dsub+0x6c4>
 8000e4a:	1afc      	subs	r4, r7, r3
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	41bf      	sbcs	r7, r7
 8000e50:	4663      	mov	r3, ip
 8000e52:	427f      	negs	r7, r7
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	1bcb      	subs	r3, r1, r7
 8000e58:	4699      	mov	r9, r3
 8000e5a:	465d      	mov	r5, fp
 8000e5c:	e576      	b.n	800094c <__aeabi_dsub+0x104>
 8000e5e:	08ff      	lsrs	r7, r7, #3
 8000e60:	074b      	lsls	r3, r1, #29
 8000e62:	433b      	orrs	r3, r7
 8000e64:	08cc      	lsrs	r4, r1, #3
 8000e66:	e667      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000e68:	000a      	movs	r2, r1
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	433a      	orrs	r2, r7
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dsub+0x62a>
 8000e70:	e66f      	b.n	8000b52 <__aeabi_dsub+0x30a>
 8000e72:	4662      	mov	r2, ip
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	4313      	orrs	r3, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	08d4      	lsrs	r4, r2, #3
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0312      	lsls	r2, r2, #12
 8000e80:	4214      	tst	r4, r2
 8000e82:	d007      	beq.n	8000e94 <__aeabi_dsub+0x64c>
 8000e84:	08c8      	lsrs	r0, r1, #3
 8000e86:	4210      	tst	r0, r2
 8000e88:	d104      	bne.n	8000e94 <__aeabi_dsub+0x64c>
 8000e8a:	465d      	mov	r5, fp
 8000e8c:	0004      	movs	r4, r0
 8000e8e:	08fb      	lsrs	r3, r7, #3
 8000e90:	0749      	lsls	r1, r1, #29
 8000e92:	430b      	orrs	r3, r1
 8000e94:	0f5a      	lsrs	r2, r3, #29
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	0752      	lsls	r2, r2, #29
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	e65d      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000ea0:	074b      	lsls	r3, r1, #29
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	433b      	orrs	r3, r7
 8000ea6:	08cc      	lsrs	r4, r1, #3
 8000ea8:	e649      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000eaa:	19dc      	adds	r4, r3, r7
 8000eac:	429c      	cmp	r4, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	4461      	add	r1, ip
 8000eb2:	4689      	mov	r9, r1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	4499      	add	r9, r3
 8000eb8:	464b      	mov	r3, r9
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_dsub+0x678>
 8000ebe:	e631      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <__aeabi_dsub+0x6d8>)
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4691      	mov	r9, r2
 8000eca:	4698      	mov	r8, r3
 8000ecc:	e62a      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000ece:	0016      	movs	r6, r2
 8000ed0:	4664      	mov	r4, ip
 8000ed2:	3e20      	subs	r6, #32
 8000ed4:	40f4      	lsrs	r4, r6
 8000ed6:	46a0      	mov	r8, r4
 8000ed8:	2a20      	cmp	r2, #32
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dsub+0x6a0>
 8000edc:	2640      	movs	r6, #64	; 0x40
 8000ede:	4664      	mov	r4, ip
 8000ee0:	1ab2      	subs	r2, r6, r2
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	4323      	orrs	r3, r4
 8000ee6:	469a      	mov	sl, r3
 8000ee8:	4654      	mov	r4, sl
 8000eea:	1e63      	subs	r3, r4, #1
 8000eec:	419c      	sbcs	r4, r3
 8000eee:	4643      	mov	r3, r8
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	e5db      	b.n	8000aac <__aeabi_dsub+0x264>
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e548      	b.n	800098e <__aeabi_dsub+0x146>
 8000efc:	19dc      	adds	r4, r3, r7
 8000efe:	42bc      	cmp	r4, r7
 8000f00:	41bf      	sbcs	r7, r7
 8000f02:	4461      	add	r1, ip
 8000f04:	4689      	mov	r9, r1
 8000f06:	427f      	negs	r7, r7
 8000f08:	44b9      	add	r9, r7
 8000f0a:	e738      	b.n	8000d7e <__aeabi_dsub+0x536>
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0x6cc>
 8000f12:	e69f      	b.n	8000c54 <__aeabi_dsub+0x40c>
 8000f14:	e606      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	000007fe 	.word	0x000007fe
 8000f1c:	000007ff 	.word	0x000007ff
 8000f20:	ff7fffff 	.word	0xff7fffff
 8000f24:	08ff      	lsrs	r7, r7, #3
 8000f26:	074b      	lsls	r3, r1, #29
 8000f28:	433b      	orrs	r3, r7
 8000f2a:	08cc      	lsrs	r4, r1, #3
 8000f2c:	e616      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000f2e:	4662      	mov	r2, ip
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	0752      	lsls	r2, r2, #29
 8000f34:	4313      	orrs	r3, r2
 8000f36:	4662      	mov	r2, ip
 8000f38:	08d4      	lsrs	r4, r2, #3
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0312      	lsls	r2, r2, #12
 8000f3e:	4214      	tst	r4, r2
 8000f40:	d007      	beq.n	8000f52 <__aeabi_dsub+0x70a>
 8000f42:	08c8      	lsrs	r0, r1, #3
 8000f44:	4210      	tst	r0, r2
 8000f46:	d104      	bne.n	8000f52 <__aeabi_dsub+0x70a>
 8000f48:	465d      	mov	r5, fp
 8000f4a:	0004      	movs	r4, r0
 8000f4c:	08fb      	lsrs	r3, r7, #3
 8000f4e:	0749      	lsls	r1, r1, #29
 8000f50:	430b      	orrs	r3, r1
 8000f52:	0f5a      	lsrs	r2, r3, #29
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	0752      	lsls	r2, r2, #29
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e5fe      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	4a01      	ldr	r2, [pc, #4]	; (8000f68 <__aeabi_dsub+0x720>)
 8000f62:	001c      	movs	r4, r3
 8000f64:	e513      	b.n	800098e <__aeabi_dsub+0x146>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	000007ff 	.word	0x000007ff

08000f6c <__aeabi_d2iz>:
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	b530      	push	{r4, r5, lr}
 8000f70:	4c13      	ldr	r4, [pc, #76]	; (8000fc0 <__aeabi_d2iz+0x54>)
 8000f72:	0053      	lsls	r3, r2, #1
 8000f74:	0309      	lsls	r1, r1, #12
 8000f76:	0005      	movs	r5, r0
 8000f78:	0b09      	lsrs	r1, r1, #12
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	0fd2      	lsrs	r2, r2, #31
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	dd04      	ble.n	8000f8e <__aeabi_d2iz+0x22>
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <__aeabi_d2iz+0x58>)
 8000f86:	4283      	cmp	r3, r0
 8000f88:	dd02      	ble.n	8000f90 <__aeabi_d2iz+0x24>
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <__aeabi_d2iz+0x5c>)
 8000f8c:	18d0      	adds	r0, r2, r3
 8000f8e:	bd30      	pop	{r4, r5, pc}
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	0340      	lsls	r0, r0, #13
 8000f94:	4301      	orrs	r1, r0
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <__aeabi_d2iz+0x60>)
 8000f98:	1ac0      	subs	r0, r0, r3
 8000f9a:	281f      	cmp	r0, #31
 8000f9c:	dd08      	ble.n	8000fb0 <__aeabi_d2iz+0x44>
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <__aeabi_d2iz+0x64>)
 8000fa0:	1ac3      	subs	r3, r0, r3
 8000fa2:	40d9      	lsrs	r1, r3
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	4258      	negs	r0, r3
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d1f0      	bne.n	8000f8e <__aeabi_d2iz+0x22>
 8000fac:	0018      	movs	r0, r3
 8000fae:	e7ee      	b.n	8000f8e <__aeabi_d2iz+0x22>
 8000fb0:	4c08      	ldr	r4, [pc, #32]	; (8000fd4 <__aeabi_d2iz+0x68>)
 8000fb2:	40c5      	lsrs	r5, r0
 8000fb4:	46a4      	mov	ip, r4
 8000fb6:	4463      	add	r3, ip
 8000fb8:	4099      	lsls	r1, r3
 8000fba:	000b      	movs	r3, r1
 8000fbc:	432b      	orrs	r3, r5
 8000fbe:	e7f2      	b.n	8000fa6 <__aeabi_d2iz+0x3a>
 8000fc0:	000003fe 	.word	0x000003fe
 8000fc4:	0000041d 	.word	0x0000041d
 8000fc8:	7fffffff 	.word	0x7fffffff
 8000fcc:	00000433 	.word	0x00000433
 8000fd0:	00000413 	.word	0x00000413
 8000fd4:	fffffbed 	.word	0xfffffbed

08000fd8 <__aeabi_i2d>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d016      	beq.n	800100c <__aeabi_i2d+0x34>
 8000fde:	17c3      	asrs	r3, r0, #31
 8000fe0:	18c5      	adds	r5, r0, r3
 8000fe2:	405d      	eors	r5, r3
 8000fe4:	0fc4      	lsrs	r4, r0, #31
 8000fe6:	0028      	movs	r0, r5
 8000fe8:	f000 f864 	bl	80010b4 <__clzsi2>
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <__aeabi_i2d+0x5c>)
 8000fee:	1a12      	subs	r2, r2, r0
 8000ff0:	280a      	cmp	r0, #10
 8000ff2:	dc16      	bgt.n	8001022 <__aeabi_i2d+0x4a>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	002e      	movs	r6, r5
 8000ff8:	3315      	adds	r3, #21
 8000ffa:	409e      	lsls	r6, r3
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	1a18      	subs	r0, r3, r0
 8001000:	40c5      	lsrs	r5, r0
 8001002:	0552      	lsls	r2, r2, #21
 8001004:	032d      	lsls	r5, r5, #12
 8001006:	0b2d      	lsrs	r5, r5, #12
 8001008:	0d53      	lsrs	r3, r2, #21
 800100a:	e003      	b.n	8001014 <__aeabi_i2d+0x3c>
 800100c:	2400      	movs	r4, #0
 800100e:	2300      	movs	r3, #0
 8001010:	2500      	movs	r5, #0
 8001012:	2600      	movs	r6, #0
 8001014:	051b      	lsls	r3, r3, #20
 8001016:	432b      	orrs	r3, r5
 8001018:	07e4      	lsls	r4, r4, #31
 800101a:	4323      	orrs	r3, r4
 800101c:	0030      	movs	r0, r6
 800101e:	0019      	movs	r1, r3
 8001020:	bd70      	pop	{r4, r5, r6, pc}
 8001022:	380b      	subs	r0, #11
 8001024:	4085      	lsls	r5, r0
 8001026:	0552      	lsls	r2, r2, #21
 8001028:	032d      	lsls	r5, r5, #12
 800102a:	2600      	movs	r6, #0
 800102c:	0b2d      	lsrs	r5, r5, #12
 800102e:	0d53      	lsrs	r3, r2, #21
 8001030:	e7f0      	b.n	8001014 <__aeabi_i2d+0x3c>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	0000041e 	.word	0x0000041e

08001038 <__aeabi_cdrcmple>:
 8001038:	4684      	mov	ip, r0
 800103a:	0010      	movs	r0, r2
 800103c:	4662      	mov	r2, ip
 800103e:	468c      	mov	ip, r1
 8001040:	0019      	movs	r1, r3
 8001042:	4663      	mov	r3, ip
 8001044:	e000      	b.n	8001048 <__aeabi_cdcmpeq>
 8001046:	46c0      	nop			; (mov r8, r8)

08001048 <__aeabi_cdcmpeq>:
 8001048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800104a:	f000 f8f9 	bl	8001240 <__ledf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	d401      	bmi.n	8001056 <__aeabi_cdcmpeq+0xe>
 8001052:	2100      	movs	r1, #0
 8001054:	42c8      	cmn	r0, r1
 8001056:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001058 <__aeabi_dcmpeq>:
 8001058:	b510      	push	{r4, lr}
 800105a:	f000 f849 	bl	80010f0 <__eqdf2>
 800105e:	4240      	negs	r0, r0
 8001060:	3001      	adds	r0, #1
 8001062:	bd10      	pop	{r4, pc}

08001064 <__aeabi_dcmplt>:
 8001064:	b510      	push	{r4, lr}
 8001066:	f000 f8eb 	bl	8001240 <__ledf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	db01      	blt.n	8001072 <__aeabi_dcmplt+0xe>
 800106e:	2000      	movs	r0, #0
 8001070:	bd10      	pop	{r4, pc}
 8001072:	2001      	movs	r0, #1
 8001074:	bd10      	pop	{r4, pc}
 8001076:	46c0      	nop			; (mov r8, r8)

08001078 <__aeabi_dcmple>:
 8001078:	b510      	push	{r4, lr}
 800107a:	f000 f8e1 	bl	8001240 <__ledf2>
 800107e:	2800      	cmp	r0, #0
 8001080:	dd01      	ble.n	8001086 <__aeabi_dcmple+0xe>
 8001082:	2000      	movs	r0, #0
 8001084:	bd10      	pop	{r4, pc}
 8001086:	2001      	movs	r0, #1
 8001088:	bd10      	pop	{r4, pc}
 800108a:	46c0      	nop			; (mov r8, r8)

0800108c <__aeabi_dcmpgt>:
 800108c:	b510      	push	{r4, lr}
 800108e:	f000 f871 	bl	8001174 <__gedf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	dc01      	bgt.n	800109a <__aeabi_dcmpgt+0xe>
 8001096:	2000      	movs	r0, #0
 8001098:	bd10      	pop	{r4, pc}
 800109a:	2001      	movs	r0, #1
 800109c:	bd10      	pop	{r4, pc}
 800109e:	46c0      	nop			; (mov r8, r8)

080010a0 <__aeabi_dcmpge>:
 80010a0:	b510      	push	{r4, lr}
 80010a2:	f000 f867 	bl	8001174 <__gedf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	da01      	bge.n	80010ae <__aeabi_dcmpge+0xe>
 80010aa:	2000      	movs	r0, #0
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	2001      	movs	r0, #1
 80010b0:	bd10      	pop	{r4, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)

080010b4 <__clzsi2>:
 80010b4:	211c      	movs	r1, #28
 80010b6:	2301      	movs	r3, #1
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d301      	bcc.n	80010c2 <__clzsi2+0xe>
 80010be:	0c00      	lsrs	r0, r0, #16
 80010c0:	3910      	subs	r1, #16
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	4298      	cmp	r0, r3
 80010c6:	d301      	bcc.n	80010cc <__clzsi2+0x18>
 80010c8:	0a00      	lsrs	r0, r0, #8
 80010ca:	3908      	subs	r1, #8
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	4298      	cmp	r0, r3
 80010d0:	d301      	bcc.n	80010d6 <__clzsi2+0x22>
 80010d2:	0900      	lsrs	r0, r0, #4
 80010d4:	3904      	subs	r1, #4
 80010d6:	a202      	add	r2, pc, #8	; (adr r2, 80010e0 <__clzsi2+0x2c>)
 80010d8:	5c10      	ldrb	r0, [r2, r0]
 80010da:	1840      	adds	r0, r0, r1
 80010dc:	4770      	bx	lr
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	02020304 	.word	0x02020304
 80010e4:	01010101 	.word	0x01010101
	...

080010f0 <__eqdf2>:
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	464e      	mov	r6, r9
 80010f4:	4645      	mov	r5, r8
 80010f6:	46de      	mov	lr, fp
 80010f8:	4657      	mov	r7, sl
 80010fa:	4690      	mov	r8, r2
 80010fc:	b5e0      	push	{r5, r6, r7, lr}
 80010fe:	0017      	movs	r7, r2
 8001100:	031a      	lsls	r2, r3, #12
 8001102:	0b12      	lsrs	r2, r2, #12
 8001104:	0005      	movs	r5, r0
 8001106:	4684      	mov	ip, r0
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <__eqdf2+0x80>)
 800110a:	030e      	lsls	r6, r1, #12
 800110c:	004c      	lsls	r4, r1, #1
 800110e:	4691      	mov	r9, r2
 8001110:	005a      	lsls	r2, r3, #1
 8001112:	0fdb      	lsrs	r3, r3, #31
 8001114:	469b      	mov	fp, r3
 8001116:	0b36      	lsrs	r6, r6, #12
 8001118:	0d64      	lsrs	r4, r4, #21
 800111a:	0fc9      	lsrs	r1, r1, #31
 800111c:	0d52      	lsrs	r2, r2, #21
 800111e:	4284      	cmp	r4, r0
 8001120:	d019      	beq.n	8001156 <__eqdf2+0x66>
 8001122:	4282      	cmp	r2, r0
 8001124:	d010      	beq.n	8001148 <__eqdf2+0x58>
 8001126:	2001      	movs	r0, #1
 8001128:	4294      	cmp	r4, r2
 800112a:	d10e      	bne.n	800114a <__eqdf2+0x5a>
 800112c:	454e      	cmp	r6, r9
 800112e:	d10c      	bne.n	800114a <__eqdf2+0x5a>
 8001130:	2001      	movs	r0, #1
 8001132:	45c4      	cmp	ip, r8
 8001134:	d109      	bne.n	800114a <__eqdf2+0x5a>
 8001136:	4559      	cmp	r1, fp
 8001138:	d017      	beq.n	800116a <__eqdf2+0x7a>
 800113a:	2c00      	cmp	r4, #0
 800113c:	d105      	bne.n	800114a <__eqdf2+0x5a>
 800113e:	0030      	movs	r0, r6
 8001140:	4328      	orrs	r0, r5
 8001142:	1e43      	subs	r3, r0, #1
 8001144:	4198      	sbcs	r0, r3
 8001146:	e000      	b.n	800114a <__eqdf2+0x5a>
 8001148:	2001      	movs	r0, #1
 800114a:	bcf0      	pop	{r4, r5, r6, r7}
 800114c:	46bb      	mov	fp, r7
 800114e:	46b2      	mov	sl, r6
 8001150:	46a9      	mov	r9, r5
 8001152:	46a0      	mov	r8, r4
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001156:	0033      	movs	r3, r6
 8001158:	2001      	movs	r0, #1
 800115a:	432b      	orrs	r3, r5
 800115c:	d1f5      	bne.n	800114a <__eqdf2+0x5a>
 800115e:	42a2      	cmp	r2, r4
 8001160:	d1f3      	bne.n	800114a <__eqdf2+0x5a>
 8001162:	464b      	mov	r3, r9
 8001164:	433b      	orrs	r3, r7
 8001166:	d1f0      	bne.n	800114a <__eqdf2+0x5a>
 8001168:	e7e2      	b.n	8001130 <__eqdf2+0x40>
 800116a:	2000      	movs	r0, #0
 800116c:	e7ed      	b.n	800114a <__eqdf2+0x5a>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff

08001174 <__gedf2>:
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	4647      	mov	r7, r8
 8001178:	46ce      	mov	lr, r9
 800117a:	0004      	movs	r4, r0
 800117c:	0018      	movs	r0, r3
 800117e:	0016      	movs	r6, r2
 8001180:	031b      	lsls	r3, r3, #12
 8001182:	0b1b      	lsrs	r3, r3, #12
 8001184:	4d2d      	ldr	r5, [pc, #180]	; (800123c <__gedf2+0xc8>)
 8001186:	004a      	lsls	r2, r1, #1
 8001188:	4699      	mov	r9, r3
 800118a:	b580      	push	{r7, lr}
 800118c:	0043      	lsls	r3, r0, #1
 800118e:	030f      	lsls	r7, r1, #12
 8001190:	46a4      	mov	ip, r4
 8001192:	46b0      	mov	r8, r6
 8001194:	0b3f      	lsrs	r7, r7, #12
 8001196:	0d52      	lsrs	r2, r2, #21
 8001198:	0fc9      	lsrs	r1, r1, #31
 800119a:	0d5b      	lsrs	r3, r3, #21
 800119c:	0fc0      	lsrs	r0, r0, #31
 800119e:	42aa      	cmp	r2, r5
 80011a0:	d021      	beq.n	80011e6 <__gedf2+0x72>
 80011a2:	42ab      	cmp	r3, r5
 80011a4:	d013      	beq.n	80011ce <__gedf2+0x5a>
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d122      	bne.n	80011f0 <__gedf2+0x7c>
 80011aa:	433c      	orrs	r4, r7
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <__gedf2+0x42>
 80011b0:	464d      	mov	r5, r9
 80011b2:	432e      	orrs	r6, r5
 80011b4:	d022      	beq.n	80011fc <__gedf2+0x88>
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d010      	beq.n	80011dc <__gedf2+0x68>
 80011ba:	4281      	cmp	r1, r0
 80011bc:	d022      	beq.n	8001204 <__gedf2+0x90>
 80011be:	2002      	movs	r0, #2
 80011c0:	3901      	subs	r1, #1
 80011c2:	4008      	ands	r0, r1
 80011c4:	3801      	subs	r0, #1
 80011c6:	bcc0      	pop	{r6, r7}
 80011c8:	46b9      	mov	r9, r7
 80011ca:	46b0      	mov	r8, r6
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ce:	464d      	mov	r5, r9
 80011d0:	432e      	orrs	r6, r5
 80011d2:	d129      	bne.n	8001228 <__gedf2+0xb4>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d1f0      	bne.n	80011ba <__gedf2+0x46>
 80011d8:	433c      	orrs	r4, r7
 80011da:	d1ee      	bne.n	80011ba <__gedf2+0x46>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d1f2      	bne.n	80011c6 <__gedf2+0x52>
 80011e0:	2001      	movs	r0, #1
 80011e2:	4240      	negs	r0, r0
 80011e4:	e7ef      	b.n	80011c6 <__gedf2+0x52>
 80011e6:	003d      	movs	r5, r7
 80011e8:	4325      	orrs	r5, r4
 80011ea:	d11d      	bne.n	8001228 <__gedf2+0xb4>
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d0ee      	beq.n	80011ce <__gedf2+0x5a>
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e2      	bne.n	80011ba <__gedf2+0x46>
 80011f4:	464c      	mov	r4, r9
 80011f6:	4326      	orrs	r6, r4
 80011f8:	d1df      	bne.n	80011ba <__gedf2+0x46>
 80011fa:	e7e0      	b.n	80011be <__gedf2+0x4a>
 80011fc:	2000      	movs	r0, #0
 80011fe:	2c00      	cmp	r4, #0
 8001200:	d0e1      	beq.n	80011c6 <__gedf2+0x52>
 8001202:	e7dc      	b.n	80011be <__gedf2+0x4a>
 8001204:	429a      	cmp	r2, r3
 8001206:	dc0a      	bgt.n	800121e <__gedf2+0xaa>
 8001208:	dbe8      	blt.n	80011dc <__gedf2+0x68>
 800120a:	454f      	cmp	r7, r9
 800120c:	d8d7      	bhi.n	80011be <__gedf2+0x4a>
 800120e:	d00e      	beq.n	800122e <__gedf2+0xba>
 8001210:	2000      	movs	r0, #0
 8001212:	454f      	cmp	r7, r9
 8001214:	d2d7      	bcs.n	80011c6 <__gedf2+0x52>
 8001216:	2900      	cmp	r1, #0
 8001218:	d0e2      	beq.n	80011e0 <__gedf2+0x6c>
 800121a:	0008      	movs	r0, r1
 800121c:	e7d3      	b.n	80011c6 <__gedf2+0x52>
 800121e:	4243      	negs	r3, r0
 8001220:	4158      	adcs	r0, r3
 8001222:	0040      	lsls	r0, r0, #1
 8001224:	3801      	subs	r0, #1
 8001226:	e7ce      	b.n	80011c6 <__gedf2+0x52>
 8001228:	2002      	movs	r0, #2
 800122a:	4240      	negs	r0, r0
 800122c:	e7cb      	b.n	80011c6 <__gedf2+0x52>
 800122e:	45c4      	cmp	ip, r8
 8001230:	d8c5      	bhi.n	80011be <__gedf2+0x4a>
 8001232:	2000      	movs	r0, #0
 8001234:	45c4      	cmp	ip, r8
 8001236:	d2c6      	bcs.n	80011c6 <__gedf2+0x52>
 8001238:	e7ed      	b.n	8001216 <__gedf2+0xa2>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	000007ff 	.word	0x000007ff

08001240 <__ledf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	4647      	mov	r7, r8
 8001244:	46ce      	mov	lr, r9
 8001246:	0004      	movs	r4, r0
 8001248:	0018      	movs	r0, r3
 800124a:	0016      	movs	r6, r2
 800124c:	031b      	lsls	r3, r3, #12
 800124e:	0b1b      	lsrs	r3, r3, #12
 8001250:	4d2c      	ldr	r5, [pc, #176]	; (8001304 <__ledf2+0xc4>)
 8001252:	004a      	lsls	r2, r1, #1
 8001254:	4699      	mov	r9, r3
 8001256:	b580      	push	{r7, lr}
 8001258:	0043      	lsls	r3, r0, #1
 800125a:	030f      	lsls	r7, r1, #12
 800125c:	46a4      	mov	ip, r4
 800125e:	46b0      	mov	r8, r6
 8001260:	0b3f      	lsrs	r7, r7, #12
 8001262:	0d52      	lsrs	r2, r2, #21
 8001264:	0fc9      	lsrs	r1, r1, #31
 8001266:	0d5b      	lsrs	r3, r3, #21
 8001268:	0fc0      	lsrs	r0, r0, #31
 800126a:	42aa      	cmp	r2, r5
 800126c:	d00d      	beq.n	800128a <__ledf2+0x4a>
 800126e:	42ab      	cmp	r3, r5
 8001270:	d010      	beq.n	8001294 <__ledf2+0x54>
 8001272:	2a00      	cmp	r2, #0
 8001274:	d127      	bne.n	80012c6 <__ledf2+0x86>
 8001276:	433c      	orrs	r4, r7
 8001278:	2b00      	cmp	r3, #0
 800127a:	d111      	bne.n	80012a0 <__ledf2+0x60>
 800127c:	464d      	mov	r5, r9
 800127e:	432e      	orrs	r6, r5
 8001280:	d10e      	bne.n	80012a0 <__ledf2+0x60>
 8001282:	2000      	movs	r0, #0
 8001284:	2c00      	cmp	r4, #0
 8001286:	d015      	beq.n	80012b4 <__ledf2+0x74>
 8001288:	e00e      	b.n	80012a8 <__ledf2+0x68>
 800128a:	003d      	movs	r5, r7
 800128c:	4325      	orrs	r5, r4
 800128e:	d110      	bne.n	80012b2 <__ledf2+0x72>
 8001290:	4293      	cmp	r3, r2
 8001292:	d118      	bne.n	80012c6 <__ledf2+0x86>
 8001294:	464d      	mov	r5, r9
 8001296:	432e      	orrs	r6, r5
 8001298:	d10b      	bne.n	80012b2 <__ledf2+0x72>
 800129a:	2a00      	cmp	r2, #0
 800129c:	d102      	bne.n	80012a4 <__ledf2+0x64>
 800129e:	433c      	orrs	r4, r7
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d00b      	beq.n	80012bc <__ledf2+0x7c>
 80012a4:	4281      	cmp	r1, r0
 80012a6:	d014      	beq.n	80012d2 <__ledf2+0x92>
 80012a8:	2002      	movs	r0, #2
 80012aa:	3901      	subs	r1, #1
 80012ac:	4008      	ands	r0, r1
 80012ae:	3801      	subs	r0, #1
 80012b0:	e000      	b.n	80012b4 <__ledf2+0x74>
 80012b2:	2002      	movs	r0, #2
 80012b4:	bcc0      	pop	{r6, r7}
 80012b6:	46b9      	mov	r9, r7
 80012b8:	46b0      	mov	r8, r6
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	2800      	cmp	r0, #0
 80012be:	d1f9      	bne.n	80012b4 <__ledf2+0x74>
 80012c0:	2001      	movs	r0, #1
 80012c2:	4240      	negs	r0, r0
 80012c4:	e7f6      	b.n	80012b4 <__ledf2+0x74>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ec      	bne.n	80012a4 <__ledf2+0x64>
 80012ca:	464c      	mov	r4, r9
 80012cc:	4326      	orrs	r6, r4
 80012ce:	d1e9      	bne.n	80012a4 <__ledf2+0x64>
 80012d0:	e7ea      	b.n	80012a8 <__ledf2+0x68>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dd04      	ble.n	80012e0 <__ledf2+0xa0>
 80012d6:	4243      	negs	r3, r0
 80012d8:	4158      	adcs	r0, r3
 80012da:	0040      	lsls	r0, r0, #1
 80012dc:	3801      	subs	r0, #1
 80012de:	e7e9      	b.n	80012b4 <__ledf2+0x74>
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbeb      	blt.n	80012bc <__ledf2+0x7c>
 80012e4:	454f      	cmp	r7, r9
 80012e6:	d8df      	bhi.n	80012a8 <__ledf2+0x68>
 80012e8:	d006      	beq.n	80012f8 <__ledf2+0xb8>
 80012ea:	2000      	movs	r0, #0
 80012ec:	454f      	cmp	r7, r9
 80012ee:	d2e1      	bcs.n	80012b4 <__ledf2+0x74>
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d0e5      	beq.n	80012c0 <__ledf2+0x80>
 80012f4:	0008      	movs	r0, r1
 80012f6:	e7dd      	b.n	80012b4 <__ledf2+0x74>
 80012f8:	45c4      	cmp	ip, r8
 80012fa:	d8d5      	bhi.n	80012a8 <__ledf2+0x68>
 80012fc:	2000      	movs	r0, #0
 80012fe:	45c4      	cmp	ip, r8
 8001300:	d2d8      	bcs.n	80012b4 <__ledf2+0x74>
 8001302:	e7f5      	b.n	80012f0 <__ledf2+0xb0>
 8001304:	000007ff 	.word	0x000007ff

08001308 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_CAN_Init+0xbc>)
 800130e:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <MX_CAN_Init+0xc0>)
 8001310:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001314:	2203      	movs	r2, #3
 8001316:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_CAN_Init+0xbc>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	0452      	lsls	r2, r2, #17
 8001324:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001328:	2290      	movs	r2, #144	; 0x90
 800132a:	0312      	lsls	r2, r2, #12
 800132c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	03d2      	lsls	r2, r2, #15
 8001334:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001338:	2200      	movs	r2, #0
 800133a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_CAN_Init+0xbc>)
 800133e:	2201      	movs	r2, #1
 8001340:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001344:	2201      	movs	r2, #1
 8001346:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_CAN_Init+0xbc>)
 800134a:	2200      	movs	r2, #0
 800134c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_CAN_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_CAN_Init+0xbc>)
 800135c:	0018      	movs	r0, r3
 800135e:	f000 fc65 	bl	8001c2c <HAL_CAN_Init>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001366:	f000 fa83 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterInitStructure.FilterBank = 0;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_CAN_Init+0xc4>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  CAN_FilterInitStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_CAN_Init+0xc4>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  CAN_FilterInitStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_CAN_Init+0xc4>)
 8001378:	2201      	movs	r2, #1
 800137a:	61da      	str	r2, [r3, #28]
  CAN_FilterInitStructure.FilterIdHigh= 0x000;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_CAN_Init+0xc4>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
  CAN_FilterInitStructure.FilterIdLow=0x000;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_CAN_Init+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  CAN_FilterInitStructure.FilterMaskIdHigh= 0x000;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_CAN_Init+0xc4>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  CAN_FilterInitStructure.FilterMaskIdLow=0x0000;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_CAN_Init+0xc4>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  CAN_FilterInitStructure.FilterFIFOAssignment = 0;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_CAN_Init+0xc4>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  CAN_FilterInitStructure.FilterActivation = ENABLE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_CAN_Init+0xc4>)
 800139c:	2201      	movs	r2, #1
 800139e:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &CAN_FilterInitStructure);
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <MX_CAN_Init+0xc4>)
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_CAN_Init+0xbc>)
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 fd3e 	bl	8001e28 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <MX_CAN_Init+0xbc>)
 80013ae:	2112      	movs	r1, #18
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 ff9c 	bl	80022ee <HAL_CAN_ActivateNotification>
  msg_available = 0;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_CAN_Init+0xc8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN_Init 2 */

}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	20000078 	.word	0x20000078
 80013c8:	40006400 	.word	0x40006400
 80013cc:	20000028 	.word	0x20000028
 80013d0:	2000006c 	.word	0x2000006c

080013d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	2414      	movs	r4, #20
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	0018      	movs	r0, r3
 80013e2:	2314      	movs	r3, #20
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f002 fdae 	bl	8003f48 <memset>
  if(canHandle->Instance==CAN)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_CAN_MspInit+0xa4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d13b      	bne.n	800146e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_CAN_MspInit+0xa8>)
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_CAN_MspInit+0xa8>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	0489      	lsls	r1, r1, #18
 8001400:	430a      	orrs	r2, r1
 8001402:	61da      	str	r2, [r3, #28]
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_CAN_MspInit+0xa8>)
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	049b      	lsls	r3, r3, #18
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_CAN_MspInit+0xa8>)
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_CAN_MspInit+0xa8>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_CAN_MspInit+0xa8>)
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	22c0      	movs	r2, #192	; 0xc0
 8001432:	0152      	lsls	r2, r2, #5
 8001434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	0021      	movs	r1, r4
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2202      	movs	r2, #2
 800143c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2203      	movs	r2, #3
 8001448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2204      	movs	r2, #4
 800144e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	187a      	adds	r2, r7, r1
 8001452:	2390      	movs	r3, #144	; 0x90
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fa65 	bl	8002928 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201e      	movs	r0, #30
 8001464:	f001 fa2e 	bl	80028c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001468:	201e      	movs	r0, #30
 800146a:	f001 fa40 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b00b      	add	sp, #44	; 0x2c
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40006400 	.word	0x40006400
 800147c:	40021000 	.word	0x40021000

08001480 <CAN_HandleRxMessages>:
}

/* USER CODE BEGIN 1 */

void CAN_HandleRxMessages(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  if (msg_available == 1)
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <CAN_HandleRxMessages+0xc0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d152      	bne.n	8001534 <CAN_HandleRxMessages+0xb4>
  {
    msg_available = 0;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <CAN_HandleRxMessages+0xc0>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    switch (RxMessage.StdId)
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <CAN_HandleRxMessages+0xc4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2290      	movs	r2, #144	; 0x90
 800149a:	0052      	lsls	r2, r2, #1
 800149c:	4293      	cmp	r3, r2
 800149e:	d012      	beq.n	80014c6 <CAN_HandleRxMessages+0x46>
 80014a0:	2290      	movs	r2, #144	; 0x90
 80014a2:	0052      	lsls	r2, r2, #1
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d846      	bhi.n	8001536 <CAN_HandleRxMessages+0xb6>
 80014a8:	2b25      	cmp	r3, #37	; 0x25
 80014aa:	d004      	beq.n	80014b6 <CAN_HandleRxMessages+0x36>
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0052      	lsls	r2, r2, #1
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d037      	beq.n	8001524 <CAN_HandleRxMessages+0xa4>
      
      case 0x100:
        button = RxData[0] & 0x08;
    }
  }
}
 80014b4:	e03f      	b.n	8001536 <CAN_HandleRxMessages+0xb6>
    	rx_timer = 0;
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <CAN_HandleRxMessages+0xc8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	801a      	strh	r2, [r3, #0]
    	brake_pressure_front = RxData[0];
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <CAN_HandleRxMessages+0xcc>)
 80014be:	781a      	ldrb	r2, [r3, #0]
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <CAN_HandleRxMessages+0xd0>)
 80014c2:	701a      	strb	r2, [r3, #0]
        break;
 80014c4:	e037      	b.n	8001536 <CAN_HandleRxMessages+0xb6>
    	inverterTemp = RxData[0];
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <CAN_HandleRxMessages+0xcc>)
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <CAN_HandleRxMessages+0xd4>)
 80014cc:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 80014ce:	2301      	movs	r3, #1
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e010      	b.n	80014f6 <CAN_HandleRxMessages+0x76>
    		if (inverterTemp < RxData[i*2]) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <CAN_HandleRxMessages+0xcc>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <CAN_HandleRxMessages+0xd4>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d905      	bls.n	80014f0 <CAN_HandleRxMessages+0x70>
    			inverterTemp = RxData[i*2];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <CAN_HandleRxMessages+0xcc>)
 80014ea:	5cd2      	ldrb	r2, [r2, r3]
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <CAN_HandleRxMessages+0xd4>)
 80014ee:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	ddeb      	ble.n	80014d4 <CAN_HandleRxMessages+0x54>
      inverterTemp /= 0.7;
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <CAN_HandleRxMessages+0xd4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff fd69 	bl	8000fd8 <__aeabi_i2d>
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <CAN_HandleRxMessages+0xd8>)
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <CAN_HandleRxMessages+0xdc>)
 800150a:	f7fe fea7 	bl	800025c <__aeabi_ddiv>
 800150e:	0002      	movs	r2, r0
 8001510:	000b      	movs	r3, r1
 8001512:	0010      	movs	r0, r2
 8001514:	0019      	movs	r1, r3
 8001516:	f7fe fe83 	bl	8000220 <__aeabi_d2uiz>
 800151a:	0003      	movs	r3, r0
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <CAN_HandleRxMessages+0xd4>)
 8001520:	701a      	strb	r2, [r3, #0]
        break;
 8001522:	e008      	b.n	8001536 <CAN_HandleRxMessages+0xb6>
        button = RxData[0] & 0x08;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <CAN_HandleRxMessages+0xcc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <CAN_HandleRxMessages+0xe0>)
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	e000      	b.n	8001536 <CAN_HandleRxMessages+0xb6>
  }
 8001534:	46c0      	nop			; (mov r8, r8)
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	2000006c 	.word	0x2000006c
 8001544:	20000050 	.word	0x20000050
 8001548:	200000a2 	.word	0x200000a2
 800154c:	20000070 	.word	0x20000070
 8001550:	200000a0 	.word	0x200000a0
 8001554:	200000a5 	.word	0x200000a5
 8001558:	66666666 	.word	0x66666666
 800155c:	3fe66666 	.word	0x3fe66666
 8001560:	200000a7 	.word	0x200000a7

08001564 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	msg_available = 1;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	2100      	movs	r1, #0
 800157a:	f000 fd8d 	bl	8002098 <HAL_CAN_GetRxMessage>
	CAN_HandleRxMessages();
 800157e:	f7ff ff7f 	bl	8001480 <CAN_HandleRxMessages>
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	2000006c 	.word	0x2000006c
 8001590:	20000070 	.word	0x20000070
 8001594:	20000050 	.word	0x20000050

08001598 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	240c      	movs	r4, #12
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	0018      	movs	r0, r3
 80015a4:	2314      	movs	r3, #20
 80015a6:	001a      	movs	r2, r3
 80015a8:	2100      	movs	r1, #0
 80015aa:	f002 fccd 	bl	8003f48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0289      	lsls	r1, r1, #10
 80015b8:	430a      	orrs	r2, r1
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	02c9      	lsls	r1, r1, #11
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_GPIO_Init+0xc0>)
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	02db      	lsls	r3, r3, #11
 80015e0:	4013      	ands	r3, r2
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	0219      	lsls	r1, r3, #8
 80015ea:	2390      	movs	r3, #144	; 0x90
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	2200      	movs	r2, #0
 80015f0:	0018      	movs	r0, r3
 80015f2:	f001 fb01 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_GPIO_Init+0xc4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	2108      	movs	r1, #8
 80015fc:	0018      	movs	r0, r3
 80015fe:	f001 fafb 	bl	8002bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0212      	lsls	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	193b      	adds	r3, r7, r4
 800160c:	2201      	movs	r2, #1
 800160e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	193b      	adds	r3, r7, r4
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	193b      	adds	r3, r7, r4
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	193a      	adds	r2, r7, r4
 800161e:	2390      	movs	r3, #144	; 0x90
 8001620:	05db      	lsls	r3, r3, #23
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f001 f97f 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800162a:	0021      	movs	r1, r4
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2208      	movs	r2, #8
 8001630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2201      	movs	r2, #1
 8001636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	187b      	adds	r3, r7, r1
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <MX_GPIO_Init+0xc4>)
 8001648:	0019      	movs	r1, r3
 800164a:	0010      	movs	r0, r2
 800164c:	f001 f96c 	bl	8002928 <HAL_GPIO_Init>

}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b009      	add	sp, #36	; 0x24
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	48000400 	.word	0x48000400

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fa59 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f8c5 	bl	80017f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f7ff ff93 	bl	8001598 <MX_GPIO_Init>
  MX_CAN_Init();
 8001672:	f7ff fe49 	bl	8001308 <MX_CAN_Init>
  MX_TIM3_Init();
 8001676:	f000 f94f 	bl	8001918 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <main+0x164>)
 800167c:	0018      	movs	r0, r3
 800167e:	f000 fcc5 	bl	800200c <HAL_CAN_Start>
 8001682:	1e03      	subs	r3, r0, #0
 8001684:	d001      	beq.n	800168a <main+0x2a>
  {
    Error_Handler();
 8001686:	f000 f8f3 	bl	8001870 <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <main+0x168>)
 800168c:	2100      	movs	r1, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fff2 	bl	8003678 <HAL_TIM_PWM_Start>
  FAN_TIMER->FAN_CHANNEL = 19000-1;
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <main+0x16c>)
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <main+0x170>)
 8001698:	635a      	str	r2, [r3, #52]	; 0x34
  fan_timer = HAL_GetTick();
 800169a:	f000 fa99 	bl	8001bd0 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <main+0x174>)
 80016a2:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 80016a4:	23fa      	movs	r3, #250	; 0xfa
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 fa9b 	bl	8001be4 <HAL_Delay>
  for (int i=0; i<3; i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e030      	b.n	8001716 <main+0xb6>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	0219      	lsls	r1, r3, #8
 80016b8:	2390      	movs	r3, #144	; 0x90
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	2201      	movs	r2, #1
 80016be:	0018      	movs	r0, r3
 80016c0:	f001 fa9a 	bl	8002bf8 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80016c4:	203c      	movs	r0, #60	; 0x3c
 80016c6:	f000 fa8d 	bl	8001be4 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	0219      	lsls	r1, r3, #8
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	2200      	movs	r2, #0
 80016d4:	0018      	movs	r0, r3
 80016d6:	f001 fa8f 	bl	8002bf8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f000 fa82 	bl	8001be4 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	0219      	lsls	r1, r3, #8
 80016e4:	2390      	movs	r3, #144	; 0x90
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	2201      	movs	r2, #1
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 fa84 	bl	8002bf8 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80016f0:	203c      	movs	r0, #60	; 0x3c
 80016f2:	f000 fa77 	bl	8001be4 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	0219      	lsls	r1, r3, #8
 80016fa:	2390      	movs	r3, #144	; 0x90
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	2200      	movs	r2, #0
 8001700:	0018      	movs	r0, r3
 8001702:	f001 fa79 	bl	8002bf8 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 8001706:	23c8      	movs	r3, #200	; 0xc8
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	0018      	movs	r0, r3
 800170c:	f000 fa6a 	bl	8001be4 <HAL_Delay>
  for (int i=0; i<3; i++){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	ddcb      	ble.n	80016b4 <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f000 fa61 	bl	8001be4 <HAL_Delay>

    // Handle Brakelight
	  if (brake_pressure_front > BP_THRESHOLD) {
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <main+0x178>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d902      	bls.n	8001730 <main+0xd0>
		  bl_state = 1;
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <main+0x17c>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
	  }
	  if (brake_pressure_front < BP_THRESHOLD / 2){
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0x178>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <main+0xde>
		  bl_state = 0;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <main+0x17c>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(BRAKELIGHT_LED, bl_state);
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <main+0x17c>)
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	0219      	lsls	r1, r3, #8
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0018      	movs	r0, r3
 800174c:	f001 fa54 	bl	8002bf8 <HAL_GPIO_WritePin>

	  if (rx_timer > 1000) {
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <main+0x180>)
 8001752:	881a      	ldrh	r2, [r3, #0]
 8001754:	23fa      	movs	r3, #250	; 0xfa
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d902      	bls.n	8001762 <main+0x102>
		  brake_pressure_front = 0;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <main+0x178>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
	  }
	  rx_timer++;
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <main+0x180>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <main+0x180>)
 800176c:	801a      	strh	r2, [r3, #0]

    // Handle Pump
	  if (inverterTemp > PUMP_THRESHOLD) {
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <main+0x184>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b23      	cmp	r3, #35	; 0x23
 8001774:	d902      	bls.n	800177c <main+0x11c>
		  pump_state = 1;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <main+0x188>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	  }
	  if (inverterTemp < PUMP_THRESHOLD - 10){
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <main+0x184>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b18      	cmp	r3, #24
 8001782:	d802      	bhi.n	800178a <main+0x12a>
		  pump_state = 0;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <main+0x188>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	  }
    HAL_GPIO_WritePin(PUMP, pump_state);
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <main+0x188>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4817      	ldr	r0, [pc, #92]	; (80017ec <main+0x18c>)
 8001790:	001a      	movs	r2, r3
 8001792:	2108      	movs	r1, #8
 8001794:	f001 fa30 	bl	8002bf8 <HAL_GPIO_WritePin>

//    pump_state = button;

    // Handle Fan
    if (HAL_GetTick() - fan_timer > 6000) {
 8001798:	f000 fa1a 	bl	8001bd0 <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <main+0x174>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <main+0x190>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d9b8      	bls.n	800171c <main+0xbc>
      if (pump_state) {
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <main+0x188>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <main+0x15a>
        FAN_TIMER->FAN_CHANNEL = 18940;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <main+0x16c>)
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <main+0x194>)
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
 80017b8:	e7b0      	b.n	800171c <main+0xbc>
      } else {
        FAN_TIMER->FAN_CHANNEL = 19000-1;
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <main+0x16c>)
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <main+0x170>)
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(1);
 80017c0:	e7ac      	b.n	800171c <main+0xbc>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000078 	.word	0x20000078
 80017c8:	200000ac 	.word	0x200000ac
 80017cc:	40000400 	.word	0x40000400
 80017d0:	00004a37 	.word	0x00004a37
 80017d4:	200000a8 	.word	0x200000a8
 80017d8:	200000a0 	.word	0x200000a0
 80017dc:	200000a4 	.word	0x200000a4
 80017e0:	200000a2 	.word	0x200000a2
 80017e4:	200000a5 	.word	0x200000a5
 80017e8:	200000a6 	.word	0x200000a6
 80017ec:	48000400 	.word	0x48000400
 80017f0:	00001770 	.word	0x00001770
 80017f4:	000049fc 	.word	0x000049fc

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b093      	sub	sp, #76	; 0x4c
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	2414      	movs	r4, #20
 8001800:	193b      	adds	r3, r7, r4
 8001802:	0018      	movs	r0, r3
 8001804:	2334      	movs	r3, #52	; 0x34
 8001806:	001a      	movs	r2, r3
 8001808:	2100      	movs	r1, #0
 800180a:	f002 fb9d 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	0018      	movs	r0, r3
 8001812:	2310      	movs	r3, #16
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f002 fb96 	bl	8003f48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800181c:	193b      	adds	r3, r7, r4
 800181e:	2220      	movs	r2, #32
 8001820:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2201      	movs	r2, #1
 8001826:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001828:	193b      	adds	r3, r7, r4
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	f001 f9ff 	bl	8002c34 <HAL_RCC_OscConfig>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800183a:	f000 f819 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2203      	movs	r2, #3
 8001848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2101      	movs	r1, #1
 800185a:	0018      	movs	r0, r3
 800185c:	f001 fd70 	bl	8003340 <HAL_RCC_ClockConfig>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001864:	f000 f804 	bl	8001870 <Error_Handler>
  }
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b013      	add	sp, #76	; 0x4c
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_MspInit+0x44>)
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_MspInit+0x44>)
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x44>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x44>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x44>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	61da      	str	r2, [r3, #28]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_MspInit+0x44>)
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	4013      	ands	r3, r2
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f960 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <CEC_CAN_IRQHandler+0x14>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fd21 	bl	8002342 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000078 	.word	0x20000078

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	2320      	movs	r3, #32
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	0018      	movs	r0, r3
 8001924:	2308      	movs	r3, #8
 8001926:	001a      	movs	r2, r3
 8001928:	2100      	movs	r1, #0
 800192a:	f002 fb0d 	bl	8003f48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	0018      	movs	r0, r3
 8001932:	231c      	movs	r3, #28
 8001934:	001a      	movs	r2, r3
 8001936:	2100      	movs	r1, #0
 8001938:	f002 fb06 	bl	8003f48 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MX_TIM3_Init+0xb8>)
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <MX_TIM3_Init+0xbc>)
 8001940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_TIM3_Init+0xb8>)
 8001944:	222f      	movs	r2, #47	; 0x2f
 8001946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_TIM3_Init+0xb8>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_TIM3_Init+0xb8>)
 8001950:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <MX_TIM3_Init+0xc0>)
 8001952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_TIM3_Init+0xb8>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_TIM3_Init+0xb8>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM3_Init+0xb8>)
 8001962:	0018      	movs	r0, r3
 8001964:	f001 fe38 	bl	80035d8 <HAL_TIM_PWM_Init>
 8001968:	1e03      	subs	r3, r0, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800196c:	f7ff ff80 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2120      	movs	r1, #32
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197e:	187a      	adds	r2, r7, r1
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MX_TIM3_Init+0xb8>)
 8001982:	0011      	movs	r1, r2
 8001984:	0018      	movs	r0, r3
 8001986:	f002 fa63 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800198e:	f7ff ff6f 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2260      	movs	r2, #96	; 0x60
 8001996:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	1d39      	adds	r1, r7, #4
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_TIM3_Init+0xb8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f001 ff0d 	bl	80037d0 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80019ba:	f7ff ff59 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <MX_TIM3_Init+0xb8>)
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 f829 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b00a      	add	sp, #40	; 0x28
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	200000ac 	.word	0x200000ac
 80019d4:	40000400 	.word	0x40000400
 80019d8:	00004e1f 	.word	0x00004e1f

080019dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_TIM_PWM_MspInit+0x34>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_TIM_PWM_MspInit+0x38>)
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_TIM_PWM_MspInit+0x38>)
 80019f4:	2102      	movs	r1, #2
 80019f6:	430a      	orrs	r2, r1
 80019f8:	61da      	str	r2, [r3, #28]
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_TIM_PWM_MspInit+0x38>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	240c      	movs	r4, #12
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	0018      	movs	r0, r3
 8001a26:	2314      	movs	r3, #20
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f002 fa8c 	bl	8003f48 <memset>
  if(timHandle->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <HAL_TIM_MspPostInit+0x74>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d123      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_TIM_MspPostInit+0x78>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_TIM_MspPostInit+0x78>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	02c9      	lsls	r1, r1, #11
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_TIM_MspPostInit+0x78>)
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	02db      	lsls	r3, r3, #11
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a56:	0021      	movs	r1, r4
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2202      	movs	r2, #2
 8001a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2201      	movs	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_TIM_MspPostInit+0x7c>)
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	f000 ff53 	bl	8002928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b009      	add	sp, #36	; 0x24
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40000400 	.word	0x40000400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	48000400 	.word	0x48000400

08001a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a9c:	f7ff ff36 	bl	800190c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <LoopForever+0x6>)
    LDR R1, [R0]
 8001aa2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001aa4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <LoopForever+0xa>)
    CMP R1, R2
 8001aa8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001aaa:	d105      	bne.n	8001ab8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001aac:	4811      	ldr	r0, [pc, #68]	; (8001af4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001aae:	4912      	ldr	r1, [pc, #72]	; (8001af8 <LoopForever+0x12>)
    STR R1, [R0]
 8001ab0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ab2:	4812      	ldr	r0, [pc, #72]	; (8001afc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ab4:	4912      	ldr	r1, [pc, #72]	; (8001b00 <LoopForever+0x1a>)
    STR R1, [R0]
 8001ab6:	6001      	str	r1, [r0, #0]

08001ab8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001aba:	4913      	ldr	r1, [pc, #76]	; (8001b08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <LoopForever+0x26>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001ad0:	4c10      	ldr	r4, [pc, #64]	; (8001b14 <LoopForever+0x2e>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ade:	f002 fa0f 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae2:	f7ff fdbd 	bl	8001660 <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001aec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001af0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001af4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001af8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001afc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001b00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b0c:	08003fe8 	.word	0x08003fe8
  ldr r2, =_sbss
 8001b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b14:	200000f8 	.word	0x200000f8

08001b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_IRQHandler>
	...

08001b1c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_Init+0x24>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_Init+0x24>)
 8001b26:	2110      	movs	r1, #16
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f809 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fea3 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40022000 	.word	0x40022000

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_InitTick+0x5c>)
 8001b4e:	681c      	ldr	r4, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	0019      	movs	r1, r3
 8001b56:	23fa      	movs	r3, #250	; 0xfa
 8001b58:	0098      	lsls	r0, r3, #2
 8001b5a:	f7fe fad5 	bl	8000108 <__udivsi3>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	0019      	movs	r1, r3
 8001b62:	0020      	movs	r0, r4
 8001b64:	f7fe fad0 	bl	8000108 <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fecf 	bl	800290e <HAL_SYSTICK_Config>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e00f      	b.n	8001b98 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d80b      	bhi.n	8001b96 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	2301      	movs	r3, #1
 8001b82:	425b      	negs	r3, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fe9c 	bl	80028c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_InitTick+0x64>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_IncTick+0x1c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	18d2      	adds	r2, r2, r3
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_IncTick+0x20>)
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	200000f4 	.word	0x200000f4

08001bd0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_GetTick+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	200000f4 	.word	0x200000f4

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fff0 	bl	8001bd0 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	001a      	movs	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	189b      	adds	r3, r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	f7ff ffe0 	bl	8001bd0 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000008 	.word	0x20000008

08001c2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0f0      	b.n	8001e20 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fbc1 	bl	80013d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c62:	f7ff ffb5 	bl	8001bd0 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c6a:	e013      	b.n	8001c94 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c6c:	f7ff ffb0 	bl	8001bd0 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d90c      	bls.n	8001c94 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0292      	lsls	r2, r2, #10
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0c5      	b.n	8001e20 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d0e5      	beq.n	8001c6c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2102      	movs	r1, #2
 8001cac:	438a      	bics	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff ff8e 	bl	8001bd0 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cb8:	e013      	b.n	8001ce2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cba:	f7ff ff89 	bl	8001bd0 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b0a      	cmp	r3, #10
 8001cc6:	d90c      	bls.n	8001ce2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0292      	lsls	r2, r2, #10
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	2105      	movs	r1, #5
 8001cdc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e09e      	b.n	8001e20 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1e5      	bne.n	8001cba <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7e1b      	ldrb	r3, [r3, #24]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e007      	b.n	8001d18 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	438a      	bics	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e5b      	ldrb	r3, [r3, #25]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d108      	bne.n	8001d32 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e007      	b.n	8001d42 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2140      	movs	r1, #64	; 0x40
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7e9b      	ldrb	r3, [r3, #26]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2120      	movs	r1, #32
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e007      	b.n	8001d6c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2120      	movs	r1, #32
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7edb      	ldrb	r3, [r3, #27]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d108      	bne.n	8001d86 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2110      	movs	r1, #16
 8001d80:	438a      	bics	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e007      	b.n	8001d96 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2110      	movs	r1, #16
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7f1b      	ldrb	r3, [r3, #28]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2108      	movs	r1, #8
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2108      	movs	r1, #8
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7f5b      	ldrb	r3, [r3, #29]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2104      	movs	r1, #4
 8001de6:	438a      	bics	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	0011      	movs	r1, r2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e38:	2013      	movs	r0, #19
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	2120      	movs	r1, #32
 8001e40:	5c52      	ldrb	r2, [r2, r1]
 8001e42:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e44:	0002      	movs	r2, r0
 8001e46:	18bb      	adds	r3, r7, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d004      	beq.n	8001e58 <HAL_CAN_ConfigFilter+0x30>
 8001e4e:	18bb      	adds	r3, r7, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d000      	beq.n	8001e58 <HAL_CAN_ConfigFilter+0x30>
 8001e56:	e0cd      	b.n	8001ff4 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	58d3      	ldr	r3, [r2, r3]
 8001e60:	2201      	movs	r2, #1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	0011      	movs	r1, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	221f      	movs	r2, #31
 8001e74:	4013      	ands	r3, r2
 8001e76:	2201      	movs	r2, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	2387      	movs	r3, #135	; 0x87
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	58d3      	ldr	r3, [r2, r3]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	43d2      	mvns	r2, r2
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	2387      	movs	r3, #135	; 0x87
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d129      	bne.n	8001ef2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	2383      	movs	r3, #131	; 0x83
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	58d3      	ldr	r3, [r2, r3]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	43d2      	mvns	r2, r2
 8001eaa:	401a      	ands	r2, r3
 8001eac:	0011      	movs	r1, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	2383      	movs	r3, #131	; 0x83
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3248      	adds	r2, #72	; 0x48
 8001ece:	00d2      	lsls	r2, r2, #3
 8001ed0:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	3348      	adds	r3, #72	; 0x48
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	18cb      	adds	r3, r1, r3
 8001eee:	3304      	adds	r3, #4
 8001ef0:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d128      	bne.n	8001f4c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	2383      	movs	r3, #131	; 0x83
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	58d2      	ldr	r2, [r2, r3]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	0011      	movs	r1, r2
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	2383      	movs	r3, #131	; 0x83
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f22:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3248      	adds	r2, #72	; 0x48
 8001f28:	00d2      	lsls	r2, r2, #3
 8001f2a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f40:	6979      	ldr	r1, [r7, #20]
 8001f42:	3348      	adds	r3, #72	; 0x48
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	18cb      	adds	r3, r1, r3
 8001f48:	3304      	adds	r3, #4
 8001f4a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10c      	bne.n	8001f6e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	2381      	movs	r3, #129	; 0x81
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	58d3      	ldr	r3, [r2, r3]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	43d2      	mvns	r2, r2
 8001f60:	401a      	ands	r2, r3
 8001f62:	0011      	movs	r1, r2
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	2381      	movs	r3, #129	; 0x81
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	50d1      	str	r1, [r2, r3]
 8001f6c:	e00a      	b.n	8001f84 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	2381      	movs	r3, #129	; 0x81
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	58d2      	ldr	r2, [r2, r3]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	2381      	movs	r3, #129	; 0x81
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	2385      	movs	r3, #133	; 0x85
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	58d3      	ldr	r3, [r2, r3]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	43d2      	mvns	r2, r2
 8001f98:	401a      	ands	r2, r3
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	2385      	movs	r3, #133	; 0x85
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	50d1      	str	r1, [r2, r3]
 8001fa4:	e00a      	b.n	8001fbc <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	2385      	movs	r3, #133	; 0x85
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	58d2      	ldr	r2, [r2, r3]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	2385      	movs	r3, #133	; 0x85
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10a      	bne.n	8001fda <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	2387      	movs	r3, #135	; 0x87
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	58d2      	ldr	r2, [r2, r3]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	0011      	movs	r1, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	2387      	movs	r3, #135	; 0x87
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	02d2      	lsls	r2, r2, #11
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
  }
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b006      	add	sp, #24
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d12f      	bne.n	8002080 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	2102      	movs	r1, #2
 8002026:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	438a      	bics	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fdca 	bl	8001bd0 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002040:	e013      	b.n	800206a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002042:	f7ff fdc5 	bl	8001bd0 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b0a      	cmp	r3, #10
 800204e:	d90c      	bls.n	800206a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	0292      	lsls	r2, r2, #10
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	2105      	movs	r1, #5
 8002064:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e012      	b.n	8002090 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	d1e5      	bne.n	8002042 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e007      	b.n	8002090 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0312      	lsls	r2, r2, #12
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a6:	2017      	movs	r0, #23
 80020a8:	183b      	adds	r3, r7, r0
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	2120      	movs	r1, #32
 80020ae:	5c52      	ldrb	r2, [r2, r1]
 80020b0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020b2:	0002      	movs	r2, r0
 80020b4:	18bb      	adds	r3, r7, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d004      	beq.n	80020c6 <HAL_CAN_GetRxMessage+0x2e>
 80020bc:	18bb      	adds	r3, r7, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d000      	beq.n	80020c6 <HAL_CAN_GetRxMessage+0x2e>
 80020c4:	e107      	b.n	80022d6 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2203      	movs	r2, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d117      	bne.n	8002108 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	0392      	lsls	r2, r2, #14
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0fd      	b.n	80022e6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2203      	movs	r2, #3
 80020f2:	4013      	ands	r3, r2
 80020f4:	d108      	bne.n	8002108 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	0392      	lsls	r2, r2, #14
 80020fe:	431a      	orrs	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0ee      	b.n	80022e6 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	321b      	adds	r2, #27
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	58d3      	ldr	r3, [r2, r3]
 8002114:	2204      	movs	r2, #4
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	321b      	adds	r2, #27
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	0d5a      	lsrs	r2, r3, #21
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e00a      	b.n	8002152 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	321b      	adds	r2, #27
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	58d3      	ldr	r3, [r2, r3]
 8002148:	08db      	lsrs	r3, r3, #3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	321b      	adds	r2, #27
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	2202      	movs	r2, #2
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	331b      	adds	r3, #27
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	18d3      	adds	r3, r2, r3
 8002172:	3304      	adds	r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2208      	movs	r2, #8
 8002178:	4013      	ands	r3, r2
 800217a:	d003      	beq.n	8002184 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2208      	movs	r2, #8
 8002180:	611a      	str	r2, [r3, #16]
 8002182:	e00b      	b.n	800219c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	331b      	adds	r3, #27
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	18d3      	adds	r3, r2, r3
 8002190:	3304      	adds	r3, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	220f      	movs	r2, #15
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	331b      	adds	r3, #27
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	18d3      	adds	r3, r2, r3
 80021a8:	3304      	adds	r3, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	331b      	adds	r3, #27
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	3304      	adds	r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0c1b      	lsrs	r3, r3, #16
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	0c1a      	lsrs	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	23dc      	movs	r3, #220	; 0xdc
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	188a      	adds	r2, r1, r2
 80021de:	18d3      	adds	r3, r2, r3
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	23dc      	movs	r3, #220	; 0xdc
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	188a      	adds	r2, r1, r2
 80021f6:	18d3      	adds	r3, r2, r3
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0a1a      	lsrs	r2, r3, #8
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	23dc      	movs	r3, #220	; 0xdc
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	188a      	adds	r2, r1, r2
 8002212:	18d3      	adds	r3, r2, r3
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0c1a      	lsrs	r2, r3, #16
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3302      	adds	r3, #2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	23dc      	movs	r3, #220	; 0xdc
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	188a      	adds	r2, r1, r2
 800222e:	18d3      	adds	r3, r2, r3
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e1a      	lsrs	r2, r3, #24
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	3303      	adds	r3, #3
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	23de      	movs	r3, #222	; 0xde
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	188a      	adds	r2, r1, r2
 800224a:	18d3      	adds	r3, r2, r3
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	3304      	adds	r3, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	23de      	movs	r3, #222	; 0xde
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	188a      	adds	r2, r1, r2
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0a1a      	lsrs	r2, r3, #8
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3305      	adds	r3, #5
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	23de      	movs	r3, #222	; 0xde
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	188a      	adds	r2, r1, r2
 8002280:	18d3      	adds	r3, r2, r3
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0c1a      	lsrs	r2, r3, #16
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3306      	adds	r3, #6
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	23de      	movs	r3, #222	; 0xde
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	188a      	adds	r2, r1, r2
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e1a      	lsrs	r2, r3, #24
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3307      	adds	r3, #7
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2120      	movs	r1, #32
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2120      	movs	r1, #32
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e007      	b.n	80022e6 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	02d2      	lsls	r2, r2, #11
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
  }
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b006      	add	sp, #24
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f8:	200f      	movs	r0, #15
 80022fa:	183b      	adds	r3, r7, r0
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	2120      	movs	r1, #32
 8002300:	5c52      	ldrb	r2, [r2, r1]
 8002302:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002304:	0002      	movs	r2, r0
 8002306:	18bb      	adds	r3, r7, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <HAL_CAN_ActivateNotification+0x28>
 800230e:	18bb      	adds	r3, r7, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d109      	bne.n	800232a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6959      	ldr	r1, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e007      	b.n	800233a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	02d2      	lsls	r2, r2, #11
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
  }
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b08a      	sub	sp, #40	; 0x28
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d100      	bne.n	8002388 <HAL_CAN_IRQHandler+0x46>
 8002386:	e084      	b.n	8002492 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d024      	beq.n	80023da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2201      	movs	r2, #1
 8002396:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 f981 	bl	80026aa <HAL_CAN_TxMailbox0CompleteCallback>
 80023a8:	e017      	b.n	80023da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2204      	movs	r2, #4
 80023ae:	4013      	ands	r3, r2
 80023b0:	d005      	beq.n	80023be <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	4313      	orrs	r3, r2
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e00d      	b.n	80023da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2208      	movs	r2, #8
 80023c2:	4013      	ands	r3, r2
 80023c4:	d005      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	0152      	lsls	r2, r2, #5
 80023cc:	4313      	orrs	r3, r2
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	e003      	b.n	80023da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f980 	bl	80026da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d028      	beq.n	8002436 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	0052      	lsls	r2, r2, #1
 80023ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f95d 	bl	80026ba <HAL_CAN_TxMailbox1CompleteCallback>
 8002400:	e019      	b.n	8002436 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4013      	ands	r3, r2
 800240a:	d005      	beq.n	8002418 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0192      	lsls	r2, r2, #6
 8002412:	4313      	orrs	r3, r2
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	e00e      	b.n	8002436 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d005      	beq.n	800242e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	01d2      	lsls	r2, r2, #7
 8002428:	4313      	orrs	r3, r2
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	e003      	b.n	8002436 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f95a 	bl	80026ea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	4013      	ands	r3, r2
 800243e:	d028      	beq.n	8002492 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2280      	movs	r2, #128	; 0x80
 8002446:	0252      	lsls	r2, r2, #9
 8002448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	4013      	ands	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f937 	bl	80026ca <HAL_CAN_TxMailbox2CompleteCallback>
 800245c:	e019      	b.n	8002492 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	02db      	lsls	r3, r3, #11
 8002464:	4013      	ands	r3, r2
 8002466:	d005      	beq.n	8002474 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	0212      	lsls	r2, r2, #8
 800246e:	4313      	orrs	r3, r2
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e00e      	b.n	8002492 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	031b      	lsls	r3, r3, #12
 800247a:	4013      	ands	r3, r2
 800247c:	d005      	beq.n	800248a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	0252      	lsls	r2, r2, #9
 8002484:	4313      	orrs	r3, r2
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	e003      	b.n	8002492 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 f934 	bl	80026fa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2208      	movs	r2, #8
 8002496:	4013      	ands	r3, r2
 8002498:	d00c      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2210      	movs	r2, #16
 800249e:	4013      	ands	r3, r2
 80024a0:	d008      	beq.n	80024b4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4313      	orrs	r3, r2
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2210      	movs	r2, #16
 80024b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2208      	movs	r2, #8
 80024c0:	4013      	ands	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f91b 	bl	800270a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2203      	movs	r2, #3
 80024e4:	4013      	ands	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff f83a 	bl	8001564 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00c      	beq.n	8002512 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2210      	movs	r2, #16
 80024fc:	4013      	ands	r3, r2
 80024fe:	d008      	beq.n	8002512 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	00d2      	lsls	r2, r2, #3
 8002506:	4313      	orrs	r3, r2
 8002508:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2210      	movs	r2, #16
 8002510:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2220      	movs	r2, #32
 8002516:	4013      	ands	r3, r2
 8002518:	d00b      	beq.n	8002532 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2208      	movs	r2, #8
 800251e:	4013      	ands	r3, r2
 8002520:	d007      	beq.n	8002532 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2208      	movs	r2, #8
 8002528:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 f8fc 	bl	800272a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2210      	movs	r2, #16
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2203      	movs	r2, #3
 8002542:	4013      	ands	r3, r2
 8002544:	d003      	beq.n	800254e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 f8e6 	bl	800271a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d00b      	beq.n	8002570 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2210      	movs	r2, #16
 800255c:	4013      	ands	r3, r2
 800255e:	d007      	beq.n	8002570 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f8e5 	bl	800273a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	4013      	ands	r3, r2
 8002578:	d00b      	beq.n	8002592 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2208      	movs	r2, #8
 8002588:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f8dc 	bl	800274a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	4013      	ands	r3, r2
 800259a:	d100      	bne.n	800259e <HAL_CAN_IRQHandler+0x25c>
 800259c:	e074      	b.n	8002688 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2204      	movs	r2, #4
 80025a2:	4013      	ands	r3, r2
 80025a4:	d100      	bne.n	80025a8 <HAL_CAN_IRQHandler+0x266>
 80025a6:	e06b      	b.n	8002680 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025b8:	d003      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	2201      	movs	r2, #1
 80025be:	4313      	orrs	r3, r2
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025c2:	6a3a      	ldr	r2, [r7, #32]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025d2:	d003      	beq.n	80025dc <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2202      	movs	r2, #2
 80025d8:	4313      	orrs	r3, r2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4013      	ands	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2204      	movs	r2, #4
 80025ea:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025ec:	d003      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	2204      	movs	r2, #4
 80025f2:	4313      	orrs	r3, r2
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d03f      	beq.n	8002680 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2270      	movs	r2, #112	; 0x70
 8002604:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002606:	d03b      	beq.n	8002680 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2270      	movs	r2, #112	; 0x70
 800260c:	4013      	ands	r3, r2
 800260e:	2b60      	cmp	r3, #96	; 0x60
 8002610:	d027      	beq.n	8002662 <HAL_CAN_IRQHandler+0x320>
 8002612:	d82c      	bhi.n	800266e <HAL_CAN_IRQHandler+0x32c>
 8002614:	2b50      	cmp	r3, #80	; 0x50
 8002616:	d01f      	beq.n	8002658 <HAL_CAN_IRQHandler+0x316>
 8002618:	d829      	bhi.n	800266e <HAL_CAN_IRQHandler+0x32c>
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d017      	beq.n	800264e <HAL_CAN_IRQHandler+0x30c>
 800261e:	d826      	bhi.n	800266e <HAL_CAN_IRQHandler+0x32c>
 8002620:	2b30      	cmp	r3, #48	; 0x30
 8002622:	d00f      	beq.n	8002644 <HAL_CAN_IRQHandler+0x302>
 8002624:	d823      	bhi.n	800266e <HAL_CAN_IRQHandler+0x32c>
 8002626:	2b10      	cmp	r3, #16
 8002628:	d002      	beq.n	8002630 <HAL_CAN_IRQHandler+0x2ee>
 800262a:	2b20      	cmp	r3, #32
 800262c:	d005      	beq.n	800263a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800262e:	e01e      	b.n	800266e <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2208      	movs	r2, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002638:	e01a      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	2210      	movs	r2, #16
 800263e:	4313      	orrs	r3, r2
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002642:	e015      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	2220      	movs	r2, #32
 8002648:	4313      	orrs	r3, r2
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800264c:	e010      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	4313      	orrs	r3, r2
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002656:	e00b      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	4313      	orrs	r3, r2
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002660:	e006      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0052      	lsls	r2, r2, #1
 8002668:	4313      	orrs	r3, r2
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800266c:	e000      	b.n	8002670 <HAL_CAN_IRQHandler+0x32e>
            break;
 800266e:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2170      	movs	r1, #112	; 0x70
 800267c:	438a      	bics	r2, r1
 800267e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2204      	movs	r2, #4
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f85c 	bl	800275a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b00a      	add	sp, #40	; 0x28
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b002      	add	sp, #8
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b002      	add	sp, #8
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	0002      	movs	r2, r0
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b7f      	cmp	r3, #127	; 0x7f
 800277e:	d809      	bhi.n	8002794 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	231f      	movs	r3, #31
 8002788:	401a      	ands	r2, r3
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_EnableIRQ+0x30>)
 800278c:	2101      	movs	r1, #1
 800278e:	4091      	lsls	r1, r2
 8002790:	000a      	movs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
  }
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b7f      	cmp	r3, #127	; 0x7f
 80027b4:	d828      	bhi.n	8002808 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b6:	4a2f      	ldr	r2, [pc, #188]	; (8002874 <__NVIC_SetPriority+0xd4>)
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	33c0      	adds	r3, #192	; 0xc0
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	589b      	ldr	r3, [r3, r2]
 80027c6:	1dfa      	adds	r2, r7, #7
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	0011      	movs	r1, r2
 80027cc:	2203      	movs	r2, #3
 80027ce:	400a      	ands	r2, r1
 80027d0:	00d2      	lsls	r2, r2, #3
 80027d2:	21ff      	movs	r1, #255	; 0xff
 80027d4:	4091      	lsls	r1, r2
 80027d6:	000a      	movs	r2, r1
 80027d8:	43d2      	mvns	r2, r2
 80027da:	401a      	ands	r2, r3
 80027dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	22ff      	movs	r2, #255	; 0xff
 80027e4:	401a      	ands	r2, r3
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	0018      	movs	r0, r3
 80027ec:	2303      	movs	r3, #3
 80027ee:	4003      	ands	r3, r0
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f4:	481f      	ldr	r0, [pc, #124]	; (8002874 <__NVIC_SetPriority+0xd4>)
 80027f6:	1dfb      	adds	r3, r7, #7
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	430a      	orrs	r2, r1
 8002800:	33c0      	adds	r3, #192	; 0xc0
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002806:	e031      	b.n	800286c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <__NVIC_SetPriority+0xd8>)
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	230f      	movs	r3, #15
 8002812:	400b      	ands	r3, r1
 8002814:	3b08      	subs	r3, #8
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3306      	adds	r3, #6
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	18d3      	adds	r3, r2, r3
 800281e:	3304      	adds	r3, #4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1dfa      	adds	r2, r7, #7
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	0011      	movs	r1, r2
 8002828:	2203      	movs	r2, #3
 800282a:	400a      	ands	r2, r1
 800282c:	00d2      	lsls	r2, r2, #3
 800282e:	21ff      	movs	r1, #255	; 0xff
 8002830:	4091      	lsls	r1, r2
 8002832:	000a      	movs	r2, r1
 8002834:	43d2      	mvns	r2, r2
 8002836:	401a      	ands	r2, r3
 8002838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	401a      	ands	r2, r3
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	0018      	movs	r0, r3
 8002848:	2303      	movs	r3, #3
 800284a:	4003      	ands	r3, r0
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002850:	4809      	ldr	r0, [pc, #36]	; (8002878 <__NVIC_SetPriority+0xd8>)
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	001c      	movs	r4, r3
 8002858:	230f      	movs	r3, #15
 800285a:	4023      	ands	r3, r4
 800285c:	3b08      	subs	r3, #8
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	430a      	orrs	r2, r1
 8002862:	3306      	adds	r3, #6
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	18c3      	adds	r3, r0, r3
 8002868:	3304      	adds	r3, #4
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b003      	add	sp, #12
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	045b      	lsls	r3, r3, #17
 800288c:	429a      	cmp	r2, r3
 800288e:	d301      	bcc.n	8002894 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002890:	2301      	movs	r3, #1
 8002892:	e010      	b.n	80028b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <SysTick_Config+0x44>)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	3a01      	subs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289c:	2301      	movs	r3, #1
 800289e:	425b      	negs	r3, r3
 80028a0:	2103      	movs	r1, #3
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff ff7c 	bl	80027a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x44>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x44>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b002      	add	sp, #8
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	210f      	movs	r1, #15
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff ff5d 	bl	80027a0 <__NVIC_SetPriority>
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	0002      	movs	r2, r0
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	0018      	movs	r0, r3
 8002902:	f7ff ff33 	bl	800276c <__NVIC_EnableIRQ>
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff ffaf 	bl	800287c <SysTick_Config>
 800291e:	0003      	movs	r3, r0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002936:	e149      	b.n	8002bcc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4091      	lsls	r1, r2
 8002942:	000a      	movs	r2, r1
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d100      	bne.n	8002950 <HAL_GPIO_Init+0x28>
 800294e:	e13a      	b.n	8002bc6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	4013      	ands	r3, r2
 8002958:	2b01      	cmp	r3, #1
 800295a:	d005      	beq.n	8002968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2203      	movs	r2, #3
 8002962:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002964:	2b02      	cmp	r3, #2
 8002966:	d130      	bne.n	80029ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	409a      	lsls	r2, r3
 8002976:	0013      	movs	r3, r2
 8002978:	43da      	mvns	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	0013      	movs	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299e:	2201      	movs	r2, #1
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	43da      	mvns	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	2201      	movs	r2, #1
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
 80029bc:	0013      	movs	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d017      	beq.n	8002a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	409a      	lsls	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	43da      	mvns	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	0013      	movs	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d123      	bne.n	8002a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	58d3      	ldr	r3, [r2, r3]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2207      	movs	r2, #7
 8002a24:	4013      	ands	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2107      	movs	r1, #7
 8002a3e:	400b      	ands	r3, r1
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	08da      	lsrs	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3208      	adds	r2, #8
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	6939      	ldr	r1, [r7, #16]
 8002a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	409a      	lsls	r2, r3
 8002a68:	0013      	movs	r3, r2
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2203      	movs	r2, #3
 8002a78:	401a      	ands	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	0013      	movs	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	23c0      	movs	r3, #192	; 0xc0
 8002a94:	029b      	lsls	r3, r3, #10
 8002a96:	4013      	ands	r3, r2
 8002a98:	d100      	bne.n	8002a9c <HAL_GPIO_Init+0x174>
 8002a9a:	e094      	b.n	8002bc6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_GPIO_Init+0x2bc>)
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_GPIO_Init+0x2bc>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <HAL_GPIO_Init+0x2bc>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ab4:	4a4c      	ldr	r2, [pc, #304]	; (8002be8 <HAL_GPIO_Init+0x2c0>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	589b      	ldr	r3, [r3, r2]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	2390      	movs	r3, #144	; 0x90
 8002adc:	05db      	lsls	r3, r3, #23
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x1d6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a41      	ldr	r2, [pc, #260]	; (8002bec <HAL_GPIO_Init+0x2c4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x1d2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <HAL_GPIO_Init+0x2c8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x1ce>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x1d8>
 8002af6:	2305      	movs	r3, #5
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x1d8>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x1d8>
 8002afe:	2300      	movs	r3, #0
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	2103      	movs	r1, #3
 8002b04:	400a      	ands	r2, r1
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x2c0>)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	035b      	lsls	r3, r3, #13
 8002b36:	4013      	ands	r3, r2
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	039b      	lsls	r3, r3, #14
 8002b60:	4013      	ands	r3, r2
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	025b      	lsls	r3, r3, #9
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_GPIO_Init+0x2cc>)
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	40da      	lsrs	r2, r3
 8002bd4:	1e13      	subs	r3, r2, #0
 8002bd6:	d000      	beq.n	8002bda <HAL_GPIO_Init+0x2b2>
 8002bd8:	e6ae      	b.n	8002938 <HAL_GPIO_Init+0x10>
  } 
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010000 	.word	0x40010000
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	48000800 	.word	0x48000800
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	0008      	movs	r0, r1
 8002c02:	0011      	movs	r1, r2
 8002c04:	1cbb      	adds	r3, r7, #2
 8002c06:	1c02      	adds	r2, r0, #0
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	1c7b      	adds	r3, r7, #1
 8002c0c:	1c0a      	adds	r2, r1, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c10:	1c7b      	adds	r3, r7, #1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c18:	1cbb      	adds	r3, r7, #2
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c22:	1cbb      	adds	r3, r7, #2
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f000 fb76 	bl	8003334 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d100      	bne.n	8002c54 <HAL_RCC_OscConfig+0x20>
 8002c52:	e08e      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c54:	4bc5      	ldr	r3, [pc, #788]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d00e      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c60:	4bc2      	ldr	r3, [pc, #776]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	220c      	movs	r2, #12
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d117      	bne.n	8002c9c <HAL_RCC_OscConfig+0x68>
 8002c6c:	4bbf      	ldr	r3, [pc, #764]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	23c0      	movs	r3, #192	; 0xc0
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	401a      	ands	r2, r3
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d10e      	bne.n	8002c9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7e:	4bbb      	ldr	r3, [pc, #748]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	4013      	ands	r3, r2
 8002c88:	d100      	bne.n	8002c8c <HAL_RCC_OscConfig+0x58>
 8002c8a:	e071      	b.n	8002d70 <HAL_RCC_OscConfig+0x13c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d000      	beq.n	8002c96 <HAL_RCC_OscConfig+0x62>
 8002c94:	e06c      	b.n	8002d70 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f000 fb4c 	bl	8003334 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x80>
 8002ca4:	4bb1      	ldr	r3, [pc, #708]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4bb0      	ldr	r3, [pc, #704]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	0249      	lsls	r1, r1, #9
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e02f      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xa2>
 8002cbc:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4baa      	ldr	r3, [pc, #680]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cc2:	49ab      	ldr	r1, [pc, #684]	; (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	4ba8      	ldr	r3, [pc, #672]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4ba7      	ldr	r3, [pc, #668]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cce:	49a9      	ldr	r1, [pc, #676]	; (8002f74 <HAL_RCC_OscConfig+0x340>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e01e      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d10e      	bne.n	8002cfc <HAL_RCC_OscConfig+0xc8>
 8002cde:	4ba3      	ldr	r3, [pc, #652]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	02c9      	lsls	r1, r1, #11
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	4b9f      	ldr	r3, [pc, #636]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b9e      	ldr	r3, [pc, #632]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0249      	lsls	r1, r1, #9
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xe0>
 8002cfc:	4b9b      	ldr	r3, [pc, #620]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d02:	499b      	ldr	r1, [pc, #620]	; (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b98      	ldr	r3, [pc, #608]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b97      	ldr	r3, [pc, #604]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d0e:	4999      	ldr	r1, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x340>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe ff58 	bl	8001bd0 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d26:	f7fe ff53 	bl	8001bd0 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	; 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2fd      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d38:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	4013      	ands	r3, r2
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0xf2>
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe ff43 	bl	8001bd0 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe ff3e 	bl	8001bd0 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e2e8      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x11c>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <HAL_RCC_OscConfig+0x14a>
 8002d7c:	e06c      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d7e:	4b7b      	ldr	r3, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	220c      	movs	r2, #12
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d88:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	220c      	movs	r2, #12
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d11f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1a0>
 8002d94:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	23c0      	movs	r3, #192	; 0xc0
 8002d9a:	025b      	lsls	r3, r3, #9
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x188>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e2bb      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	22f8      	movs	r2, #248	; 0xf8
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00da      	lsls	r2, r3, #3
 8002dcc:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e041      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d024      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b62      	ldr	r3, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fef2 	bl	8001bd0 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fe feed 	bl	8001bd0 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e297      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	22f8      	movs	r2, #248	; 0xf8
 8002e14:	4393      	bics	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00da      	lsls	r2, r3, #3
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e018      	b.n	8002e58 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	438a      	bics	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fecd 	bl	8001bd0 <HAL_GetTick>
 8002e36:	0003      	movs	r3, r0
 8002e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fec8 	bl	8001bd0 <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e272      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	d1f1      	bne.n	8002e3c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fe feab 	bl	8001bd0 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fea6 	bl	8001bd0 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e250      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d0f1      	beq.n	8002e80 <HAL_RCC_OscConfig+0x24c>
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fe91 	bl	8001bd0 <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fe8c 	bl	8001bd0 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e236      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d1f1      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d100      	bne.n	8002edc <HAL_RCC_OscConfig+0x2a8>
 8002eda:	e0b5      	b.n	8003048 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002edc:	201f      	movs	r0, #31
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	055b      	lsls	r3, r3, #21
 8002eec:	4013      	ands	r3, r2
 8002eee:	d110      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0549      	lsls	r1, r1, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	055b      	lsls	r3, r3, #21
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d11a      	bne.n	8002f54 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	0049      	lsls	r1, r1, #1
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fe50 	bl	8001bd0 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fe4b 	bl	8001bd0 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1f5      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10f      	bne.n	8002f7c <HAL_RCC_OscConfig+0x348>
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002f62:	2101      	movs	r1, #1
 8002f64:	430a      	orrs	r2, r1
 8002f66:	621a      	str	r2, [r3, #32]
 8002f68:	e036      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	fffeffff 	.word	0xfffeffff
 8002f74:	fffbffff 	.word	0xfffbffff
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x36a>
 8002f84:	4bca      	ldr	r3, [pc, #808]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	4bc9      	ldr	r3, [pc, #804]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	621a      	str	r2, [r3, #32]
 8002f90:	4bc7      	ldr	r3, [pc, #796]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	4bc6      	ldr	r3, [pc, #792]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002f96:	2104      	movs	r1, #4
 8002f98:	438a      	bics	r2, r1
 8002f9a:	621a      	str	r2, [r3, #32]
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x38c>
 8002fa6:	4bc2      	ldr	r3, [pc, #776]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	4bc1      	ldr	r3, [pc, #772]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fac:	2104      	movs	r1, #4
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	621a      	str	r2, [r3, #32]
 8002fb2:	4bbf      	ldr	r3, [pc, #764]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	4bbe      	ldr	r3, [pc, #760]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	621a      	str	r2, [r3, #32]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3a4>
 8002fc0:	4bbb      	ldr	r3, [pc, #748]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	4bba      	ldr	r3, [pc, #744]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	621a      	str	r2, [r3, #32]
 8002fcc:	4bb8      	ldr	r3, [pc, #736]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	4bb7      	ldr	r3, [pc, #732]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d014      	beq.n	800300a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fdf6 	bl	8001bd0 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fdf1 	bl	8001bd0 <HAL_GetTick>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	4aaf      	ldr	r2, [pc, #700]	; (80032b4 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e19a      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	4bac      	ldr	r3, [pc, #688]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x3b6>
 8003008:	e013      	b.n	8003032 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fe fde1 	bl	8001bd0 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	e009      	b.n	8003028 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fe fddc 	bl	8001bd0 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	4aa5      	ldr	r2, [pc, #660]	; (80032b4 <HAL_RCC_OscConfig+0x680>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e185      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	4ba1      	ldr	r3, [pc, #644]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2202      	movs	r2, #2
 800302e:	4013      	ands	r3, r2
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003032:	231f      	movs	r3, #31
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b9c      	ldr	r3, [pc, #624]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	4b9b      	ldr	r3, [pc, #620]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003042:	499d      	ldr	r1, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x684>)
 8003044:	400a      	ands	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2210      	movs	r2, #16
 800304e:	4013      	ands	r3, r2
 8003050:	d063      	beq.n	800311a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d12a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800305a:	4b95      	ldr	r3, [pc, #596]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800305c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305e:	4b94      	ldr	r3, [pc, #592]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003060:	2104      	movs	r1, #4
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003066:	4b92      	ldr	r3, [pc, #584]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306a:	4b91      	ldr	r3, [pc, #580]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe fdad 	bl	8001bd0 <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800307c:	f7fe fda8 	bl	8001bd0 <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e152      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800308e:	4b88      	ldr	r3, [pc, #544]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d0f1      	beq.n	800307c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003098:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	22f8      	movs	r2, #248	; 0xf8
 800309e:	4393      	bics	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	00da      	lsls	r2, r3, #3
 80030a8:	4b81      	ldr	r3, [pc, #516]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34
 80030ae:	e034      	b.n	800311a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	3305      	adds	r3, #5
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030b8:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030bc:	4b7c      	ldr	r3, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030be:	2104      	movs	r1, #4
 80030c0:	438a      	bics	r2, r1
 80030c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030c4:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	22f8      	movs	r2, #248	; 0xf8
 80030ca:	4393      	bics	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	00da      	lsls	r2, r3, #3
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
 80030da:	e01e      	b.n	800311a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030dc:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e0:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030e2:	2104      	movs	r1, #4
 80030e4:	430a      	orrs	r2, r1
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80030e8:	4b71      	ldr	r3, [pc, #452]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	438a      	bics	r2, r1
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7fe fd6c 	bl	8001bd0 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030fe:	f7fe fd67 	bl	8001bd0 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e111      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003110:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d1f1      	bne.n	80030fe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d05c      	beq.n	80031de <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003124:	4b62      	ldr	r3, [pc, #392]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	220c      	movs	r2, #12
 800312a:	4013      	ands	r3, r2
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d00e      	beq.n	800314e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003130:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	220c      	movs	r2, #12
 8003136:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003138:	2b08      	cmp	r3, #8
 800313a:	d114      	bne.n	8003166 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800313c:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	23c0      	movs	r3, #192	; 0xc0
 8003142:	025b      	lsls	r3, r3, #9
 8003144:	401a      	ands	r2, r3
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	025b      	lsls	r3, r3, #9
 800314a:	429a      	cmp	r2, r3
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800314e:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	029b      	lsls	r3, r3, #10
 8003156:	4013      	ands	r3, r2
 8003158:	d040      	beq.n	80031dc <HAL_RCC_OscConfig+0x5a8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d03c      	beq.n	80031dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e6      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800316e:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	0249      	lsls	r1, r1, #9
 8003178:	430a      	orrs	r2, r1
 800317a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fd28 	bl	8001bd0 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003186:	f7fe fd23 	bl	8001bd0 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0cd      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003198:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	4013      	ands	r3, r2
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x552>
 80031a4:	e01b      	b.n	80031de <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80031a6:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031ac:	4943      	ldr	r1, [pc, #268]	; (80032bc <HAL_RCC_OscConfig+0x688>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fd0d 	bl	8001bd0 <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7fe fd08 	bl	8001bd0 <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b2      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	4013      	ands	r3, r2
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x588>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80031dc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d100      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5b4>
 80031e6:	e0a4      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	220c      	movs	r2, #12
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d100      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5c2>
 80031f4:	e078      	b.n	80032e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d14c      	bne.n	8003298 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003204:	492e      	ldr	r1, [pc, #184]	; (80032c0 <HAL_RCC_OscConfig+0x68c>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fce1 	bl	8001bd0 <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fcdc 	bl	8001bd0 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e086      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	220f      	movs	r2, #15
 8003238:	4393      	bics	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_RCC_OscConfig+0x690>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	431a      	orrs	r2, r3
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0449      	lsls	r1, r1, #17
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe fcaf 	bl	8001bd0 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fcaa 	bl	8001bd0 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e054      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x644>
 8003296:	e04c      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_RCC_OscConfig+0x67c>)
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <HAL_RCC_OscConfig+0x68c>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fc94 	bl	8001bd0 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x6a6>
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000
 80032b4:	00001388 	.word	0x00001388
 80032b8:	efffffff 	.word	0xefffffff
 80032bc:	fffeffff 	.word	0xfffeffff
 80032c0:	feffffff 	.word	0xfeffffff
 80032c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fc82 	bl	8001bd0 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e02c      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_OscConfig+0x708>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	049b      	lsls	r3, r3, #18
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x694>
 80032e6:	e024      	b.n	8003332 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e01f      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_OscConfig+0x708>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x708>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	23c0      	movs	r3, #192	; 0xc0
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d10e      	bne.n	800332e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	220f      	movs	r2, #15
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d107      	bne.n	800332e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	23f0      	movs	r3, #240	; 0xf0
 8003322:	039b      	lsls	r3, r3, #14
 8003324:	401a      	ands	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b008      	add	sp, #32
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0bf      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d911      	bls.n	8003386 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	4393      	bics	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	4b5b      	ldr	r3, [pc, #364]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0a6      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d015      	beq.n	80033bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d006      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033a0:	21e0      	movs	r1, #224	; 0xe0
 80033a2:	00c9      	lsls	r1, r1, #3
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	22f0      	movs	r2, #240	; 0xf0
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	4013      	ands	r3, r2
 80033d8:	d120      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07a      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	049b      	lsls	r3, r3, #18
 80033ee:	4013      	ands	r3, r2
 80033f0:	d114      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06e      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	4013      	ands	r3, r2
 8003408:	d108      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e062      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e05b      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	4393      	bics	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003430:	f7fe fbce 	bl	8001bd0 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003438:	e009      	b.n	800344e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343a:	f7fe fbc9 	bl	8001bd0 <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_RCC_ClockConfig+0x1a4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e042      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	220c      	movs	r2, #12
 8003454:	401a      	ands	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1ec      	bne.n	800343a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d211      	bcs.n	8003492 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2201      	movs	r2, #1
 8003474:	4393      	bics	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	4b18      	ldr	r3, [pc, #96]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_RCC_ClockConfig+0x19c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	4013      	ands	r3, r2
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e020      	b.n	80034d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2204      	movs	r2, #4
 8003498:	4013      	ands	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_RCC_ClockConfig+0x1a8>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034b0:	f000 f820 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b4:	0001      	movs	r1, r0
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x1a0>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	220f      	movs	r2, #15
 80034be:	4013      	ands	r3, r2
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1ac>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	000a      	movs	r2, r1
 80034c6:	40da      	lsrs	r2, r3
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1b0>)
 80034ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034cc:	2003      	movs	r0, #3
 80034ce:	f7fe fb39 	bl	8001b44 <HAL_InitTick>
  
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40022000 	.word	0x40022000
 80034e0:	40021000 	.word	0x40021000
 80034e4:	00001388 	.word	0x00001388
 80034e8:	fffff8ff 	.word	0xfffff8ff
 80034ec:	08003fb0 	.word	0x08003fb0
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	220c      	movs	r2, #12
 8003518:	4013      	ands	r3, r2
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d046      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>
 800351e:	d848      	bhi.n	80035b2 <HAL_RCC_GetSysClockFreq+0xbe>
 8003520:	2b04      	cmp	r3, #4
 8003522:	d002      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x36>
 8003524:	2b08      	cmp	r3, #8
 8003526:	d003      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x3c>
 8003528:	e043      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800352c:	613b      	str	r3, [r7, #16]
      break;
 800352e:	e043      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	220f      	movs	r2, #15
 8003536:	4013      	ands	r3, r2
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <HAL_RCC_GetSysClockFreq+0xd8>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	220f      	movs	r2, #15
 8003544:	4013      	ands	r3, r2
 8003546:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	025b      	lsls	r3, r3, #9
 8003552:	401a      	ands	r2, r3
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	025b      	lsls	r3, r3, #9
 8003558:	429a      	cmp	r2, r3
 800355a:	d109      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	481a      	ldr	r0, [pc, #104]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003560:	f7fc fdd2 	bl	8000108 <__udivsi3>
 8003564:	0003      	movs	r3, r0
 8003566:	001a      	movs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4353      	muls	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e01a      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	23c0      	movs	r3, #192	; 0xc0
 8003574:	025b      	lsls	r3, r3, #9
 8003576:	401a      	ands	r2, r3
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	025b      	lsls	r3, r3, #9
 800357c:	429a      	cmp	r2, r3
 800357e:	d109      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	4814      	ldr	r0, [pc, #80]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003584:	f7fc fdc0 	bl	8000108 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	001a      	movs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4353      	muls	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e008      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	480c      	ldr	r0, [pc, #48]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003598:	f7fc fdb6 	bl	8000108 <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4353      	muls	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	613b      	str	r3, [r7, #16]
      break;
 80035aa:	e005      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80035ae:	613b      	str	r3, [r7, #16]
      break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035b8:	693b      	ldr	r3, [r7, #16]
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b006      	add	sp, #24
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	40021000 	.word	0x40021000
 80035c8:	007a1200 	.word	0x007a1200
 80035cc:	08003fc0 	.word	0x08003fc0
 80035d0:	08003fd0 	.word	0x08003fd0
 80035d4:	02dc6c00 	.word	0x02dc6c00

080035d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223d      	movs	r2, #61	; 0x3d
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223c      	movs	r2, #60	; 0x3c
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fe f9eb 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223d      	movs	r2, #61	; 0x3d
 800360a:	2102      	movs	r1, #2
 800360c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f000 f99f 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2246      	movs	r2, #70	; 0x46
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223e      	movs	r2, #62	; 0x3e
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	223f      	movs	r2, #63	; 0x3f
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	; 0x40
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2241      	movs	r2, #65	; 0x41
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2242      	movs	r2, #66	; 0x42
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2243      	movs	r2, #67	; 0x43
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2244      	movs	r2, #68	; 0x44
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2245      	movs	r2, #69	; 0x45
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223d      	movs	r2, #61	; 0x3d
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <HAL_TIM_PWM_Start+0x22>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223e      	movs	r2, #62	; 0x3e
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	1e5a      	subs	r2, r3, #1
 8003694:	4193      	sbcs	r3, r2
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e01f      	b.n	80036da <HAL_TIM_PWM_Start+0x62>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d108      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x3a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	223f      	movs	r2, #63	; 0x3f
 80036a4:	5c9b      	ldrb	r3, [r3, r2]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	4193      	sbcs	r3, r2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	e013      	b.n	80036da <HAL_TIM_PWM_Start+0x62>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d108      	bne.n	80036ca <HAL_TIM_PWM_Start+0x52>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	1e5a      	subs	r2, r3, #1
 80036c4:	4193      	sbcs	r3, r2
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e007      	b.n	80036da <HAL_TIM_PWM_Start+0x62>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2241      	movs	r2, #65	; 0x41
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	4193      	sbcs	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06a      	b.n	80037b8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_PWM_Start+0x7a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	223e      	movs	r2, #62	; 0x3e
 80036ec:	2102      	movs	r1, #2
 80036ee:	5499      	strb	r1, [r3, r2]
 80036f0:	e013      	b.n	800371a <HAL_TIM_PWM_Start+0xa2>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_PWM_Start+0x8a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	223f      	movs	r2, #63	; 0x3f
 80036fc:	2102      	movs	r1, #2
 80036fe:	5499      	strb	r1, [r3, r2]
 8003700:	e00b      	b.n	800371a <HAL_TIM_PWM_Start+0xa2>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start+0x9a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	2102      	movs	r1, #2
 800370e:	5499      	strb	r1, [r3, r2]
 8003710:	e003      	b.n	800371a <HAL_TIM_PWM_Start+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2241      	movs	r2, #65	; 0x41
 8003716:	2102      	movs	r1, #2
 8003718:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fb70 	bl	8003e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <HAL_TIM_PWM_Start+0x148>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_TIM_PWM_Start+0xce>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <HAL_TIM_PWM_Start+0x14c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_PWM_Start+0xce>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_TIM_PWM_Start+0x150>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_TIM_PWM_Start+0xd2>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_TIM_PWM_Start+0xd4>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	0209      	lsls	r1, r1, #8
 800375e:	430a      	orrs	r2, r1
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_PWM_Start+0x148>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00a      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2380      	movs	r3, #128	; 0x80
 8003772:	05db      	lsls	r3, r3, #23
 8003774:	429a      	cmp	r2, r3
 8003776:	d004      	beq.n	8003782 <HAL_TIM_PWM_Start+0x10a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_TIM_PWM_Start+0x154>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2207      	movs	r2, #7
 800378a:	4013      	ands	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d010      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2101      	movs	r1, #1
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b004      	add	sp, #16
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40000400 	.word	0x40000400

080037d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2317      	movs	r3, #23
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	223c      	movs	r2, #60	; 0x3c
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0ad      	b.n	800394e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	223c      	movs	r2, #60	; 0x3c
 80037f6:	2101      	movs	r1, #1
 80037f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d100      	bne.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003800:	e076      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d900      	bls.n	800380a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003808:	e095      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x166>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d04e      	beq.n	80038ae <HAL_TIM_PWM_ConfigChannel+0xde>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d900      	bls.n	8003818 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003816:	e08e      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_PWM_ConfigChannel+0x56>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d021      	beq.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003824:	e087      	b.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f90a 	bl	8003a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2108      	movs	r1, #8
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2104      	movs	r1, #4
 8003850:	438a      	bics	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	619a      	str	r2, [r3, #24]
      break;
 8003866:	e06b      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	0011      	movs	r1, r2
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f967 	bl	8003b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	0109      	lsls	r1, r1, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4931      	ldr	r1, [pc, #196]	; (8003958 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003894:	400a      	ands	r2, r1
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      break;
 80038ac:	e048      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f9c2 	bl	8003c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2108      	movs	r1, #8
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2104      	movs	r1, #4
 80038d8:	438a      	bics	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69d9      	ldr	r1, [r3, #28]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	61da      	str	r2, [r3, #28]
      break;
 80038ee:	e027      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fa21 	bl	8003d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	0109      	lsls	r1, r1, #4
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	490f      	ldr	r1, [pc, #60]	; (8003958 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800391c:	400a      	ands	r2, r1
 800391e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69d9      	ldr	r1, [r3, #28]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	61da      	str	r2, [r3, #28]
      break;
 8003934:	e004      	b.n	8003940 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
      break;
 800393e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	223c      	movs	r2, #60	; 0x3c
 8003944:	2100      	movs	r1, #0
 8003946:	5499      	strb	r1, [r3, r2]

  return status;
 8003948:	2317      	movs	r3, #23
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	fffffbff 	.word	0xfffffbff

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <TIM_Base_SetConfig+0xd4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d008      	beq.n	8003986 <TIM_Base_SetConfig+0x2a>
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	05db      	lsls	r3, r3, #23
 800397a:	429a      	cmp	r2, r3
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0x2a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <TIM_Base_SetConfig+0xd8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2270      	movs	r2, #112	; 0x70
 800398a:	4393      	bics	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0xd4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d014      	beq.n	80039ca <TIM_Base_SetConfig+0x6e>
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0x6e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <TIM_Base_SetConfig+0xd8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0x6e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <TIM_Base_SetConfig+0xdc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0x6e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <TIM_Base_SetConfig+0xe0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x6e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <TIM_Base_SetConfig+0xe8>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	4393      	bics	r3, r2
 80039e2:	001a      	movs	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <TIM_Base_SetConfig+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xbe>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <TIM_Base_SetConfig+0xe0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xbe>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <TIM_Base_SetConfig+0xe4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d103      	bne.n	8003a22 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	615a      	str	r2, [r3, #20]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40002000 	.word	0x40002000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	fffffcff 	.word	0xfffffcff

08003a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	2201      	movs	r2, #1
 8003a58:	4393      	bics	r3, r2
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2270      	movs	r2, #112	; 0x70
 8003a76:	4393      	bics	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	4393      	bics	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	4393      	bics	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <TIM_OC1_SetConfig+0xe8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_OC1_SetConfig+0x6e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <TIM_OC1_SetConfig+0xec>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_OC1_SetConfig+0x6e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <TIM_OC1_SetConfig+0xf0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10c      	bne.n	8003ad0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4393      	bics	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4393      	bics	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <TIM_OC1_SetConfig+0xe8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC1_SetConfig+0xa0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <TIM_OC1_SetConfig+0xec>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0xa0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <TIM_OC1_SetConfig+0xf0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <TIM_OC1_SetConfig+0xf4>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <TIM_OC1_SetConfig+0xf8>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b006      	add	sp, #24
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	fffffeff 	.word	0xfffffeff
 8003b40:	fffffdff 	.word	0xfffffdff

08003b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	2210      	movs	r2, #16
 8003b54:	4393      	bics	r3, r2
 8003b56:	001a      	movs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <TIM_OC2_SetConfig+0xe0>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <TIM_OC2_SetConfig+0xe4>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	4393      	bics	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <TIM_OC2_SetConfig+0xe8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10d      	bne.n	8003bc2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2280      	movs	r2, #128	; 0x80
 8003baa:	4393      	bics	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2240      	movs	r2, #64	; 0x40
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <TIM_OC2_SetConfig+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_OC2_SetConfig+0x96>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <TIM_OC2_SetConfig+0xec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC2_SetConfig+0x96>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <TIM_OC2_SetConfig+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d113      	bne.n	8003c02 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <TIM_OC2_SetConfig+0xf4>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <TIM_OC2_SetConfig+0xf8>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b006      	add	sp, #24
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	ffff8fff 	.word	0xffff8fff
 8003c28:	fffffcff 	.word	0xfffffcff
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800
 8003c38:	fffffbff 	.word	0xfffffbff
 8003c3c:	fffff7ff 	.word	0xfffff7ff

08003c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <TIM_OC3_SetConfig+0xdc>)
 8003c50:	401a      	ands	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2270      	movs	r2, #112	; 0x70
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4393      	bics	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <TIM_OC3_SetConfig+0xe0>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <TIM_OC3_SetConfig+0xe4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10d      	bne.n	8003cba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <TIM_OC3_SetConfig+0xe8>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <TIM_OC3_SetConfig+0xec>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <TIM_OC3_SetConfig+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x92>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <TIM_OC3_SetConfig+0xf0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x92>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <TIM_OC3_SetConfig+0xf4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <TIM_OC3_SetConfig+0xf8>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <TIM_OC3_SetConfig+0xfc>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	fffffeff 	.word	0xfffffeff
 8003d20:	fffffdff 	.word	0xfffffdff
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	fffff7ff 	.word	0xfffff7ff
 8003d2c:	fffffbff 	.word	0xfffffbff
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800
 8003d38:	ffffefff 	.word	0xffffefff
 8003d3c:	ffffdfff 	.word	0xffffdfff

08003d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4a26      	ldr	r2, [pc, #152]	; (8003de8 <TIM_OC4_SetConfig+0xa8>)
 8003d50:	401a      	ands	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a20      	ldr	r2, [pc, #128]	; (8003dec <TIM_OC4_SetConfig+0xac>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <TIM_OC4_SetConfig+0xb0>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <TIM_OC4_SetConfig+0xb4>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <TIM_OC4_SetConfig+0xb8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC4_SetConfig+0x70>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <TIM_OC4_SetConfig+0xbc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC4_SetConfig+0x70>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <TIM_OC4_SetConfig+0xc0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <TIM_OC4_SetConfig+0xc4>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b006      	add	sp, #24
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	ffffefff 	.word	0xffffefff
 8003dec:	ffff8fff 	.word	0xffff8fff
 8003df0:	fffffcff 	.word	0xfffffcff
 8003df4:	ffffdfff 	.word	0xffffdfff
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800
 8003e04:	ffffbfff 	.word	0xffffbfff

08003e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	221f      	movs	r2, #31
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	0013      	movs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	43d2      	mvns	r2, r2
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	211f      	movs	r1, #31
 8003e38:	400b      	ands	r3, r1
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4099      	lsls	r1, r3
 8003e3e:	000b      	movs	r3, r1
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b006      	add	sp, #24
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223c      	movs	r2, #60	; 0x3c
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e042      	b.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	223c      	movs	r2, #60	; 0x3c
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	223d      	movs	r2, #61	; 0x3d
 8003e74:	2102      	movs	r1, #2
 8003e76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2270      	movs	r2, #112	; 0x70
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	05db      	lsls	r3, r3, #23
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d004      	beq.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10c      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223d      	movs	r2, #61	; 0x3d
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223c      	movs	r2, #60	; 0x3c
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	2600      	movs	r6, #0
 8003f04:	4d0c      	ldr	r5, [pc, #48]	; (8003f38 <__libc_init_array+0x38>)
 8003f06:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f08:	1b64      	subs	r4, r4, r5
 8003f0a:	10a4      	asrs	r4, r4, #2
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	2600      	movs	r6, #0
 8003f12:	f000 f821 	bl	8003f58 <_init>
 8003f16:	4d0a      	ldr	r5, [pc, #40]	; (8003f40 <__libc_init_array+0x40>)
 8003f18:	4c0a      	ldr	r4, [pc, #40]	; (8003f44 <__libc_init_array+0x44>)
 8003f1a:	1b64      	subs	r4, r4, r5
 8003f1c:	10a4      	asrs	r4, r4, #2
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	00b3      	lsls	r3, r6, #2
 8003f26:	58eb      	ldr	r3, [r5, r3]
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	00b3      	lsls	r3, r6, #2
 8003f30:	58eb      	ldr	r3, [r5, r3]
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08003fe0 	.word	0x08003fe0
 8003f3c:	08003fe0 	.word	0x08003fe0
 8003f40:	08003fe0 	.word	0x08003fe0
 8003f44:	08003fe4 	.word	0x08003fe4

08003f48 <memset>:
 8003f48:	0003      	movs	r3, r0
 8003f4a:	1882      	adds	r2, r0, r2
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	7019      	strb	r1, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
