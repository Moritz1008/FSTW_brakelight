
LastMinuteBrakelight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002ea0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f3b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3a  00000000  00000000  00029f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bbb  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0fd  00000000  00000000  00045a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1aa  00000000  00000000  00051b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  000e0d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e44 	.word	0x08002e44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e44 	.word	0x08002e44

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <MX_CAN_Init+0xbc>)
 8000226:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <MX_CAN_Init+0xc0>)
 8000228:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <MX_CAN_Init+0xbc>)
 800022c:	2203      	movs	r2, #3
 800022e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <MX_CAN_Init+0xbc>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000236:	4b29      	ldr	r3, [pc, #164]	; (80002dc <MX_CAN_Init+0xbc>)
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	0452      	lsls	r2, r2, #17
 800023c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <MX_CAN_Init+0xbc>)
 8000240:	2290      	movs	r2, #144	; 0x90
 8000242:	0312      	lsls	r2, r2, #12
 8000244:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000246:	4b25      	ldr	r3, [pc, #148]	; (80002dc <MX_CAN_Init+0xbc>)
 8000248:	2280      	movs	r2, #128	; 0x80
 800024a:	03d2      	lsls	r2, r2, #15
 800024c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <MX_CAN_Init+0xbc>)
 8000250:	2200      	movs	r2, #0
 8000252:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <MX_CAN_Init+0xbc>)
 8000256:	2201      	movs	r2, #1
 8000258:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <MX_CAN_Init+0xbc>)
 800025c:	2201      	movs	r2, #1
 800025e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_CAN_Init+0xbc>)
 8000262:	2200      	movs	r2, #0
 8000264:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_CAN_Init+0xbc>)
 8000268:	2200      	movs	r2, #0
 800026a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_CAN_Init+0xbc>)
 800026e:	2200      	movs	r2, #0
 8000270:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_CAN_Init+0xbc>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fc4f 	bl	8000b18 <HAL_CAN_Init>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d001      	beq.n	8000282 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800027e:	f000 fa6d 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterInitStructure.FilterBank = 0;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
  CAN_FilterInitStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_CAN_Init+0xc4>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
  CAN_FilterInitStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000290:	2201      	movs	r2, #1
 8000292:	61da      	str	r2, [r3, #28]
  CAN_FilterInitStructure.FilterIdHigh= 0x000;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
  CAN_FilterInitStructure.FilterIdLow=0x000;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_CAN_Init+0xc4>)
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  CAN_FilterInitStructure.FilterMaskIdHigh= 0x000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  CAN_FilterInitStructure.FilterMaskIdLow=0x0000;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  CAN_FilterInitStructure.FilterFIFOAssignment = 0;
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  CAN_FilterInitStructure.FilterActivation = ENABLE;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &CAN_FilterInitStructure);
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_CAN_Init+0xbc>)
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fd28 	bl	8000d14 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <MX_CAN_Init+0xbc>)
 80002c6:	2112      	movs	r1, #18
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ff86 	bl	80011da <HAL_CAN_ActivateNotification>
  msg_available = 0;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_CAN_Init+0xc8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN_Init 2 */

}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000078 	.word	0x20000078
 80002e0:	40006400 	.word	0x40006400
 80002e4:	20000028 	.word	0x20000028
 80002e8:	2000006c 	.word	0x2000006c

080002ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	2414      	movs	r4, #20
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	2314      	movs	r3, #20
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fd98 	bl	8002e34 <memset>
  if(canHandle->Instance==CAN)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a21      	ldr	r2, [pc, #132]	; (8000390 <HAL_CAN_MspInit+0xa4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d13b      	bne.n	8000386 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000310:	69da      	ldr	r2, [r3, #28]
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	0489      	lsls	r1, r1, #18
 8000318:	430a      	orrs	r2, r1
 800031a:	61da      	str	r2, [r3, #28]
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800031e:	69da      	ldr	r2, [r3, #28]
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	049b      	lsls	r3, r3, #18
 8000324:	4013      	ands	r3, r2
 8000326:	613b      	str	r3, [r7, #16]
 8000328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	0289      	lsls	r1, r1, #10
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	029b      	lsls	r3, r3, #10
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	22c0      	movs	r2, #192	; 0xc0
 800034a:	0152      	lsls	r2, r2, #5
 800034c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800034e:	0021      	movs	r1, r4
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2202      	movs	r2, #2
 8000354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2203      	movs	r2, #3
 8000360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2204      	movs	r2, #4
 8000366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000368:	187a      	adds	r2, r7, r1
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fa4f 	bl	8001814 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	201e      	movs	r0, #30
 800037c:	f001 fa18 	bl	80017b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000380:	201e      	movs	r0, #30
 8000382:	f001 fa2a 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40006400 	.word	0x40006400
 8000394:	40021000 	.word	0x40021000

08000398 <CAN_HandleRxMessages>:
}

/* USER CODE BEGIN 1 */

void CAN_HandleRxMessages(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  if (msg_available == 1)
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <CAN_HandleRxMessages+0x98>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d13f      	bne.n	8000426 <CAN_HandleRxMessages+0x8e>
  {
    msg_available = 0;
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <CAN_HandleRxMessages+0x98>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
    switch (RxMessage.StdId)
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <CAN_HandleRxMessages+0x9c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2290      	movs	r2, #144	; 0x90
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d012      	beq.n	80003de <CAN_HandleRxMessages+0x46>
 80003b8:	2290      	movs	r2, #144	; 0x90
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	4293      	cmp	r3, r2
 80003be:	d833      	bhi.n	8000428 <CAN_HandleRxMessages+0x90>
 80003c0:	2b25      	cmp	r3, #37	; 0x25
 80003c2:	d004      	beq.n	80003ce <CAN_HandleRxMessages+0x36>
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d024      	beq.n	8000416 <CAN_HandleRxMessages+0x7e>
      
      case 0x100:
        button = RxData[0] & 0x08;
    }
  }
}
 80003cc:	e02c      	b.n	8000428 <CAN_HandleRxMessages+0x90>
    	rx_timer = 0;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <CAN_HandleRxMessages+0xa0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	801a      	strh	r2, [r3, #0]
    	brake_pressure_front = RxData[0];
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <CAN_HandleRxMessages+0xa8>)
 80003da:	701a      	strb	r2, [r3, #0]
        break;
 80003dc:	e024      	b.n	8000428 <CAN_HandleRxMessages+0x90>
    	inverterTemp = RxData[0];
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003e0:	781a      	ldrb	r2, [r3, #0]
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <CAN_HandleRxMessages+0xac>)
 80003e4:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 80003e6:	2301      	movs	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e010      	b.n	800040e <CAN_HandleRxMessages+0x76>
    		if (inverterTemp < RxData[i*2]) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4a12      	ldr	r2, [pc, #72]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003f2:	5cd2      	ldrb	r2, [r2, r3]
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <CAN_HandleRxMessages+0xac>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d905      	bls.n	8000408 <CAN_HandleRxMessages+0x70>
    			inverterTemp = RxData[i*2];
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <CAN_HandleRxMessages+0xa4>)
 8000402:	5cd2      	ldrb	r2, [r2, r3]
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <CAN_HandleRxMessages+0xac>)
 8000406:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3301      	adds	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b02      	cmp	r3, #2
 8000412:	ddeb      	ble.n	80003ec <CAN_HandleRxMessages+0x54>
        break;
 8000414:	e008      	b.n	8000428 <CAN_HandleRxMessages+0x90>
        button = RxData[0] & 0x08;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <CAN_HandleRxMessages+0xa4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2208      	movs	r2, #8
 800041c:	4013      	ands	r3, r2
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <CAN_HandleRxMessages+0xb0>)
 8000422:	701a      	strb	r2, [r3, #0]
}
 8000424:	e000      	b.n	8000428 <CAN_HandleRxMessages+0x90>
  }
 8000426:	46c0      	nop			; (mov r8, r8)
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	2000006c 	.word	0x2000006c
 8000434:	20000050 	.word	0x20000050
 8000438:	200000a2 	.word	0x200000a2
 800043c:	20000070 	.word	0x20000070
 8000440:	200000a0 	.word	0x200000a0
 8000444:	200000a5 	.word	0x200000a5
 8000448:	200000a6 	.word	0x200000a6

0800044c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	msg_available = 1;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	2100      	movs	r1, #0
 8000462:	f000 fd8f 	bl	8000f84 <HAL_CAN_GetRxMessage>
	CAN_HandleRxMessages();
 8000466:	f7ff ff97 	bl	8000398 <CAN_HandleRxMessages>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	2000006c 	.word	0x2000006c
 8000478:	20000070 	.word	0x20000070
 800047c:	20000050 	.word	0x20000050

08000480 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b089      	sub	sp, #36	; 0x24
 8000484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	240c      	movs	r4, #12
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2314      	movs	r3, #20
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f002 fccf 	bl	8002e34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_GPIO_Init+0xc0>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_GPIO_Init+0xc0>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	0289      	lsls	r1, r1, #10
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	029b      	lsls	r3, r3, #10
 80004ac:	4013      	ands	r3, r2
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	02c9      	lsls	r1, r1, #11
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	02db      	lsls	r3, r3, #11
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	0219      	lsls	r1, r3, #8
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fb03 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <MX_GPIO_Init+0xc4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fafd 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	193a      	adds	r2, r7, r4
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f981 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2208      	movs	r2, #8
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	187b      	adds	r3, r7, r1
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <MX_GPIO_Init+0xc4>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 f96e 	bl	8001814 <HAL_GPIO_Init>

}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	; 0x24
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa5b 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f8c7 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f7ff ff93 	bl	8000480 <MX_GPIO_Init>
  MX_CAN_Init();
 800055a:	f7ff fe61 	bl	8000220 <MX_CAN_Init>
  MX_TIM3_Init();
 800055e:	f000 f951 	bl	8000804 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000562:	4b52      	ldr	r3, [pc, #328]	; (80006ac <main+0x164>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fcc7 	bl	8000ef8 <HAL_CAN_Start>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <main+0x2a>
  {
    Error_Handler();
 800056e:	f000 f8f5 	bl	800075c <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000572:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <main+0x168>)
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fff4 	bl	8002564 <HAL_TIM_PWM_Start>
  FAN_TIMER->FAN_CHANNEL = 19000-1;
 800057c:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <main+0x16c>)
 800057e:	4a4e      	ldr	r2, [pc, #312]	; (80006b8 <main+0x170>)
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
  fan_timer = HAL_GetTick();
 8000582:	f000 fa9b 	bl	8000abc <HAL_GetTick>
 8000586:	0002      	movs	r2, r0
 8000588:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <main+0x174>)
 800058a:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa9d 	bl	8000ad0 <HAL_Delay>
  for (int i=0; i<3; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e030      	b.n	80005fe <main+0xb6>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	0219      	lsls	r1, r3, #8
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2201      	movs	r2, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fa9c 	bl	8001ae4 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80005ac:	203c      	movs	r0, #60	; 0x3c
 80005ae:	f000 fa8f 	bl	8000ad0 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	0219      	lsls	r1, r3, #8
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2200      	movs	r2, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fa91 	bl	8001ae4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f000 fa84 	bl	8000ad0 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	0219      	lsls	r1, r3, #8
 80005cc:	2390      	movs	r3, #144	; 0x90
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2201      	movs	r2, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fa86 	bl	8001ae4 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80005d8:	203c      	movs	r0, #60	; 0x3c
 80005da:	f000 fa79 	bl	8000ad0 <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	0219      	lsls	r1, r3, #8
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fa7b 	bl	8001ae4 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 80005ee:	23c8      	movs	r3, #200	; 0xc8
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fa6c 	bl	8000ad0 <HAL_Delay>
  for (int i=0; i<3; i++){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b02      	cmp	r3, #2
 8000602:	ddcb      	ble.n	800059c <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fa63 	bl	8000ad0 <HAL_Delay>
    if (HAL_GetTick() - fan_timer > 6000) {
 800060a:	f000 fa57 	bl	8000abc <HAL_GetTick>
 800060e:	0002      	movs	r2, r0
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <main+0x174>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <main+0x178>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d902      	bls.n	8000622 <main+0xda>
      FAN_TIMER->FAN_CHANNEL = 18945;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <main+0x16c>)
 800061e:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <main+0x17c>)
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
    }

    // Handle Brakelight
	  if (brake_pressure_front > BP_THRESHOLD) {
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <main+0x180>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d902      	bls.n	8000630 <main+0xe8>
		  bl_state = 1;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <main+0x184>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
	  }
	  if (brake_pressure_front < BP_THRESHOLD / 2){
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <main+0x180>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <main+0xf6>
		  bl_state = 0;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <main+0x184>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(BRAKELIGHT_LED, bl_state);
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <main+0x184>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	0219      	lsls	r1, r3, #8
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fa4a 	bl	8001ae4 <HAL_GPIO_WritePin>

	  if (rx_timer > 1000) {
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <main+0x188>)
 8000652:	881a      	ldrh	r2, [r3, #0]
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	429a      	cmp	r2, r3
 800065a:	d902      	bls.n	8000662 <main+0x11a>
		  brake_pressure_front = 0;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0x180>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	  }
	  rx_timer++;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x188>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <main+0x188>)
 800066c:	801a      	strh	r2, [r3, #0]
	  // }
	  // if (inverterTemp < PUMP_THRESHOLD - 10){
		//   pump_state = 0;
	  // }

    if (button != button_old) {
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <main+0x18c>)
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <main+0x190>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d00f      	beq.n	800069a <main+0x152>
        if (button == 1) {
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <main+0x18c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d107      	bne.n	8000692 <main+0x14a>
            buttonstate = !buttonstate;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <main+0x194>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	425a      	negs	r2, r3
 8000688:	4153      	adcs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	001a      	movs	r2, r3
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <main+0x194>)
 8000690:	701a      	strb	r2, [r3, #0]
        }
        button_old = button;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <main+0x18c>)
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <main+0x190>)
 8000698:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(PUMP, buttonstate);
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <main+0x194>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0x198>)
 80006a0:	001a      	movs	r2, r3
 80006a2:	2108      	movs	r1, #8
 80006a4:	f001 fa1e 	bl	8001ae4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80006a8:	e7ac      	b.n	8000604 <main+0xbc>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000078 	.word	0x20000078
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	40000400 	.word	0x40000400
 80006b8:	00004a37 	.word	0x00004a37
 80006bc:	200000ac 	.word	0x200000ac
 80006c0:	00001770 	.word	0x00001770
 80006c4:	00004a01 	.word	0x00004a01
 80006c8:	200000a0 	.word	0x200000a0
 80006cc:	200000a4 	.word	0x200000a4
 80006d0:	200000a2 	.word	0x200000a2
 80006d4:	200000a6 	.word	0x200000a6
 80006d8:	200000a8 	.word	0x200000a8
 80006dc:	200000a7 	.word	0x200000a7
 80006e0:	48000400 	.word	0x48000400

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2414      	movs	r4, #20
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2334      	movs	r3, #52	; 0x34
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f002 fb9d 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f002 fb96 	bl	8002e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2220      	movs	r2, #32
 800070c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2201      	movs	r2, #1
 8000712:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	193b      	adds	r3, r7, r4
 800071c:	0018      	movs	r0, r3
 800071e:	f001 f9ff 	bl	8001b20 <HAL_RCC_OscConfig>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000726:	f000 f819 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2203      	movs	r2, #3
 8000734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2101      	movs	r1, #1
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fd70 	bl	800222c <HAL_RCC_ClockConfig>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000750:	f000 f804 	bl	800075c <Error_Handler>
  }
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b013      	add	sp, #76	; 0x4c
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	619a      	str	r2, [r3, #24]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0549      	lsls	r1, r1, #21
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_MspInit+0x44>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	055b      	lsls	r3, r3, #21
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f960 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <CEC_CAN_IRQHandler+0x14>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fd21 	bl	800122e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000078 	.word	0x20000078

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	2320      	movs	r3, #32
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	0018      	movs	r0, r3
 8000810:	2308      	movs	r3, #8
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f002 fb0d 	bl	8002e34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	231c      	movs	r3, #28
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f002 fb06 	bl	8002e34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_TIM3_Init+0xb8>)
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <MX_TIM3_Init+0xbc>)
 800082c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <MX_TIM3_Init+0xb8>)
 8000830:	222f      	movs	r2, #47	; 0x2f
 8000832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_TIM3_Init+0xb8>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_TIM3_Init+0xb8>)
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <MX_TIM3_Init+0xc0>)
 800083e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM3_Init+0xb8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_TIM3_Init+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_TIM3_Init+0xb8>)
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fe38 	bl	80024c4 <HAL_TIM_PWM_Init>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000858:	f7ff ff80 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2120      	movs	r1, #32
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086a:	187a      	adds	r2, r7, r1
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_TIM3_Init+0xb8>)
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f002 fa63 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800087a:	f7ff ff6f 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2260      	movs	r2, #96	; 0x60
 8000882:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_TIM3_Init+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f001 ff0d 	bl	80026bc <HAL_TIM_PWM_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80008a6:	f7ff ff59 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <MX_TIM3_Init+0xb8>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 f829 	bl	8000904 <HAL_TIM_MspPostInit>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b00a      	add	sp, #40	; 0x28
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	200000b0 	.word	0x200000b0
 80008c0:	40000400 	.word	0x40000400
 80008c4:	00004e1f 	.word	0x00004e1f

080008c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <HAL_TIM_PWM_MspInit+0x34>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10b      	bne.n	80008f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008e0:	2102      	movs	r1, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	61da      	str	r2, [r3, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_TIM_PWM_MspInit+0x38>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2202      	movs	r2, #2
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40000400 	.word	0x40000400
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	240c      	movs	r4, #12
 800090e:	193b      	adds	r3, r7, r4
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f002 fa8c 	bl	8002e34 <memset>
  if(timHandle->Instance==TIM3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_TIM_MspPostInit+0x74>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d123      	bne.n	800096e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	02c9      	lsls	r1, r1, #11
 8000930:	430a      	orrs	r2, r1
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_TIM_MspPostInit+0x78>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	02db      	lsls	r3, r3, #11
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2210      	movs	r2, #16
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	187b      	adds	r3, r7, r1
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_TIM_MspPostInit+0x7c>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f000 ff53 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b009      	add	sp, #36	; 0x24
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40000400 	.word	0x40000400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000988:	f7ff ff36 	bl	80007f8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800098e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000990:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <LoopForever+0xa>)
    CMP R1, R2
 8000994:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000996:	d105      	bne.n	80009a4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800099a:	4912      	ldr	r1, [pc, #72]	; (80009e4 <LoopForever+0x12>)
    STR R1, [R0]
 800099c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009a0:	4912      	ldr	r1, [pc, #72]	; (80009ec <LoopForever+0x1a>)
    STR R1, [R0]
 80009a2:	6001      	str	r1, [r0, #0]

080009a4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009a6:	4913      	ldr	r1, [pc, #76]	; (80009f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <LoopForever+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009bc:	4c10      	ldr	r4, [pc, #64]	; (8000a00 <LoopForever+0x2e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f002 fa0f 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fdbb 	bl	8000548 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009e0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08002e94 	.word	0x08002e94
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	200000fc 	.word	0x200000fc

08000a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_IRQHandler>
	...

08000a08 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <HAL_Init+0x24>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_Init+0x24>)
 8000a12:	2110      	movs	r1, #16
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f809 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1e:	f7ff fea3 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb5f 	bl	8000108 <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb5a 	bl	8000108 <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fecf 	bl	80017fa <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fe9c 	bl	80017b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000f8 	.word	0x200000f8

08000abc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	200000f8 	.word	0x200000f8

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000008 	.word	0x20000008

08000b18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e0f0      	b.n	8000d0c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	5c9b      	ldrb	r3, [r3, r2]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fbd7 	bl	80002ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b4e:	f7ff ffb5 	bl	8000abc <HAL_GetTick>
 8000b52:	0003      	movs	r3, r0
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b56:	e013      	b.n	8000b80 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b58:	f7ff ffb0 	bl	8000abc <HAL_GetTick>
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b0a      	cmp	r3, #10
 8000b64:	d90c      	bls.n	8000b80 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	0292      	lsls	r2, r2, #10
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	2105      	movs	r1, #5
 8000b7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e0c5      	b.n	8000d0c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d0e5      	beq.n	8000b58 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2102      	movs	r1, #2
 8000b98:	438a      	bics	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b9c:	f7ff ff8e 	bl	8000abc <HAL_GetTick>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba4:	e013      	b.n	8000bce <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba6:	f7ff ff89 	bl	8000abc <HAL_GetTick>
 8000baa:	0002      	movs	r2, r0
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b0a      	cmp	r3, #10
 8000bb2:	d90c      	bls.n	8000bce <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	0292      	lsls	r2, r2, #10
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e09e      	b.n	8000d0c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d1e5      	bne.n	8000ba6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7e1b      	ldrb	r3, [r3, #24]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	438a      	bics	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7e5b      	ldrb	r3, [r3, #25]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2140      	movs	r1, #64	; 0x40
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e007      	b.n	8000c2e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	438a      	bics	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7e9b      	ldrb	r3, [r3, #26]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d108      	bne.n	8000c48 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2120      	movs	r1, #32
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2120      	movs	r1, #32
 8000c54:	438a      	bics	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7edb      	ldrb	r3, [r3, #27]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d108      	bne.n	8000c72 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e007      	b.n	8000c82 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7f1b      	ldrb	r3, [r3, #28]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2108      	movs	r1, #8
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	438a      	bics	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7f5b      	ldrb	r3, [r3, #29]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e007      	b.n	8000cd6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	438a      	bics	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	431a      	orrs	r2, r3
 8000cec:	0011      	movs	r1, r2
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2220      	movs	r2, #32
 8000d06:	2101      	movs	r1, #1
 8000d08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d24:	2013      	movs	r0, #19
 8000d26:	183b      	adds	r3, r7, r0
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	5c52      	ldrb	r2, [r2, r1]
 8000d2e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d30:	0002      	movs	r2, r0
 8000d32:	18bb      	adds	r3, r7, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d004      	beq.n	8000d44 <HAL_CAN_ConfigFilter+0x30>
 8000d3a:	18bb      	adds	r3, r7, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d000      	beq.n	8000d44 <HAL_CAN_ConfigFilter+0x30>
 8000d42:	e0cd      	b.n	8000ee0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	58d3      	ldr	r3, [r2, r3]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	0011      	movs	r1, r2
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	221f      	movs	r2, #31
 8000d60:	4013      	ands	r3, r2
 8000d62:	2201      	movs	r2, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	2387      	movs	r3, #135	; 0x87
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	58d3      	ldr	r3, [r2, r3]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	43d2      	mvns	r2, r2
 8000d76:	401a      	ands	r2, r3
 8000d78:	0011      	movs	r1, r2
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	2387      	movs	r3, #135	; 0x87
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d129      	bne.n	8000dde <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	2383      	movs	r3, #131	; 0x83
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	58d3      	ldr	r3, [r2, r3]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	0011      	movs	r1, r2
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	2383      	movs	r3, #131	; 0x83
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000db4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3248      	adds	r2, #72	; 0x48
 8000dba:	00d2      	lsls	r2, r2, #3
 8000dbc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	041b      	lsls	r3, r3, #16
 8000dca:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd2:	6979      	ldr	r1, [r7, #20]
 8000dd4:	3348      	adds	r3, #72	; 0x48
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	18cb      	adds	r3, r1, r3
 8000dda:	3304      	adds	r3, #4
 8000ddc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d128      	bne.n	8000e38 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	2383      	movs	r3, #131	; 0x83
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	58d2      	ldr	r2, [r2, r3]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	2383      	movs	r3, #131	; 0x83
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e0e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3248      	adds	r2, #72	; 0x48
 8000e14:	00d2      	lsls	r2, r2, #3
 8000e16:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e2c:	6979      	ldr	r1, [r7, #20]
 8000e2e:	3348      	adds	r3, #72	; 0x48
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	18cb      	adds	r3, r1, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10c      	bne.n	8000e5a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	2381      	movs	r3, #129	; 0x81
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	58d3      	ldr	r3, [r2, r3]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	0011      	movs	r1, r2
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	2381      	movs	r3, #129	; 0x81
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	50d1      	str	r1, [r2, r3]
 8000e58:	e00a      	b.n	8000e70 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	2381      	movs	r3, #129	; 0x81
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	58d2      	ldr	r2, [r2, r3]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	0011      	movs	r1, r2
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	2381      	movs	r3, #129	; 0x81
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	2385      	movs	r3, #133	; 0x85
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	58d3      	ldr	r3, [r2, r3]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	43d2      	mvns	r2, r2
 8000e84:	401a      	ands	r2, r3
 8000e86:	0011      	movs	r1, r2
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2385      	movs	r3, #133	; 0x85
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	50d1      	str	r1, [r2, r3]
 8000e90:	e00a      	b.n	8000ea8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	2385      	movs	r3, #133	; 0x85
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	58d2      	ldr	r2, [r2, r3]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	2385      	movs	r3, #133	; 0x85
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10a      	bne.n	8000ec6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2387      	movs	r3, #135	; 0x87
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	58d2      	ldr	r2, [r2, r3]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	2387      	movs	r3, #135	; 0x87
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	58d3      	ldr	r3, [r2, r3]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	02d2      	lsls	r2, r2, #11
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
  }
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	5c9b      	ldrb	r3, [r3, r2]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d12f      	bne.n	8000f6c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	2102      	movs	r1, #2
 8000f12:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	438a      	bics	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f24:	f7ff fdca 	bl	8000abc <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f2c:	e013      	b.n	8000f56 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2e:	f7ff fdc5 	bl	8000abc <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	d90c      	bls.n	8000f56 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	0292      	lsls	r2, r2, #10
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2105      	movs	r1, #5
 8000f50:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e012      	b.n	8000f7c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d1e5      	bne.n	8000f2e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0312      	lsls	r2, r2, #12
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
  }
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f92:	2017      	movs	r0, #23
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	2120      	movs	r1, #32
 8000f9a:	5c52      	ldrb	r2, [r2, r1]
 8000f9c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	18bb      	adds	r3, r7, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d004      	beq.n	8000fb2 <HAL_CAN_GetRxMessage+0x2e>
 8000fa8:	18bb      	adds	r3, r7, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d000      	beq.n	8000fb2 <HAL_CAN_GetRxMessage+0x2e>
 8000fb0:	e107      	b.n	80011c2 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d117      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0392      	lsls	r2, r2, #14
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e0fd      	b.n	80011d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d108      	bne.n	8000ff4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	0392      	lsls	r2, r2, #14
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0ee      	b.n	80011d2 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	321b      	adds	r2, #27
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	58d3      	ldr	r3, [r2, r3]
 8001000:	2204      	movs	r2, #4
 8001002:	401a      	ands	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	321b      	adds	r2, #27
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	58d3      	ldr	r3, [r2, r3]
 800101c:	0d5b      	lsrs	r3, r3, #21
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	0d5a      	lsrs	r2, r3, #21
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e00a      	b.n	800103e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	321b      	adds	r2, #27
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	58d3      	ldr	r3, [r2, r3]
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	321b      	adds	r2, #27
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	58d3      	ldr	r3, [r2, r3]
 800104a:	2202      	movs	r2, #2
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	331b      	adds	r3, #27
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2208      	movs	r2, #8
 8001064:	4013      	ands	r3, r2
 8001066:	d003      	beq.n	8001070 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2208      	movs	r2, #8
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	e00b      	b.n	8001088 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	331b      	adds	r3, #27
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	3304      	adds	r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	220f      	movs	r2, #15
 8001082:	401a      	ands	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	331b      	adds	r3, #27
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	3304      	adds	r3, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	401a      	ands	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	331b      	adds	r3, #27
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	0c1a      	lsrs	r2, r3, #16
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	23dc      	movs	r3, #220	; 0xdc
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	188a      	adds	r2, r1, r2
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	23dc      	movs	r3, #220	; 0xdc
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	188a      	adds	r2, r1, r2
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	0a1a      	lsrs	r2, r3, #8
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6819      	ldr	r1, [r3, #0]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	23dc      	movs	r3, #220	; 0xdc
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	188a      	adds	r2, r1, r2
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0c1a      	lsrs	r2, r3, #16
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3302      	adds	r3, #2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	23dc      	movs	r3, #220	; 0xdc
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	188a      	adds	r2, r1, r2
 800111a:	18d3      	adds	r3, r2, r3
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0e1a      	lsrs	r2, r3, #24
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3303      	adds	r3, #3
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	23de      	movs	r3, #222	; 0xde
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	188a      	adds	r2, r1, r2
 8001136:	18d3      	adds	r3, r2, r3
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3304      	adds	r3, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	23de      	movs	r3, #222	; 0xde
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	188a      	adds	r2, r1, r2
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0a1a      	lsrs	r2, r3, #8
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3305      	adds	r3, #5
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	23de      	movs	r3, #222	; 0xde
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	188a      	adds	r2, r1, r2
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0c1a      	lsrs	r2, r3, #16
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3306      	adds	r3, #6
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	23de      	movs	r3, #222	; 0xde
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	188a      	adds	r2, r1, r2
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e1a      	lsrs	r2, r3, #24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3307      	adds	r3, #7
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2120      	movs	r1, #32
 80011a8:	430a      	orrs	r2, r1
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	e007      	b.n	80011be <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2120      	movs	r1, #32
 80011ba:	430a      	orrs	r2, r1
 80011bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	02d2      	lsls	r2, r2, #11
 80011ca:	431a      	orrs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
  }
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b006      	add	sp, #24
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e4:	200f      	movs	r0, #15
 80011e6:	183b      	adds	r3, r7, r0
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	2120      	movs	r1, #32
 80011ec:	5c52      	ldrb	r2, [r2, r1]
 80011ee:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f0:	0002      	movs	r2, r0
 80011f2:	18bb      	adds	r3, r7, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d003      	beq.n	8001202 <HAL_CAN_ActivateNotification+0x28>
 80011fa:	18bb      	adds	r3, r7, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d109      	bne.n	8001216 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6959      	ldr	r1, [r3, #20]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e007      	b.n	8001226 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	02d2      	lsls	r2, r2, #11
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b08a      	sub	sp, #40	; 0x28
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	d100      	bne.n	8001274 <HAL_CAN_IRQHandler+0x46>
 8001272:	e084      	b.n	800137e <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2201      	movs	r2, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d024      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d004      	beq.n	8001296 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f981 	bl	8001596 <HAL_CAN_TxMailbox0CompleteCallback>
 8001294:	e017      	b.n	80012c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2204      	movs	r2, #4
 800129a:	4013      	ands	r3, r2
 800129c:	d005      	beq.n	80012aa <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	4313      	orrs	r3, r2
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	e00d      	b.n	80012c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2208      	movs	r2, #8
 80012ae:	4013      	ands	r3, r2
 80012b0:	d005      	beq.n	80012be <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	0152      	lsls	r2, r2, #5
 80012b8:	4313      	orrs	r3, r2
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	e003      	b.n	80012c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f000 f980 	bl	80015c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4013      	ands	r3, r2
 80012ce:	d028      	beq.n	8001322 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	0052      	lsls	r2, r2, #1
 80012d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d004      	beq.n	80012ee <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f95d 	bl	80015a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80012ec:	e019      	b.n	8001322 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	d005      	beq.n	8001304 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0192      	lsls	r2, r2, #6
 80012fe:	4313      	orrs	r3, r2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	e00e      	b.n	8001322 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4013      	ands	r3, r2
 800130c:	d005      	beq.n	800131a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	01d2      	lsls	r2, r2, #7
 8001314:	4313      	orrs	r3, r2
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
 8001318:	e003      	b.n	8001322 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 f95a 	bl	80015d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	4013      	ands	r3, r2
 800132a:	d028      	beq.n	800137e <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	0252      	lsls	r2, r2, #9
 8001334:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4013      	ands	r3, r2
 800133e:	d004      	beq.n	800134a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f937 	bl	80015b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001348:	e019      	b.n	800137e <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	02db      	lsls	r3, r3, #11
 8001350:	4013      	ands	r3, r2
 8001352:	d005      	beq.n	8001360 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0212      	lsls	r2, r2, #8
 800135a:	4313      	orrs	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
 800135e:	e00e      	b.n	800137e <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	031b      	lsls	r3, r3, #12
 8001366:	4013      	ands	r3, r2
 8001368:	d005      	beq.n	8001376 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0252      	lsls	r2, r2, #9
 8001370:	4313      	orrs	r3, r2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e003      	b.n	800137e <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f934 	bl	80015e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	2208      	movs	r2, #8
 8001382:	4013      	ands	r3, r2
 8001384:	d00c      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2210      	movs	r2, #16
 800138a:	4013      	ands	r3, r2
 800138c:	d008      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4313      	orrs	r3, r2
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2210      	movs	r2, #16
 800139e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	2204      	movs	r2, #4
 80013a4:	4013      	ands	r3, r2
 80013a6:	d00b      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2208      	movs	r2, #8
 80013ac:	4013      	ands	r3, r2
 80013ae:	d007      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2208      	movs	r2, #8
 80013b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 f91b 	bl	80015f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d009      	beq.n	80013dc <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2203      	movs	r2, #3
 80013d0:	4013      	ands	r3, r2
 80013d2:	d003      	beq.n	80013dc <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff f838 	bl	800044c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	4013      	ands	r3, r2
 80013e2:	d00c      	beq.n	80013fe <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2210      	movs	r2, #16
 80013e8:	4013      	ands	r3, r2
 80013ea:	d008      	beq.n	80013fe <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2210      	movs	r2, #16
 80013fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	2220      	movs	r2, #32
 8001402:	4013      	ands	r3, r2
 8001404:	d00b      	beq.n	800141e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2208      	movs	r2, #8
 800140a:	4013      	ands	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2208      	movs	r2, #8
 8001414:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 f8fc 	bl	8001616 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d009      	beq.n	800143a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
 8001430:	d003      	beq.n	800143a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f000 f8e6 	bl	8001606 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	4013      	ands	r3, r2
 8001442:	d00b      	beq.n	800145c <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2210      	movs	r2, #16
 8001448:	4013      	ands	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2210      	movs	r2, #16
 8001452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f8e5 	bl	8001626 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800145c:	6a3a      	ldr	r2, [r7, #32]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	4013      	ands	r3, r2
 8001464:	d00b      	beq.n	800147e <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	2208      	movs	r2, #8
 800146a:	4013      	ands	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2208      	movs	r2, #8
 8001474:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f000 f8dc 	bl	8001636 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800147e:	6a3a      	ldr	r2, [r7, #32]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4013      	ands	r3, r2
 8001486:	d100      	bne.n	800148a <HAL_CAN_IRQHandler+0x25c>
 8001488:	e074      	b.n	8001574 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2204      	movs	r2, #4
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_CAN_IRQHandler+0x266>
 8001492:	e06b      	b.n	800156c <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001494:	6a3a      	ldr	r2, [r7, #32]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4013      	ands	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a4:	d003      	beq.n	80014ae <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	2201      	movs	r2, #1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ae:	6a3a      	ldr	r2, [r7, #32]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014be:	d003      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	2202      	movs	r2, #2
 80014c4:	4313      	orrs	r3, r2
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4013      	ands	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2204      	movs	r2, #4
 80014d6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d8:	d003      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	2204      	movs	r2, #4
 80014de:	4313      	orrs	r3, r2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e2:	6a3a      	ldr	r2, [r7, #32]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d03f      	beq.n	800156c <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2270      	movs	r2, #112	; 0x70
 80014f0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014f2:	d03b      	beq.n	800156c <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2270      	movs	r2, #112	; 0x70
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b60      	cmp	r3, #96	; 0x60
 80014fc:	d027      	beq.n	800154e <HAL_CAN_IRQHandler+0x320>
 80014fe:	d82c      	bhi.n	800155a <HAL_CAN_IRQHandler+0x32c>
 8001500:	2b50      	cmp	r3, #80	; 0x50
 8001502:	d01f      	beq.n	8001544 <HAL_CAN_IRQHandler+0x316>
 8001504:	d829      	bhi.n	800155a <HAL_CAN_IRQHandler+0x32c>
 8001506:	2b40      	cmp	r3, #64	; 0x40
 8001508:	d017      	beq.n	800153a <HAL_CAN_IRQHandler+0x30c>
 800150a:	d826      	bhi.n	800155a <HAL_CAN_IRQHandler+0x32c>
 800150c:	2b30      	cmp	r3, #48	; 0x30
 800150e:	d00f      	beq.n	8001530 <HAL_CAN_IRQHandler+0x302>
 8001510:	d823      	bhi.n	800155a <HAL_CAN_IRQHandler+0x32c>
 8001512:	2b10      	cmp	r3, #16
 8001514:	d002      	beq.n	800151c <HAL_CAN_IRQHandler+0x2ee>
 8001516:	2b20      	cmp	r3, #32
 8001518:	d005      	beq.n	8001526 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800151a:	e01e      	b.n	800155a <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	2208      	movs	r2, #8
 8001520:	4313      	orrs	r3, r2
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001524:	e01a      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	2210      	movs	r2, #16
 800152a:	4313      	orrs	r3, r2
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152e:	e015      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	2220      	movs	r2, #32
 8001534:	4313      	orrs	r3, r2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001538:	e010      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	4313      	orrs	r3, r2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001542:	e00b      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	4313      	orrs	r3, r2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154c:	e006      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	4313      	orrs	r3, r2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001558:	e000      	b.n	800155c <HAL_CAN_IRQHandler+0x32e>
            break;
 800155a:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2170      	movs	r1, #112	; 0x70
 8001568:	438a      	bics	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2204      	movs	r2, #4
 8001572:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f85c 	bl	8001646 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b00a      	add	sp, #40	; 0x28
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	0002      	movs	r2, r0
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b7f      	cmp	r3, #127	; 0x7f
 800166a:	d809      	bhi.n	8001680 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166c:	1dfb      	adds	r3, r7, #7
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	001a      	movs	r2, r3
 8001672:	231f      	movs	r3, #31
 8001674:	401a      	ands	r2, r3
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_EnableIRQ+0x30>)
 8001678:	2101      	movs	r1, #1
 800167a:	4091      	lsls	r1, r2
 800167c:	000a      	movs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
  }
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	0002      	movs	r2, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b7f      	cmp	r3, #127	; 0x7f
 80016a0:	d828      	bhi.n	80016f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <__NVIC_SetPriority+0xd4>)
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	33c0      	adds	r3, #192	; 0xc0
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	589b      	ldr	r3, [r3, r2]
 80016b2:	1dfa      	adds	r2, r7, #7
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	0011      	movs	r1, r2
 80016b8:	2203      	movs	r2, #3
 80016ba:	400a      	ands	r2, r1
 80016bc:	00d2      	lsls	r2, r2, #3
 80016be:	21ff      	movs	r1, #255	; 0xff
 80016c0:	4091      	lsls	r1, r2
 80016c2:	000a      	movs	r2, r1
 80016c4:	43d2      	mvns	r2, r2
 80016c6:	401a      	ands	r2, r3
 80016c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	019b      	lsls	r3, r3, #6
 80016ce:	22ff      	movs	r2, #255	; 0xff
 80016d0:	401a      	ands	r2, r3
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0018      	movs	r0, r3
 80016d8:	2303      	movs	r3, #3
 80016da:	4003      	ands	r3, r0
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	481f      	ldr	r0, [pc, #124]	; (8001760 <__NVIC_SetPriority+0xd4>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	430a      	orrs	r2, r1
 80016ec:	33c0      	adds	r3, #192	; 0xc0
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016f2:	e031      	b.n	8001758 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <__NVIC_SetPriority+0xd8>)
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	0019      	movs	r1, r3
 80016fc:	230f      	movs	r3, #15
 80016fe:	400b      	ands	r3, r1
 8001700:	3b08      	subs	r3, #8
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3306      	adds	r3, #6
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	18d3      	adds	r3, r2, r3
 800170a:	3304      	adds	r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1dfa      	adds	r2, r7, #7
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	0011      	movs	r1, r2
 8001714:	2203      	movs	r2, #3
 8001716:	400a      	ands	r2, r1
 8001718:	00d2      	lsls	r2, r2, #3
 800171a:	21ff      	movs	r1, #255	; 0xff
 800171c:	4091      	lsls	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	43d2      	mvns	r2, r2
 8001722:	401a      	ands	r2, r3
 8001724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	22ff      	movs	r2, #255	; 0xff
 800172c:	401a      	ands	r2, r3
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	0018      	movs	r0, r3
 8001734:	2303      	movs	r3, #3
 8001736:	4003      	ands	r3, r0
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <__NVIC_SetPriority+0xd8>)
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001c      	movs	r4, r3
 8001744:	230f      	movs	r3, #15
 8001746:	4023      	ands	r3, r4
 8001748:	3b08      	subs	r3, #8
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	430a      	orrs	r2, r1
 800174e:	3306      	adds	r3, #6
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	18c3      	adds	r3, r0, r3
 8001754:	3304      	adds	r3, #4
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b003      	add	sp, #12
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	045b      	lsls	r3, r3, #17
 8001778:	429a      	cmp	r2, r3
 800177a:	d301      	bcc.n	8001780 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177c:	2301      	movs	r3, #1
 800177e:	e010      	b.n	80017a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <SysTick_Config+0x44>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	3a01      	subs	r2, #1
 8001786:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001788:	2301      	movs	r3, #1
 800178a:	425b      	negs	r3, r3
 800178c:	2103      	movs	r1, #3
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff ff7c 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x44>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x44>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	210f      	movs	r1, #15
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	1c02      	adds	r2, r0, #0
 80017c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ff5d 	bl	800168c <__NVIC_SetPriority>
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	0002      	movs	r2, r0
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff ff33 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ffaf 	bl	8001768 <SysTick_Config>
 800180a:	0003      	movs	r3, r0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e149      	b.n	8001ab8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4091      	lsls	r1, r2
 800182e:	000a      	movs	r2, r1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x28>
 800183a:	e13a      	b.n	8001ab2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	43da      	mvns	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	2201      	movs	r2, #1
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	58d3      	ldr	r3, [r2, r3]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2107      	movs	r1, #7
 800192a:	400b      	ands	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	401a      	ands	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	23c0      	movs	r3, #192	; 0xc0
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_GPIO_Init+0x174>
 8001986:	e094      	b.n	8001ab2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	589b      	ldr	r3, [r3, r2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4013      	ands	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	2390      	movs	r3, #144	; 0x90
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x1d6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x1d2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x1ce>
 80019de:	2302      	movs	r3, #2
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1d8>
 80019ea:	2300      	movs	r3, #0
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	2103      	movs	r1, #3
 80019f0:	400a      	ands	r2, r1
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019fc:	4935      	ldr	r1, [pc, #212]	; (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	035b      	lsls	r3, r3, #13
 8001a22:	4013      	ands	r3, r2
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	039b      	lsls	r3, r3, #14
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	025b      	lsls	r3, r3, #9
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	1e13      	subs	r3, r2, #0
 8001ac2:	d000      	beq.n	8001ac6 <HAL_GPIO_Init+0x2b2>
 8001ac4:	e6ae      	b.n	8001824 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b006      	add	sp, #24
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	0008      	movs	r0, r1
 8001aee:	0011      	movs	r1, r2
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	1c7b      	adds	r3, r7, #1
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	1c7b      	adds	r3, r7, #1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0e:	1cbb      	adds	r3, r7, #2
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f000 fb76 	bl	8002220 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d100      	bne.n	8001b40 <HAL_RCC_OscConfig+0x20>
 8001b3e:	e08e      	b.n	8001c5e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b40:	4bc5      	ldr	r3, [pc, #788]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	220c      	movs	r2, #12
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00e      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4bc2      	ldr	r3, [pc, #776]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d117      	bne.n	8001b88 <HAL_RCC_OscConfig+0x68>
 8001b58:	4bbf      	ldr	r3, [pc, #764]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	401a      	ands	r2, r3
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d10e      	bne.n	8001b88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4bbb      	ldr	r3, [pc, #748]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_RCC_OscConfig+0x58>
 8001b76:	e071      	b.n	8001c5c <HAL_RCC_OscConfig+0x13c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d000      	beq.n	8001b82 <HAL_RCC_OscConfig+0x62>
 8001b80:	e06c      	b.n	8001c5c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f000 fb4c 	bl	8002220 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x80>
 8001b90:	4bb1      	ldr	r3, [pc, #708]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4bb0      	ldr	r3, [pc, #704]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0249      	lsls	r1, r1, #9
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e02f      	b.n	8001c00 <HAL_RCC_OscConfig+0xe0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0xa2>
 8001ba8:	4bab      	ldr	r3, [pc, #684]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4baa      	ldr	r3, [pc, #680]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bae:	49ab      	ldr	r1, [pc, #684]	; (8001e5c <HAL_RCC_OscConfig+0x33c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4ba8      	ldr	r3, [pc, #672]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4ba7      	ldr	r3, [pc, #668]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bba:	49a9      	ldr	r1, [pc, #676]	; (8001e60 <HAL_RCC_OscConfig+0x340>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e01e      	b.n	8001c00 <HAL_RCC_OscConfig+0xe0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10e      	bne.n	8001be8 <HAL_RCC_OscConfig+0xc8>
 8001bca:	4ba3      	ldr	r3, [pc, #652]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4ba2      	ldr	r3, [pc, #648]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	02c9      	lsls	r1, r1, #11
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b9f      	ldr	r3, [pc, #636]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0249      	lsls	r1, r1, #9
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xe0>
 8001be8:	4b9b      	ldr	r3, [pc, #620]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b9a      	ldr	r3, [pc, #616]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bee:	499b      	ldr	r1, [pc, #620]	; (8001e5c <HAL_RCC_OscConfig+0x33c>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b98      	ldr	r3, [pc, #608]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b97      	ldr	r3, [pc, #604]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	4999      	ldr	r1, [pc, #612]	; (8001e60 <HAL_RCC_OscConfig+0x340>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d014      	beq.n	8001c32 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ff58 	bl	8000abc <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c12:	f7fe ff53 	bl	8000abc <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e2fd      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0xf2>
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe ff43 	bl	8000abc <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff3e 	bl	8000abc <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e2e8      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b82      	ldr	r3, [pc, #520]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x11c>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x14a>
 8001c68:	e06c      	b.n	8001d44 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4013      	ands	r3, r2
 8001c72:	d00e      	beq.n	8001c92 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c74:	4b78      	ldr	r3, [pc, #480]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	220c      	movs	r2, #12
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d11f      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1a0>
 8001c80:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	23c0      	movs	r3, #192	; 0xc0
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	401a      	ands	r2, r3
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b71      	ldr	r3, [pc, #452]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x188>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e2bb      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	22f8      	movs	r2, #248	; 0xf8
 8001cae:	4393      	bics	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00da      	lsls	r2, r3, #3
 8001cb8:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e041      	b.n	8001d44 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d024      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe fef2 	bl	8000abc <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cde:	f7fe feed 	bl	8000abc <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e297      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d0f1      	beq.n	8001cde <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	22f8      	movs	r2, #248	; 0xf8
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00da      	lsls	r2, r3, #3
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e018      	b.n	8001d44 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fecd 	bl	8000abc <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7fe fec8 	bl	8000abc <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e272      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d1f1      	bne.n	8001d28 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d036      	beq.n	8001dbc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7fe feab 	bl	8000abc <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fea6 	bl	8000abc <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e250      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f1      	beq.n	8001d6c <HAL_RCC_OscConfig+0x24c>
 8001d88:	e018      	b.n	8001dbc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001d90:	2101      	movs	r1, #1
 8001d92:	438a      	bics	r2, r1
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fe91 	bl	8000abc <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da0:	f7fe fe8c 	bl	8000abc <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e236      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d1f1      	bne.n	8001da0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d100      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2a8>
 8001dc6:	e0b5      	b.n	8001f34 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc8:	201f      	movs	r0, #31
 8001dca:	183b      	adds	r3, r7, r0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	055b      	lsls	r3, r3, #21
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d110      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0549      	lsls	r1, r1, #21
 8001de6:	430a      	orrs	r2, r1
 8001de8:	61da      	str	r2, [r3, #28]
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	055b      	lsls	r3, r3, #21
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x344>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d11a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_RCC_OscConfig+0x344>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x344>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0049      	lsls	r1, r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e18:	f7fe fe50 	bl	8000abc <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe fe4b 	bl	8000abc <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	; 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1f5      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x344>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10f      	bne.n	8001e68 <HAL_RCC_OscConfig+0x348>
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <HAL_RCC_OscConfig+0x338>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	621a      	str	r2, [r3, #32]
 8001e54:	e036      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	fffeffff 	.word	0xfffeffff
 8001e60:	fffbffff 	.word	0xfffbffff
 8001e64:	40007000 	.word	0x40007000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x36a>
 8001e70:	4bca      	ldr	r3, [pc, #808]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	4bc9      	ldr	r3, [pc, #804]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	438a      	bics	r2, r1
 8001e7a:	621a      	str	r2, [r3, #32]
 8001e7c:	4bc7      	ldr	r3, [pc, #796]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	4bc6      	ldr	r3, [pc, #792]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e82:	2104      	movs	r1, #4
 8001e84:	438a      	bics	r2, r1
 8001e86:	621a      	str	r2, [r3, #32]
 8001e88:	e01c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x38c>
 8001e92:	4bc2      	ldr	r3, [pc, #776]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	4bc1      	ldr	r3, [pc, #772]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	621a      	str	r2, [r3, #32]
 8001e9e:	4bbf      	ldr	r3, [pc, #764]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001ea0:	6a1a      	ldr	r2, [r3, #32]
 8001ea2:	4bbe      	ldr	r3, [pc, #760]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	e00b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3a4>
 8001eac:	4bbb      	ldr	r3, [pc, #748]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	4bba      	ldr	r3, [pc, #744]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	621a      	str	r2, [r3, #32]
 8001eb8:	4bb8      	ldr	r3, [pc, #736]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	4bb7      	ldr	r3, [pc, #732]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fdf6 	bl	8000abc <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e009      	b.n	8001eea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fdf1 	bl	8000abc <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	4aaf      	ldr	r2, [pc, #700]	; (80021a0 <HAL_RCC_OscConfig+0x680>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e19a      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eea:	4bac      	ldr	r3, [pc, #688]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3b6>
 8001ef4:	e013      	b.n	8001f1e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fde1 	bl	8000abc <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	e009      	b.n	8001f14 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe fddc 	bl	8000abc <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4aa5      	ldr	r2, [pc, #660]	; (80021a0 <HAL_RCC_OscConfig+0x680>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e185      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	4ba1      	ldr	r3, [pc, #644]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1e:	231f      	movs	r3, #31
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b9c      	ldr	r3, [pc, #624]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	499d      	ldr	r1, [pc, #628]	; (80021a4 <HAL_RCC_OscConfig+0x684>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d12a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f46:	4b95      	ldr	r3, [pc, #596]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4a:	4b94      	ldr	r3, [pc, #592]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f52:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	4b91      	ldr	r3, [pc, #580]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fdad 	bl	8000abc <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f68:	f7fe fda8 	bl	8000abc <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e152      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f7a:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f1      	beq.n	8001f68 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f84:	4b85      	ldr	r3, [pc, #532]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f88:	22f8      	movs	r2, #248	; 0xf8
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	00da      	lsls	r2, r3, #3
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
 8001f9a:	e034      	b.n	8002006 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	3305      	adds	r3, #5
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fa4:	4b7d      	ldr	r3, [pc, #500]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001faa:	2104      	movs	r1, #4
 8001fac:	438a      	bics	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	22f8      	movs	r2, #248	; 0xf8
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	00da      	lsls	r2, r3, #3
 8001fc0:	4b76      	ldr	r3, [pc, #472]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc6:	e01e      	b.n	8002006 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fc8:	4b74      	ldr	r3, [pc, #464]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fcc:	4b73      	ldr	r3, [pc, #460]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fce:	2104      	movs	r1, #4
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fd4:	4b71      	ldr	r3, [pc, #452]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fd6c 	bl	8000abc <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fea:	f7fe fd67 	bl	8000abc <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e111      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ffc:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d1f1      	bne.n	8001fea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2220      	movs	r2, #32
 800200c:	4013      	ands	r3, r2
 800200e:	d05c      	beq.n	80020ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002010:	4b62      	ldr	r3, [pc, #392]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	220c      	movs	r2, #12
 8002016:	4013      	ands	r3, r2
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d00e      	beq.n	800203a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800201c:	4b5f      	ldr	r3, [pc, #380]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	220c      	movs	r2, #12
 8002022:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002024:	2b08      	cmp	r3, #8
 8002026:	d114      	bne.n	8002052 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002028:	4b5c      	ldr	r3, [pc, #368]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	401a      	ands	r2, r3
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	429a      	cmp	r2, r3
 8002038:	d10b      	bne.n	8002052 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800203a:	4b58      	ldr	r3, [pc, #352]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	4013      	ands	r3, r2
 8002044:	d040      	beq.n	80020c8 <HAL_RCC_OscConfig+0x5a8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d03c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e6      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d01b      	beq.n	8002092 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800205a:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	4b4f      	ldr	r3, [pc, #316]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0249      	lsls	r1, r1, #9
 8002064:	430a      	orrs	r2, r1
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fd28 	bl	8000abc <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002072:	f7fe fd23 	bl	8000abc <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0cd      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002084:	4b45      	ldr	r3, [pc, #276]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x552>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002092:	4b42      	ldr	r3, [pc, #264]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002098:	4943      	ldr	r1, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x688>)
 800209a:	400a      	ands	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fd0d 	bl	8000abc <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a8:	f7fe fd08 	bl	8000abc <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0b2      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	4013      	ands	r3, r2
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x588>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <HAL_RCC_OscConfig+0x5b4>
 80020d2:	e0a4      	b.n	800221e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	220c      	movs	r2, #12
 80020da:	4013      	ands	r3, r2
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d100      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5c2>
 80020e0:	e078      	b.n	80021d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d14c      	bne.n	8002184 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 80020f0:	492e      	ldr	r1, [pc, #184]	; (80021ac <HAL_RCC_OscConfig+0x68c>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fce1 	bl	8000abc <HAL_GetTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fcdc 	bl	8000abc <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e086      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	049b      	lsls	r3, r3, #18
 800211a:	4013      	ands	r3, r2
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	220f      	movs	r2, #15
 8002124:	4393      	bics	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
 8002132:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x690>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	431a      	orrs	r2, r3
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0449      	lsls	r1, r1, #17
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fcaf 	bl	8000abc <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fcaa 	bl	8000abc <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e054      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	049b      	lsls	r3, r3, #18
 800217e:	4013      	ands	r3, r2
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x644>
 8002182:	e04c      	b.n	800221e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_RCC_OscConfig+0x67c>)
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <HAL_RCC_OscConfig+0x68c>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fc94 	bl	8000abc <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x6a6>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	40021000 	.word	0x40021000
 80021a0:	00001388 	.word	0x00001388
 80021a4:	efffffff 	.word	0xefffffff
 80021a8:	fffeffff 	.word	0xfffeffff
 80021ac:	feffffff 	.word	0xfeffffff
 80021b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fc82 	bl	8000abc <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e02c      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x708>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	049b      	lsls	r3, r3, #18
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x694>
 80021d2:	e024      	b.n	800221e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01f      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_RCC_OscConfig+0x708>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0x708>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	025b      	lsls	r3, r3, #9
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d10e      	bne.n	800221a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	220f      	movs	r2, #15
 8002200:	401a      	ands	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d107      	bne.n	800221a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	23f0      	movs	r3, #240	; 0xf0
 800220e:	039b      	lsls	r3, r3, #14
 8002210:	401a      	ands	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b008      	add	sp, #32
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0bf      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d911      	bls.n	8002272 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	4393      	bics	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0a6      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d015      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2204      	movs	r2, #4
 8002282:	4013      	ands	r3, r2
 8002284:	d006      	beq.n	8002294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 800228c:	21e0      	movs	r1, #224	; 0xe0
 800228e:	00c9      	lsls	r1, r1, #3
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	22f0      	movs	r2, #240	; 0xf0
 800229a:	4393      	bics	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2201      	movs	r2, #1
 80022ae:	4013      	ands	r3, r2
 80022b0:	d04c      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	4013      	ands	r3, r2
 80022c4:	d120      	bne.n	8002308 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07a      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	049b      	lsls	r3, r3, #18
 80022da:	4013      	ands	r3, r2
 80022dc:	d114      	bne.n	8002308 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06e      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	029b      	lsls	r3, r3, #10
 80022f2:	4013      	ands	r3, r2
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e062      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e05b      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2203      	movs	r2, #3
 800230e:	4393      	bics	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7fe fbce 	bl	8000abc <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002324:	e009      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002326:	f7fe fbc9 	bl	8000abc <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_RCC_ClockConfig+0x1a4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e042      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	220c      	movs	r2, #12
 8002340:	401a      	ands	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1ec      	bne.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d211      	bcs.n	800237e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2201      	movs	r2, #1
 8002360:	4393      	bics	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x19c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e020      	b.n	80023c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2204      	movs	r2, #4
 8002384:	4013      	ands	r3, r2
 8002386:	d009      	beq.n	800239c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_RCC_ClockConfig+0x1a8>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800239c:	f000 f820 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 80023a0:	0001      	movs	r1, r0
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1a0>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	220f      	movs	r2, #15
 80023aa:	4013      	ands	r3, r2
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1ac>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	000a      	movs	r2, r1
 80023b2:	40da      	lsrs	r2, r3
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1b0>)
 80023b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f7fe fb39 	bl	8000a30 <HAL_InitTick>
  
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	00001388 	.word	0x00001388
 80023d4:	fffff8ff 	.word	0xfffff8ff
 80023d8:	08002e5c 	.word	0x08002e5c
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	220c      	movs	r2, #12
 8002404:	4013      	ands	r3, r2
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d046      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xb8>
 800240a:	d848      	bhi.n	800249e <HAL_RCC_GetSysClockFreq+0xbe>
 800240c:	2b04      	cmp	r3, #4
 800240e:	d002      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x36>
 8002410:	2b08      	cmp	r3, #8
 8002412:	d003      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x3c>
 8002414:	e043      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002418:	613b      	str	r3, [r7, #16]
      break;
 800241a:	e043      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	220f      	movs	r2, #15
 8002422:	4013      	ands	r3, r2
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	220f      	movs	r2, #15
 8002430:	4013      	ands	r3, r2
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	23c0      	movs	r3, #192	; 0xc0
 800243c:	025b      	lsls	r3, r3, #9
 800243e:	401a      	ands	r2, r3
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	429a      	cmp	r2, r3
 8002446:	d109      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	481a      	ldr	r0, [pc, #104]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800244c:	f7fd fe5c 	bl	8000108 <__udivsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	001a      	movs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4353      	muls	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e01a      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	23c0      	movs	r3, #192	; 0xc0
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	401a      	ands	r2, r3
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	429a      	cmp	r2, r3
 800246a:	d109      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	4814      	ldr	r0, [pc, #80]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002470:	f7fd fe4a 	bl	8000108 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	001a      	movs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4353      	muls	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e008      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002484:	f7fd fe40 	bl	8000108 <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	001a      	movs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4353      	muls	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	613b      	str	r3, [r7, #16]
      break;
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800249a:	613b      	str	r3, [r7, #16]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80024a0:	613b      	str	r3, [r7, #16]
      break;
 80024a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024a4:	693b      	ldr	r3, [r7, #16]
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b006      	add	sp, #24
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	40021000 	.word	0x40021000
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	08002e6c 	.word	0x08002e6c
 80024bc:	08002e7c 	.word	0x08002e7c
 80024c0:	02dc6c00 	.word	0x02dc6c00

080024c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e042      	b.n	800255c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223d      	movs	r2, #61	; 0x3d
 80024da:	5c9b      	ldrb	r3, [r3, r2]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223c      	movs	r2, #60	; 0x3c
 80024e6:	2100      	movs	r1, #0
 80024e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7fe f9eb 	bl	80008c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223d      	movs	r2, #61	; 0x3d
 80024f6:	2102      	movs	r1, #2
 80024f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	0019      	movs	r1, r3
 8002504:	0010      	movs	r0, r2
 8002506:	f000 f99f 	bl	8002848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2246      	movs	r2, #70	; 0x46
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	223e      	movs	r2, #62	; 0x3e
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223f      	movs	r2, #63	; 0x3f
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2241      	movs	r2, #65	; 0x41
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2242      	movs	r2, #66	; 0x42
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2243      	movs	r2, #67	; 0x43
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2244      	movs	r2, #68	; 0x44
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2245      	movs	r2, #69	; 0x45
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223d      	movs	r2, #61	; 0x3d
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_TIM_PWM_Start+0x22>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223e      	movs	r2, #62	; 0x3e
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	4193      	sbcs	r3, r2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	e01f      	b.n	80025c6 <HAL_TIM_PWM_Start+0x62>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d108      	bne.n	800259e <HAL_TIM_PWM_Start+0x3a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	223f      	movs	r2, #63	; 0x3f
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	4193      	sbcs	r3, r2
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e013      	b.n	80025c6 <HAL_TIM_PWM_Start+0x62>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d108      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x52>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	4193      	sbcs	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e007      	b.n	80025c6 <HAL_TIM_PWM_Start+0x62>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	4193      	sbcs	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06a      	b.n	80026a4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0x7a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223e      	movs	r2, #62	; 0x3e
 80025d8:	2102      	movs	r1, #2
 80025da:	5499      	strb	r1, [r3, r2]
 80025dc:	e013      	b.n	8002606 <HAL_TIM_PWM_Start+0xa2>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x8a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	2102      	movs	r1, #2
 80025ea:	5499      	strb	r1, [r3, r2]
 80025ec:	e00b      	b.n	8002606 <HAL_TIM_PWM_Start+0xa2>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x9a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	2102      	movs	r1, #2
 80025fa:	5499      	strb	r1, [r3, r2]
 80025fc:	e003      	b.n	8002606 <HAL_TIM_PWM_Start+0xa2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2241      	movs	r2, #65	; 0x41
 8002602:	2102      	movs	r1, #2
 8002604:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fb70 	bl	8002cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a24      	ldr	r2, [pc, #144]	; (80026ac <HAL_TIM_PWM_Start+0x148>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_TIM_PWM_Start+0xce>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <HAL_TIM_PWM_Start+0x14c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_TIM_PWM_Start+0xce>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <HAL_TIM_PWM_Start+0x150>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_TIM_PWM_Start+0xd2>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_TIM_PWM_Start+0xd4>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0209      	lsls	r1, r1, #8
 800264a:	430a      	orrs	r2, r1
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_TIM_PWM_Start+0x148>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00a      	beq.n	800266e <HAL_TIM_PWM_Start+0x10a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	05db      	lsls	r3, r3, #23
 8002660:	429a      	cmp	r2, r3
 8002662:	d004      	beq.n	800266e <HAL_TIM_PWM_Start+0x10a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <HAL_TIM_PWM_Start+0x154>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2207      	movs	r2, #7
 8002676:	4013      	ands	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b06      	cmp	r3, #6
 800267e:	d010      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2101      	movs	r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002690:	e007      	b.n	80026a2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800
 80026b8:	40000400 	.word	0x40000400

080026bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2317      	movs	r3, #23
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	223c      	movs	r2, #60	; 0x3c
 80026d4:	5c9b      	ldrb	r3, [r3, r2]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_ConfigChannel+0x22>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0ad      	b.n	800283a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	223c      	movs	r2, #60	; 0x3c
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d100      	bne.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80026ec:	e076      	b.n	80027dc <HAL_TIM_PWM_ConfigChannel+0x120>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d900      	bls.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80026f4:	e095      	b.n	8002822 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d04e      	beq.n	800279a <HAL_TIM_PWM_ConfigChannel+0xde>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d900      	bls.n	8002704 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002702:	e08e      	b.n	8002822 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x56>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b04      	cmp	r3, #4
 800270e:	d021      	beq.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002710:	e087      	b.n	8002822 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f90a 	bl	8002934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2108      	movs	r1, #8
 800272c:	430a      	orrs	r2, r1
 800272e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2104      	movs	r1, #4
 800273c:	438a      	bics	r2, r1
 800273e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6999      	ldr	r1, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	619a      	str	r2, [r3, #24]
      break;
 8002752:	e06b      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f000 f967 	bl	8002a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0109      	lsls	r1, r1, #4
 8002770:	430a      	orrs	r2, r1
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4931      	ldr	r1, [pc, #196]	; (8002844 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002780:	400a      	ands	r2, r1
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
      break;
 8002798:	e048      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f9c2 	bl	8002b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2108      	movs	r1, #8
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2104      	movs	r1, #4
 80027c4:	438a      	bics	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69d9      	ldr	r1, [r3, #28]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	61da      	str	r2, [r3, #28]
      break;
 80027da:	e027      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fa21 	bl	8002c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	0109      	lsls	r1, r1, #4
 80027f8:	430a      	orrs	r2, r1
 80027fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	490f      	ldr	r1, [pc, #60]	; (8002844 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002808:	400a      	ands	r2, r1
 800280a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69d9      	ldr	r1, [r3, #28]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e004      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002822:	2317      	movs	r3, #23
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
      break;
 800282a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	223c      	movs	r2, #60	; 0x3c
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

  return status;
 8002834:	2317      	movs	r3, #23
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b006      	add	sp, #24
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffffbff 	.word	0xfffffbff

08002848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <TIM_Base_SetConfig+0xd4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d008      	beq.n	8002872 <TIM_Base_SetConfig+0x2a>
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	429a      	cmp	r2, r3
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x2a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <TIM_Base_SetConfig+0xd8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2270      	movs	r2, #112	; 0x70
 8002876:	4393      	bics	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_Base_SetConfig+0xd4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d014      	beq.n	80028b6 <TIM_Base_SetConfig+0x6e>
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	05db      	lsls	r3, r3, #23
 8002892:	429a      	cmp	r2, r3
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0x6e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <TIM_Base_SetConfig+0xd8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x6e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a20      	ldr	r2, [pc, #128]	; (8002924 <TIM_Base_SetConfig+0xdc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x6e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <TIM_Base_SetConfig+0xe0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x6e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <TIM_Base_SetConfig+0xe4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <TIM_Base_SetConfig+0xe8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	4393      	bics	r3, r2
 80028ce:	001a      	movs	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <TIM_Base_SetConfig+0xd4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0xbe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <TIM_Base_SetConfig+0xe0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0xbe>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <TIM_Base_SetConfig+0xe4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d103      	bne.n	800290e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	615a      	str	r2, [r3, #20]
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40002000 	.word	0x40002000
 8002928:	40014400 	.word	0x40014400
 800292c:	40014800 	.word	0x40014800
 8002930:	fffffcff 	.word	0xfffffcff

08002934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	2201      	movs	r2, #1
 8002944:	4393      	bics	r3, r2
 8002946:	001a      	movs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2270      	movs	r2, #112	; 0x70
 8002962:	4393      	bics	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2203      	movs	r2, #3
 800296a:	4393      	bics	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2202      	movs	r2, #2
 800297c:	4393      	bics	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <TIM_OC1_SetConfig+0xe8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <TIM_OC1_SetConfig+0x6e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <TIM_OC1_SetConfig+0xec>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <TIM_OC1_SetConfig+0x6e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <TIM_OC1_SetConfig+0xf0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10c      	bne.n	80029bc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2208      	movs	r2, #8
 80029a6:	4393      	bics	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4393      	bics	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <TIM_OC1_SetConfig+0xe8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <TIM_OC1_SetConfig+0xa0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <TIM_OC1_SetConfig+0xec>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_OC1_SetConfig+0xa0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <TIM_OC1_SetConfig+0xf0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d111      	bne.n	80029f8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <TIM_OC1_SetConfig+0xf4>)
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <TIM_OC1_SetConfig+0xf8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b006      	add	sp, #24
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800
 8002a28:	fffffeff 	.word	0xfffffeff
 8002a2c:	fffffdff 	.word	0xfffffdff

08002a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	2210      	movs	r2, #16
 8002a40:	4393      	bics	r3, r2
 8002a42:	001a      	movs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a2c      	ldr	r2, [pc, #176]	; (8002b10 <TIM_OC2_SetConfig+0xe0>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a2b      	ldr	r2, [pc, #172]	; (8002b14 <TIM_OC2_SetConfig+0xe4>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <TIM_OC2_SetConfig+0xe8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	4393      	bics	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2240      	movs	r2, #64	; 0x40
 8002aaa:	4393      	bics	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <TIM_OC2_SetConfig+0xe8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <TIM_OC2_SetConfig+0x96>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <TIM_OC2_SetConfig+0xec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <TIM_OC2_SetConfig+0x96>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <TIM_OC2_SetConfig+0xf0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d113      	bne.n	8002aee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <TIM_OC2_SetConfig+0xf4>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <TIM_OC2_SetConfig+0xf8>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b006      	add	sp, #24
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	ffff8fff 	.word	0xffff8fff
 8002b14:	fffffcff 	.word	0xfffffcff
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800
 8002b24:	fffffbff 	.word	0xfffffbff
 8002b28:	fffff7ff 	.word	0xfffff7ff

08002b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <TIM_OC3_SetConfig+0xdc>)
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2270      	movs	r2, #112	; 0x70
 8002b58:	4393      	bics	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	4393      	bics	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <TIM_OC3_SetConfig+0xe0>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <TIM_OC3_SetConfig+0xe4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10d      	bne.n	8002ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <TIM_OC3_SetConfig+0xe8>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <TIM_OC3_SetConfig+0xec>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <TIM_OC3_SetConfig+0xe4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_OC3_SetConfig+0x92>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <TIM_OC3_SetConfig+0xf0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_OC3_SetConfig+0x92>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <TIM_OC3_SetConfig+0xf4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <TIM_OC3_SetConfig+0xf8>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <TIM_OC3_SetConfig+0xfc>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b006      	add	sp, #24
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	fffffeff 	.word	0xfffffeff
 8002c0c:	fffffdff 	.word	0xfffffdff
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	fffff7ff 	.word	0xfffff7ff
 8002c18:	fffffbff 	.word	0xfffffbff
 8002c1c:	40014400 	.word	0x40014400
 8002c20:	40014800 	.word	0x40014800
 8002c24:	ffffefff 	.word	0xffffefff
 8002c28:	ffffdfff 	.word	0xffffdfff

08002c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <TIM_OC4_SetConfig+0xa8>)
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <TIM_OC4_SetConfig+0xac>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <TIM_OC4_SetConfig+0xb0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <TIM_OC4_SetConfig+0xb4>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	031b      	lsls	r3, r3, #12
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <TIM_OC4_SetConfig+0xb8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_OC4_SetConfig+0x70>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <TIM_OC4_SetConfig+0xbc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_OC4_SetConfig+0x70>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <TIM_OC4_SetConfig+0xc0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <TIM_OC4_SetConfig+0xc4>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b006      	add	sp, #24
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	ffffefff 	.word	0xffffefff
 8002cd8:	ffff8fff 	.word	0xffff8fff
 8002cdc:	fffffcff 	.word	0xfffffcff
 8002ce0:	ffffdfff 	.word	0xffffdfff
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40014400 	.word	0x40014400
 8002cec:	40014800 	.word	0x40014800
 8002cf0:	ffffbfff 	.word	0xffffbfff

08002cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	221f      	movs	r2, #31
 8002d04:	4013      	ands	r3, r2
 8002d06:	2201      	movs	r2, #1
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	43d2      	mvns	r2, r2
 8002d16:	401a      	ands	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	211f      	movs	r1, #31
 8002d24:	400b      	ands	r3, r1
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4099      	lsls	r1, r3
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b006      	add	sp, #24
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	223c      	movs	r2, #60	; 0x3c
 8002d4a:	5c9b      	ldrb	r3, [r3, r2]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e042      	b.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223c      	movs	r2, #60	; 0x3c
 8002d58:	2101      	movs	r1, #1
 8002d5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	223d      	movs	r2, #61	; 0x3d
 8002d60:	2102      	movs	r1, #2
 8002d62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2270      	movs	r2, #112	; 0x70
 8002d78:	4393      	bics	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00a      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	05db      	lsls	r3, r3, #23
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d004      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10c      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	4393      	bics	r3, r2
 8002db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	223d      	movs	r2, #61	; 0x3d
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223c      	movs	r2, #60	; 0x3c
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4d0c      	ldr	r5, [pc, #48]	; (8002e24 <__libc_init_array+0x38>)
 8002df2:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 f821 	bl	8002e44 <_init>
 8002e02:	4d0a      	ldr	r5, [pc, #40]	; (8002e2c <__libc_init_array+0x40>)
 8002e04:	4c0a      	ldr	r4, [pc, #40]	; (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002e8c 	.word	0x08002e8c
 8002e28:	08002e8c 	.word	0x08002e8c
 8002e2c:	08002e8c 	.word	0x08002e8c
 8002e30:	08002e90 	.word	0x08002e90

08002e34 <memset>:
 8002e34:	0003      	movs	r3, r0
 8002e36:	1882      	adds	r2, r0, r2
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	7019      	strb	r1, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <_init>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr

08002e50 <_fini>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr
