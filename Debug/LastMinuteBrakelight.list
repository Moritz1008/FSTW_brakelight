
LastMinuteBrakelight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002e9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002e9c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f3b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3a  00000000  00000000  00029f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bbb  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c106  00000000  00000000  00045a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1aa  00000000  00000000  00051b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0ce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  000e0d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e40 	.word	0x08002e40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e40 	.word	0x08002e40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <MX_CAN_Init+0xbc>)
 8000226:	4a2e      	ldr	r2, [pc, #184]	; (80002e0 <MX_CAN_Init+0xc0>)
 8000228:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <MX_CAN_Init+0xbc>)
 800022c:	2203      	movs	r2, #3
 800022e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <MX_CAN_Init+0xbc>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000236:	4b29      	ldr	r3, [pc, #164]	; (80002dc <MX_CAN_Init+0xbc>)
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	0452      	lsls	r2, r2, #17
 800023c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 800023e:	4b27      	ldr	r3, [pc, #156]	; (80002dc <MX_CAN_Init+0xbc>)
 8000240:	2290      	movs	r2, #144	; 0x90
 8000242:	0312      	lsls	r2, r2, #12
 8000244:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000246:	4b25      	ldr	r3, [pc, #148]	; (80002dc <MX_CAN_Init+0xbc>)
 8000248:	2280      	movs	r2, #128	; 0x80
 800024a:	03d2      	lsls	r2, r2, #15
 800024c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <MX_CAN_Init+0xbc>)
 8000250:	2200      	movs	r2, #0
 8000252:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <MX_CAN_Init+0xbc>)
 8000256:	2201      	movs	r2, #1
 8000258:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <MX_CAN_Init+0xbc>)
 800025c:	2201      	movs	r2, #1
 800025e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <MX_CAN_Init+0xbc>)
 8000262:	2200      	movs	r2, #0
 8000264:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000266:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <MX_CAN_Init+0xbc>)
 8000268:	2200      	movs	r2, #0
 800026a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <MX_CAN_Init+0xbc>)
 800026e:	2200      	movs	r2, #0
 8000270:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <MX_CAN_Init+0xbc>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fc4d 	bl	8000b14 <HAL_CAN_Init>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d001      	beq.n	8000282 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800027e:	f000 fa6b 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterInitStructure.FilterBank = 0;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
  CAN_FilterInitStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_CAN_Init+0xc4>)
 800028a:	2200      	movs	r2, #0
 800028c:	619a      	str	r2, [r3, #24]
  CAN_FilterInitStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000290:	2201      	movs	r2, #1
 8000292:	61da      	str	r2, [r3, #28]
  CAN_FilterInitStructure.FilterIdHigh= 0x000;
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <MX_CAN_Init+0xc4>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
  CAN_FilterInitStructure.FilterIdLow=0x000;
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_CAN_Init+0xc4>)
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  CAN_FilterInitStructure.FilterMaskIdHigh= 0x000;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  CAN_FilterInitStructure.FilterMaskIdLow=0x0000;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  CAN_FilterInitStructure.FilterFIFOAssignment = 0;
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  CAN_FilterInitStructure.FilterActivation = ENABLE;
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &CAN_FilterInitStructure);
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <MX_CAN_Init+0xc4>)
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_CAN_Init+0xbc>)
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fd26 	bl	8000d10 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <MX_CAN_Init+0xbc>)
 80002c6:	2112      	movs	r1, #18
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 ff84 	bl	80011d6 <HAL_CAN_ActivateNotification>
  msg_available = 0;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_CAN_Init+0xc8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN_Init 2 */

}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000078 	.word	0x20000078
 80002e0:	40006400 	.word	0x40006400
 80002e4:	20000028 	.word	0x20000028
 80002e8:	2000006c 	.word	0x2000006c

080002ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b08b      	sub	sp, #44	; 0x2c
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	2414      	movs	r4, #20
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	2314      	movs	r3, #20
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fd96 	bl	8002e30 <memset>
  if(canHandle->Instance==CAN)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a21      	ldr	r2, [pc, #132]	; (8000390 <HAL_CAN_MspInit+0xa4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d13b      	bne.n	8000386 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000310:	69da      	ldr	r2, [r3, #28]
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	0489      	lsls	r1, r1, #18
 8000318:	430a      	orrs	r2, r1
 800031a:	61da      	str	r2, [r3, #28]
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800031e:	69da      	ldr	r2, [r3, #28]
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	049b      	lsls	r3, r3, #18
 8000324:	4013      	ands	r3, r2
 8000326:	613b      	str	r3, [r7, #16]
 8000328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800032c:	695a      	ldr	r2, [r3, #20]
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	0289      	lsls	r1, r1, #10
 8000334:	430a      	orrs	r2, r1
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <HAL_CAN_MspInit+0xa8>)
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	029b      	lsls	r3, r3, #10
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	22c0      	movs	r2, #192	; 0xc0
 800034a:	0152      	lsls	r2, r2, #5
 800034c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800034e:	0021      	movs	r1, r4
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2202      	movs	r2, #2
 8000354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2203      	movs	r2, #3
 8000360:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2204      	movs	r2, #4
 8000366:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000368:	187a      	adds	r2, r7, r1
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fa4d 	bl	8001810 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	201e      	movs	r0, #30
 800037c:	f001 fa16 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000380:	201e      	movs	r0, #30
 8000382:	f001 fa28 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40006400 	.word	0x40006400
 8000394:	40021000 	.word	0x40021000

08000398 <CAN_HandleRxMessages>:
}

/* USER CODE BEGIN 1 */

void CAN_HandleRxMessages(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  if (msg_available == 1)
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <CAN_HandleRxMessages+0x98>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d13f      	bne.n	8000426 <CAN_HandleRxMessages+0x8e>
  {
    msg_available = 0;
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <CAN_HandleRxMessages+0x98>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
    switch (RxMessage.StdId)
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <CAN_HandleRxMessages+0x9c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2290      	movs	r2, #144	; 0x90
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d012      	beq.n	80003de <CAN_HandleRxMessages+0x46>
 80003b8:	2290      	movs	r2, #144	; 0x90
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	4293      	cmp	r3, r2
 80003be:	d833      	bhi.n	8000428 <CAN_HandleRxMessages+0x90>
 80003c0:	2b25      	cmp	r3, #37	; 0x25
 80003c2:	d004      	beq.n	80003ce <CAN_HandleRxMessages+0x36>
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d024      	beq.n	8000416 <CAN_HandleRxMessages+0x7e>
      
      case 0x100:
        button = RxData[0] & 0x08;
    }
  }
}
 80003cc:	e02c      	b.n	8000428 <CAN_HandleRxMessages+0x90>
    	rx_timer = 0;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <CAN_HandleRxMessages+0xa0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	801a      	strh	r2, [r3, #0]
    	brake_pressure_front = RxData[0];
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <CAN_HandleRxMessages+0xa8>)
 80003da:	701a      	strb	r2, [r3, #0]
        break;
 80003dc:	e024      	b.n	8000428 <CAN_HandleRxMessages+0x90>
    	inverterTemp = RxData[0];
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003e0:	781a      	ldrb	r2, [r3, #0]
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <CAN_HandleRxMessages+0xac>)
 80003e4:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 80003e6:	2301      	movs	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e010      	b.n	800040e <CAN_HandleRxMessages+0x76>
    		if (inverterTemp < RxData[i*2]) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4a12      	ldr	r2, [pc, #72]	; (800043c <CAN_HandleRxMessages+0xa4>)
 80003f2:	5cd2      	ldrb	r2, [r2, r3]
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <CAN_HandleRxMessages+0xac>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d905      	bls.n	8000408 <CAN_HandleRxMessages+0x70>
    			inverterTemp = RxData[i*2];
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <CAN_HandleRxMessages+0xa4>)
 8000402:	5cd2      	ldrb	r2, [r2, r3]
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <CAN_HandleRxMessages+0xac>)
 8000406:	701a      	strb	r2, [r3, #0]
    	for (int i=1; i<3; i++) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3301      	adds	r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b02      	cmp	r3, #2
 8000412:	ddeb      	ble.n	80003ec <CAN_HandleRxMessages+0x54>
        break;
 8000414:	e008      	b.n	8000428 <CAN_HandleRxMessages+0x90>
        button = RxData[0] & 0x08;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <CAN_HandleRxMessages+0xa4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2208      	movs	r2, #8
 800041c:	4013      	ands	r3, r2
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <CAN_HandleRxMessages+0xb0>)
 8000422:	701a      	strb	r2, [r3, #0]
}
 8000424:	e000      	b.n	8000428 <CAN_HandleRxMessages+0x90>
  }
 8000426:	46c0      	nop			; (mov r8, r8)
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	2000006c 	.word	0x2000006c
 8000434:	20000050 	.word	0x20000050
 8000438:	200000a2 	.word	0x200000a2
 800043c:	20000070 	.word	0x20000070
 8000440:	200000a0 	.word	0x200000a0
 8000444:	200000a5 	.word	0x200000a5
 8000448:	200000a7 	.word	0x200000a7

0800044c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	msg_available = 1;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	2100      	movs	r1, #0
 8000462:	f000 fd8d 	bl	8000f80 <HAL_CAN_GetRxMessage>
	CAN_HandleRxMessages();
 8000466:	f7ff ff97 	bl	8000398 <CAN_HandleRxMessages>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	2000006c 	.word	0x2000006c
 8000478:	20000070 	.word	0x20000070
 800047c:	20000050 	.word	0x20000050

08000480 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b089      	sub	sp, #36	; 0x24
 8000484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	240c      	movs	r4, #12
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2314      	movs	r3, #20
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f002 fccd 	bl	8002e30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_GPIO_Init+0xc0>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_GPIO_Init+0xc0>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	0289      	lsls	r1, r1, #10
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	029b      	lsls	r3, r3, #10
 80004ac:	4013      	ands	r3, r2
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b22      	ldr	r3, [pc, #136]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	02c9      	lsls	r1, r1, #11
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <MX_GPIO_Init+0xc0>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	02db      	lsls	r3, r3, #11
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	0219      	lsls	r1, r3, #8
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fb01 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <MX_GPIO_Init+0xc4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fafb 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	193a      	adds	r2, r7, r4
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f001 f97f 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2208      	movs	r2, #8
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	187b      	adds	r3, r7, r1
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <MX_GPIO_Init+0xc4>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 f96c 	bl	8001810 <HAL_GPIO_Init>

}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b009      	add	sp, #36	; 0x24
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa59 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f8c5 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f7ff ff93 	bl	8000480 <MX_GPIO_Init>
  MX_CAN_Init();
 800055a:	f7ff fe61 	bl	8000220 <MX_CAN_Init>
  MX_TIM3_Init();
 800055e:	f000 f94f 	bl	8000800 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000562:	4b52      	ldr	r3, [pc, #328]	; (80006ac <main+0x164>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fcc5 	bl	8000ef4 <HAL_CAN_Start>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <main+0x2a>
  {
    Error_Handler();
 800056e:	f000 f8f3 	bl	8000758 <Error_Handler>
  }
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000572:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <main+0x168>)
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fff2 	bl	8002560 <HAL_TIM_PWM_Start>
  FAN_TIMER->FAN_CHANNEL = 19000-1;
 800057c:	4b4d      	ldr	r3, [pc, #308]	; (80006b4 <main+0x16c>)
 800057e:	4a4e      	ldr	r2, [pc, #312]	; (80006b8 <main+0x170>)
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
  fan_timer = HAL_GetTick();
 8000582:	f000 fa99 	bl	8000ab8 <HAL_GetTick>
 8000586:	0002      	movs	r2, r0
 8000588:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <main+0x174>)
 800058a:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa9b 	bl	8000acc <HAL_Delay>
  for (int i=0; i<3; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	e030      	b.n	80005fe <main+0xb6>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	0219      	lsls	r1, r3, #8
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2201      	movs	r2, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fa9a 	bl	8001ae0 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80005ac:	203c      	movs	r0, #60	; 0x3c
 80005ae:	f000 fa8d 	bl	8000acc <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	0219      	lsls	r1, r3, #8
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2200      	movs	r2, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fa8f 	bl	8001ae0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f000 fa82 	bl	8000acc <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_SET);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	0219      	lsls	r1, r3, #8
 80005cc:	2390      	movs	r3, #144	; 0x90
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2201      	movs	r2, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fa84 	bl	8001ae0 <HAL_GPIO_WritePin>
	  HAL_Delay(60);
 80005d8:	203c      	movs	r0, #60	; 0x3c
 80005da:	f000 fa77 	bl	8000acc <HAL_Delay>
	  HAL_GPIO_WritePin(BRAKELIGHT_LED, GPIO_PIN_RESET);
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	0219      	lsls	r1, r3, #8
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fa79 	bl	8001ae0 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 80005ee:	23c8      	movs	r3, #200	; 0xc8
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fa6a 	bl	8000acc <HAL_Delay>
  for (int i=0; i<3; i++){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b02      	cmp	r3, #2
 8000602:	ddcb      	ble.n	800059c <main+0x54>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fa61 	bl	8000acc <HAL_Delay>

    // Handle Brakelight
	  if (brake_pressure_front > BP_THRESHOLD) {
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <main+0x178>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d902      	bls.n	8000618 <main+0xd0>
		  bl_state = 1;
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <main+0x17c>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
	  }
	  if (brake_pressure_front < BP_THRESHOLD / 2){
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <main+0x178>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <main+0xde>
		  bl_state = 0;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <main+0x17c>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(BRAKELIGHT_LED, bl_state);
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <main+0x17c>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	0219      	lsls	r1, r3, #8
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fa54 	bl	8001ae0 <HAL_GPIO_WritePin>

	  if (rx_timer > 1000) {
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <main+0x180>)
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	23fa      	movs	r3, #250	; 0xfa
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	429a      	cmp	r2, r3
 8000642:	d902      	bls.n	800064a <main+0x102>
		  brake_pressure_front = 0;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <main+0x178>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	  }
	  rx_timer++;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <main+0x180>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <main+0x180>)
 8000654:	801a      	strh	r2, [r3, #0]

    // Handle Pump
	  if (inverterTemp > PUMP_THRESHOLD) {
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <main+0x184>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b23      	cmp	r3, #35	; 0x23
 800065c:	d902      	bls.n	8000664 <main+0x11c>
		  pump_state = 1;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <main+0x188>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
	  }
	  if (inverterTemp < PUMP_THRESHOLD - 10){
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <main+0x184>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b18      	cmp	r3, #24
 800066a:	d802      	bhi.n	8000672 <main+0x12a>
		  pump_state = 0;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <main+0x188>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	  }
    HAL_GPIO_WritePin(PUMP, pump_state);
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <main+0x188>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4817      	ldr	r0, [pc, #92]	; (80006d4 <main+0x18c>)
 8000678:	001a      	movs	r2, r3
 800067a:	2108      	movs	r1, #8
 800067c:	f001 fa30 	bl	8001ae0 <HAL_GPIO_WritePin>

//    pump_state = button;

    // Handle Fan
    if (HAL_GetTick() - fan_timer > 6000) {
 8000680:	f000 fa1a 	bl	8000ab8 <HAL_GetTick>
 8000684:	0002      	movs	r2, r0
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <main+0x174>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <main+0x190>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d9b8      	bls.n	8000604 <main+0xbc>
      if (pump_state) {
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <main+0x188>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <main+0x15a>
        FAN_TIMER->FAN_CHANNEL = 18940;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <main+0x16c>)
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <main+0x194>)
 800069e:	635a      	str	r2, [r3, #52]	; 0x34
 80006a0:	e7b0      	b.n	8000604 <main+0xbc>
      } else {
        FAN_TIMER->FAN_CHANNEL = 19000-1;
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <main+0x16c>)
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <main+0x170>)
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(1);
 80006a8:	e7ac      	b.n	8000604 <main+0xbc>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000078 	.word	0x20000078
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	40000400 	.word	0x40000400
 80006b8:	00004a37 	.word	0x00004a37
 80006bc:	200000a8 	.word	0x200000a8
 80006c0:	200000a0 	.word	0x200000a0
 80006c4:	200000a4 	.word	0x200000a4
 80006c8:	200000a2 	.word	0x200000a2
 80006cc:	200000a5 	.word	0x200000a5
 80006d0:	200000a6 	.word	0x200000a6
 80006d4:	48000400 	.word	0x48000400
 80006d8:	00001770 	.word	0x00001770
 80006dc:	000049fc 	.word	0x000049fc

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2414      	movs	r4, #20
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2334      	movs	r3, #52	; 0x34
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f002 fb9d 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f002 fb96 	bl	8002e30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2220      	movs	r2, #32
 8000708:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f9ff 	bl	8001b1c <HAL_RCC_OscConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000722:	f000 f819 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2203      	movs	r2, #3
 8000730:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2101      	movs	r1, #1
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fd70 	bl	8002228 <HAL_RCC_ClockConfig>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800074c:	f000 f804 	bl	8000758 <Error_Handler>
  }
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b013      	add	sp, #76	; 0x4c
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x44>)
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x44>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	619a      	str	r2, [r3, #24]
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_MspInit+0x44>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_MspInit+0x44>)
 8000784:	69da      	ldr	r2, [r3, #28]
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x44>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0549      	lsls	r1, r1, #21
 800078c:	430a      	orrs	r2, r1
 800078e:	61da      	str	r2, [r3, #28]
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_MspInit+0x44>)
 8000792:	69da      	ldr	r2, [r3, #28]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	055b      	lsls	r3, r3, #21
 8000798:	4013      	ands	r3, r2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f960 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <CEC_CAN_IRQHandler+0x14>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fd21 	bl	800122a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000078 	.word	0x20000078

080007f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	2320      	movs	r3, #32
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	0018      	movs	r0, r3
 800080c:	2308      	movs	r3, #8
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fb0d 	bl	8002e30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	231c      	movs	r3, #28
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f002 fb06 	bl	8002e30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_TIM3_Init+0xb8>)
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <MX_TIM3_Init+0xbc>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM3_Init+0xb8>)
 800082c:	222f      	movs	r2, #47	; 0x2f
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM3_Init+0xb8>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_TIM3_Init+0xb8>)
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_TIM3_Init+0xc0>)
 800083a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM3_Init+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_TIM3_Init+0xb8>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM3_Init+0xb8>)
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fe38 	bl	80024c0 <HAL_TIM_PWM_Init>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000854:	f7ff ff80 	bl	8000758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2120      	movs	r1, #32
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000866:	187a      	adds	r2, r7, r1
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_TIM3_Init+0xb8>)
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f002 fa63 	bl	8002d38 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000876:	f7ff ff6f 	bl	8000758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2260      	movs	r2, #96	; 0x60
 800087e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	1d39      	adds	r1, r7, #4
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_TIM3_Init+0xb8>)
 8000896:	2200      	movs	r2, #0
 8000898:	0018      	movs	r0, r3
 800089a:	f001 ff0d 	bl	80026b8 <HAL_TIM_PWM_ConfigChannel>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80008a2:	f7ff ff59 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <MX_TIM3_Init+0xb8>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 f829 	bl	8000900 <HAL_TIM_MspPostInit>

}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b00a      	add	sp, #40	; 0x28
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000ac 	.word	0x200000ac
 80008bc:	40000400 	.word	0x40000400
 80008c0:	00004e1f 	.word	0x00004e1f

080008c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <HAL_TIM_PWM_MspInit+0x34>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10b      	bne.n	80008ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_TIM_PWM_MspInit+0x38>)
 80008d8:	69da      	ldr	r2, [r3, #28]
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_TIM_PWM_MspInit+0x38>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	61da      	str	r2, [r3, #28]
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_TIM_PWM_MspInit+0x38>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b004      	add	sp, #16
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	240c      	movs	r4, #12
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 fa8c 	bl	8002e30 <memset>
  if(timHandle->Instance==TIM3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <HAL_TIM_MspPostInit+0x74>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d123      	bne.n	800096a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_TIM_MspPostInit+0x78>)
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_TIM_MspPostInit+0x78>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	02c9      	lsls	r1, r1, #11
 800092c:	430a      	orrs	r2, r1
 800092e:	615a      	str	r2, [r3, #20]
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_TIM_MspPostInit+0x78>)
 8000932:	695a      	ldr	r2, [r3, #20]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	02db      	lsls	r3, r3, #11
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800093e:	0021      	movs	r1, r4
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2210      	movs	r2, #16
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	187b      	adds	r3, r7, r1
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_TIM_MspPostInit+0x7c>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 ff53 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b009      	add	sp, #36	; 0x24
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40000400 	.word	0x40000400
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff ff36 	bl	80007f4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <LoopForever+0x6>)
    LDR R1, [R0]
 800098a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800098c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <LoopForever+0xa>)
    CMP R1, R2
 8000990:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000992:	d105      	bne.n	80009a0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000996:	4912      	ldr	r1, [pc, #72]	; (80009e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000998:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800099c:	4912      	ldr	r1, [pc, #72]	; (80009e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800099e:	6001      	str	r1, [r0, #0]

080009a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <LoopForever+0x1e>)
  ldr r1, =_edata
 80009a2:	4913      	ldr	r1, [pc, #76]	; (80009f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <LoopForever+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b8:	4c10      	ldr	r4, [pc, #64]	; (80009fc <LoopForever+0x2e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c6:	f002 fa0f 	bl	8002de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fdbd 	bl	8000548 <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009dc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f4:	08002e90 	.word	0x08002e90
  ldr r2, =_sbss
 80009f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009fc:	200000f8 	.word	0x200000f8

08000a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_IRQHandler>
	...

08000a04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_Init+0x24>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_Init+0x24>)
 8000a0e:	2110      	movs	r1, #16
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f809 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1a:	f7ff fea3 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x60>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	23fa      	movs	r3, #250	; 0xfa
 8000a40:	0098      	lsls	r0, r3, #2
 8000a42:	f7ff fb61 	bl	8000108 <__udivsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	0019      	movs	r1, r3
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f7ff fb5c 	bl	8000108 <__udivsi3>
 8000a50:	0003      	movs	r3, r0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fecf 	bl	80017f6 <HAL_SYSTICK_Config>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e00f      	b.n	8000a80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d80b      	bhi.n	8000a7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fe9c 	bl	80017ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_InitTick+0x64>)
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b003      	add	sp, #12
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000f4 	.word	0x200000f4

08000ab8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_GetTick+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	200000f4 	.word	0x200000f4

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff0 	bl	8000ab8 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	001a      	movs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	189b      	adds	r3, r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	f7ff ffe0 	bl	8000ab8 <HAL_GetTick>
 8000af8:	0002      	movs	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b004      	add	sp, #16
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e0f0      	b.n	8000d08 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2220      	movs	r2, #32
 8000b2a:	5c9b      	ldrb	r3, [r3, r2]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fbd9 	bl	80002ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b4a:	f7ff ffb5 	bl	8000ab8 <HAL_GetTick>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b52:	e013      	b.n	8000b7c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b54:	f7ff ffb0 	bl	8000ab8 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	d90c      	bls.n	8000b7c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	0292      	lsls	r2, r2, #10
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2220      	movs	r2, #32
 8000b74:	2105      	movs	r1, #5
 8000b76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e0c5      	b.n	8000d08 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	4013      	ands	r3, r2
 8000b86:	d0e5      	beq.n	8000b54 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2102      	movs	r1, #2
 8000b94:	438a      	bics	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b98:	f7ff ff8e 	bl	8000ab8 <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba0:	e013      	b.n	8000bca <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba2:	f7ff ff89 	bl	8000ab8 <HAL_GetTick>
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b0a      	cmp	r3, #10
 8000bae:	d90c      	bls.n	8000bca <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	0292      	lsls	r2, r2, #10
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e09e      	b.n	8000d08 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d1e5      	bne.n	8000ba2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7e1b      	ldrb	r3, [r3, #24]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d108      	bne.n	8000bf0 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	438a      	bics	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7e5b      	ldrb	r3, [r3, #25]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d108      	bne.n	8000c1a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	e007      	b.n	8000c2a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	438a      	bics	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7e9b      	ldrb	r3, [r3, #26]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d108      	bne.n	8000c44 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e007      	b.n	8000c54 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2120      	movs	r1, #32
 8000c50:	438a      	bics	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7edb      	ldrb	r3, [r3, #27]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d108      	bne.n	8000c6e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2110      	movs	r1, #16
 8000c68:	438a      	bics	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	e007      	b.n	8000c7e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2110      	movs	r1, #16
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7f1b      	ldrb	r3, [r3, #28]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d108      	bne.n	8000c98 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2108      	movs	r1, #8
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e007      	b.n	8000ca8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	438a      	bics	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7f5b      	ldrb	r3, [r3, #29]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2104      	movs	r1, #4
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e007      	b.n	8000cd2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2104      	movs	r1, #4
 8000cce:	438a      	bics	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	0011      	movs	r1, r2
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2220      	movs	r2, #32
 8000d02:	2101      	movs	r1, #1
 8000d04:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d20:	2013      	movs	r0, #19
 8000d22:	183b      	adds	r3, r7, r0
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	2120      	movs	r1, #32
 8000d28:	5c52      	ldrb	r2, [r2, r1]
 8000d2a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	18bb      	adds	r3, r7, r2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d004      	beq.n	8000d40 <HAL_CAN_ConfigFilter+0x30>
 8000d36:	18bb      	adds	r3, r7, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d000      	beq.n	8000d40 <HAL_CAN_ConfigFilter+0x30>
 8000d3e:	e0cd      	b.n	8000edc <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	58d3      	ldr	r3, [r2, r3]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	221f      	movs	r2, #31
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2201      	movs	r2, #1
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	2387      	movs	r3, #135	; 0x87
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	58d3      	ldr	r3, [r2, r3]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	0011      	movs	r1, r2
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	2387      	movs	r3, #135	; 0x87
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d129      	bne.n	8000dda <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	2383      	movs	r3, #131	; 0x83
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	58d3      	ldr	r3, [r2, r3]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	2383      	movs	r3, #131	; 0x83
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000db0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3248      	adds	r2, #72	; 0x48
 8000db6:	00d2      	lsls	r2, r2, #3
 8000db8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	041b      	lsls	r3, r3, #16
 8000dc6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dce:	6979      	ldr	r1, [r7, #20]
 8000dd0:	3348      	adds	r3, #72	; 0x48
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	18cb      	adds	r3, r1, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d128      	bne.n	8000e34 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	2383      	movs	r3, #131	; 0x83
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	58d2      	ldr	r2, [r2, r3]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	0011      	movs	r1, r2
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	2383      	movs	r3, #131	; 0x83
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e0a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3248      	adds	r2, #72	; 0x48
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e28:	6979      	ldr	r1, [r7, #20]
 8000e2a:	3348      	adds	r3, #72	; 0x48
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	18cb      	adds	r3, r1, r3
 8000e30:	3304      	adds	r3, #4
 8000e32:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10c      	bne.n	8000e56 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	2381      	movs	r3, #129	; 0x81
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	58d3      	ldr	r3, [r2, r3]
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	43d2      	mvns	r2, r2
 8000e48:	401a      	ands	r2, r3
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	2381      	movs	r3, #129	; 0x81
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	50d1      	str	r1, [r2, r3]
 8000e54:	e00a      	b.n	8000e6c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	2381      	movs	r3, #129	; 0x81
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	58d2      	ldr	r2, [r2, r3]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	0011      	movs	r1, r2
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	2381      	movs	r3, #129	; 0x81
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10c      	bne.n	8000e8e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	2385      	movs	r3, #133	; 0x85
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	58d3      	ldr	r3, [r2, r3]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	43d2      	mvns	r2, r2
 8000e80:	401a      	ands	r2, r3
 8000e82:	0011      	movs	r1, r2
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	2385      	movs	r3, #133	; 0x85
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	50d1      	str	r1, [r2, r3]
 8000e8c:	e00a      	b.n	8000ea4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	2385      	movs	r3, #133	; 0x85
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	58d2      	ldr	r2, [r2, r3]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	2385      	movs	r3, #133	; 0x85
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10a      	bne.n	8000ec2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	2387      	movs	r3, #135	; 0x87
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	58d2      	ldr	r2, [r2, r3]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	0011      	movs	r1, r2
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	2387      	movs	r3, #135	; 0x87
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	58d3      	ldr	r3, [r2, r3]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4393      	bics	r3, r2
 8000ece:	0019      	movs	r1, r3
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e007      	b.n	8000eec <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	02d2      	lsls	r2, r2, #11
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
  }
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	5c9b      	ldrb	r3, [r3, r2]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d12f      	bne.n	8000f68 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f20:	f7ff fdca 	bl	8000ab8 <HAL_GetTick>
 8000f24:	0003      	movs	r3, r0
 8000f26:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f28:	e013      	b.n	8000f52 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f2a:	f7ff fdc5 	bl	8000ab8 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b0a      	cmp	r3, #10
 8000f36:	d90c      	bls.n	8000f52 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	0292      	lsls	r2, r2, #10
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2105      	movs	r1, #5
 8000f4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e012      	b.n	8000f78 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1e5      	bne.n	8000f2a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e007      	b.n	8000f78 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0312      	lsls	r2, r2, #12
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
  }
}
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f8e:	2017      	movs	r0, #23
 8000f90:	183b      	adds	r3, r7, r0
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	2120      	movs	r1, #32
 8000f96:	5c52      	ldrb	r2, [r2, r1]
 8000f98:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	18bb      	adds	r3, r7, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d004      	beq.n	8000fae <HAL_CAN_GetRxMessage+0x2e>
 8000fa4:	18bb      	adds	r3, r7, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d000      	beq.n	8000fae <HAL_CAN_GetRxMessage+0x2e>
 8000fac:	e107      	b.n	80011be <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10e      	bne.n	8000fd2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d117      	bne.n	8000ff0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	0392      	lsls	r2, r2, #14
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0fd      	b.n	80011ce <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d108      	bne.n	8000ff0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	0392      	lsls	r2, r2, #14
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0ee      	b.n	80011ce <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	321b      	adds	r2, #27
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	58d3      	ldr	r3, [r2, r3]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	401a      	ands	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10b      	bne.n	8001024 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	321b      	adds	r2, #27
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	58d3      	ldr	r3, [r2, r3]
 8001018:	0d5b      	lsrs	r3, r3, #21
 800101a:	055b      	lsls	r3, r3, #21
 800101c:	0d5a      	lsrs	r2, r3, #21
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e00a      	b.n	800103a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	321b      	adds	r2, #27
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	58d3      	ldr	r3, [r2, r3]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	321b      	adds	r2, #27
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	58d3      	ldr	r3, [r2, r3]
 8001046:	2202      	movs	r2, #2
 8001048:	401a      	ands	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	331b      	adds	r3, #27
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	3304      	adds	r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2208      	movs	r2, #8
 8001060:	4013      	ands	r3, r2
 8001062:	d003      	beq.n	800106c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2208      	movs	r2, #8
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	e00b      	b.n	8001084 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	331b      	adds	r3, #27
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	18d3      	adds	r3, r2, r3
 8001078:	3304      	adds	r3, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	220f      	movs	r2, #15
 800107e:	401a      	ands	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	331b      	adds	r3, #27
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	18d3      	adds	r3, r2, r3
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	401a      	ands	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	331b      	adds	r3, #27
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	3304      	adds	r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	0c1a      	lsrs	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	23dc      	movs	r3, #220	; 0xdc
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	188a      	adds	r2, r1, r2
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	23dc      	movs	r3, #220	; 0xdc
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	188a      	adds	r2, r1, r2
 80010de:	18d3      	adds	r3, r2, r3
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0a1a      	lsrs	r2, r3, #8
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	23dc      	movs	r3, #220	; 0xdc
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	188a      	adds	r2, r1, r2
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0c1a      	lsrs	r2, r3, #16
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3302      	adds	r3, #2
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	23dc      	movs	r3, #220	; 0xdc
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	188a      	adds	r2, r1, r2
 8001116:	18d3      	adds	r3, r2, r3
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0e1a      	lsrs	r2, r3, #24
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3303      	adds	r3, #3
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	23de      	movs	r3, #222	; 0xde
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	188a      	adds	r2, r1, r2
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3304      	adds	r3, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	23de      	movs	r3, #222	; 0xde
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	188a      	adds	r2, r1, r2
 800114c:	18d3      	adds	r3, r2, r3
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0a1a      	lsrs	r2, r3, #8
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3305      	adds	r3, #5
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	23de      	movs	r3, #222	; 0xde
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	188a      	adds	r2, r1, r2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0c1a      	lsrs	r2, r3, #16
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	3306      	adds	r3, #6
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	23de      	movs	r3, #222	; 0xde
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	188a      	adds	r2, r1, r2
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0e1a      	lsrs	r2, r3, #24
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3307      	adds	r3, #7
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2120      	movs	r1, #32
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	e007      	b.n	80011ba <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2120      	movs	r1, #32
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e007      	b.n	80011ce <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	02d2      	lsls	r2, r2, #11
 80011c6:	431a      	orrs	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
  }
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b006      	add	sp, #24
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e0:	200f      	movs	r0, #15
 80011e2:	183b      	adds	r3, r7, r0
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	2120      	movs	r1, #32
 80011e8:	5c52      	ldrb	r2, [r2, r1]
 80011ea:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ec:	0002      	movs	r2, r0
 80011ee:	18bb      	adds	r3, r7, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_ActivateNotification+0x28>
 80011f6:	18bb      	adds	r3, r7, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d109      	bne.n	8001212 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6959      	ldr	r1, [r3, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e007      	b.n	8001222 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	02d2      	lsls	r2, r2, #11
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
  }
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b08a      	sub	sp, #40	; 0x28
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_CAN_IRQHandler+0x46>
 800126e:	e084      	b.n	800137a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d024      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d004      	beq.n	8001292 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0018      	movs	r0, r3
 800128c:	f000 f981 	bl	8001592 <HAL_CAN_TxMailbox0CompleteCallback>
 8001290:	e017      	b.n	80012c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2204      	movs	r2, #4
 8001296:	4013      	ands	r3, r2
 8001298:	d005      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	4313      	orrs	r3, r2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	e00d      	b.n	80012c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2208      	movs	r2, #8
 80012aa:	4013      	ands	r3, r2
 80012ac:	d005      	beq.n	80012ba <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0152      	lsls	r2, r2, #5
 80012b4:	4313      	orrs	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
 80012b8:	e003      	b.n	80012c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f980 	bl	80015c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	d028      	beq.n	800131e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	0052      	lsls	r2, r2, #1
 80012d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d004      	beq.n	80012ea <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f95d 	bl	80015a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80012e8:	e019      	b.n	800131e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	d005      	beq.n	8001300 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	0192      	lsls	r2, r2, #6
 80012fa:	4313      	orrs	r3, r2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	e00e      	b.n	800131e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4013      	ands	r3, r2
 8001308:	d005      	beq.n	8001316 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	01d2      	lsls	r2, r2, #7
 8001310:	4313      	orrs	r3, r2
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
 8001314:	e003      	b.n	800131e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0018      	movs	r0, r3
 800131a:	f000 f95a 	bl	80015d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	025b      	lsls	r3, r3, #9
 8001324:	4013      	ands	r3, r2
 8001326:	d028      	beq.n	800137a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	0252      	lsls	r2, r2, #9
 8001330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d004      	beq.n	8001346 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0018      	movs	r0, r3
 8001340:	f000 f937 	bl	80015b2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001344:	e019      	b.n	800137a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	02db      	lsls	r3, r3, #11
 800134c:	4013      	ands	r3, r2
 800134e:	d005      	beq.n	800135c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0212      	lsls	r2, r2, #8
 8001356:	4313      	orrs	r3, r2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
 800135a:	e00e      	b.n	800137a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	031b      	lsls	r3, r3, #12
 8001362:	4013      	ands	r3, r2
 8001364:	d005      	beq.n	8001372 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	0252      	lsls	r2, r2, #9
 800136c:	4313      	orrs	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
 8001370:	e003      	b.n	800137a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f000 f934 	bl	80015e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	2208      	movs	r2, #8
 800137e:	4013      	ands	r3, r2
 8001380:	d00c      	beq.n	800139c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2210      	movs	r2, #16
 8001386:	4013      	ands	r3, r2
 8001388:	d008      	beq.n	800139c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4313      	orrs	r3, r2
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2210      	movs	r2, #16
 800139a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	2204      	movs	r2, #4
 80013a0:	4013      	ands	r3, r2
 80013a2:	d00b      	beq.n	80013bc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2208      	movs	r2, #8
 80013a8:	4013      	ands	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2208      	movs	r2, #8
 80013b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f91b 	bl	80015f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d009      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2203      	movs	r2, #3
 80013cc:	4013      	ands	r3, r2
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff f83a 	bl	800044c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	4013      	ands	r3, r2
 80013de:	d00c      	beq.n	80013fa <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2210      	movs	r2, #16
 80013e4:	4013      	ands	r3, r2
 80013e6:	d008      	beq.n	80013fa <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2210      	movs	r2, #16
 80013f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	2220      	movs	r2, #32
 80013fe:	4013      	ands	r3, r2
 8001400:	d00b      	beq.n	800141a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2208      	movs	r2, #8
 8001406:	4013      	ands	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f000 f8fc 	bl	8001612 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2210      	movs	r2, #16
 800141e:	4013      	ands	r3, r2
 8001420:	d009      	beq.n	8001436 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	d003      	beq.n	8001436 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f000 f8e6 	bl	8001602 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001436:	6a3a      	ldr	r2, [r7, #32]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d00b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2210      	movs	r2, #16
 8001444:	4013      	ands	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2210      	movs	r2, #16
 800144e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f8e5 	bl	8001622 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	4013      	ands	r3, r2
 8001460:	d00b      	beq.n	800147a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2208      	movs	r2, #8
 8001466:	4013      	ands	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	f000 f8dc 	bl	8001632 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	4013      	ands	r3, r2
 8001482:	d100      	bne.n	8001486 <HAL_CAN_IRQHandler+0x25c>
 8001484:	e074      	b.n	8001570 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2204      	movs	r2, #4
 800148a:	4013      	ands	r3, r2
 800148c:	d100      	bne.n	8001490 <HAL_CAN_IRQHandler+0x266>
 800148e:	e06b      	b.n	8001568 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4013      	ands	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a0:	d003      	beq.n	80014aa <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	2201      	movs	r2, #1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014aa:	6a3a      	ldr	r2, [r7, #32]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ba:	d003      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	2202      	movs	r2, #2
 80014c0:	4313      	orrs	r3, r2
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014d4:	d003      	beq.n	80014de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2204      	movs	r2, #4
 80014da:	4313      	orrs	r3, r2
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4013      	ands	r3, r2
 80014e6:	d03f      	beq.n	8001568 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2270      	movs	r2, #112	; 0x70
 80014ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ee:	d03b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2270      	movs	r2, #112	; 0x70
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b60      	cmp	r3, #96	; 0x60
 80014f8:	d027      	beq.n	800154a <HAL_CAN_IRQHandler+0x320>
 80014fa:	d82c      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x32c>
 80014fc:	2b50      	cmp	r3, #80	; 0x50
 80014fe:	d01f      	beq.n	8001540 <HAL_CAN_IRQHandler+0x316>
 8001500:	d829      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x32c>
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	d017      	beq.n	8001536 <HAL_CAN_IRQHandler+0x30c>
 8001506:	d826      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x32c>
 8001508:	2b30      	cmp	r3, #48	; 0x30
 800150a:	d00f      	beq.n	800152c <HAL_CAN_IRQHandler+0x302>
 800150c:	d823      	bhi.n	8001556 <HAL_CAN_IRQHandler+0x32c>
 800150e:	2b10      	cmp	r3, #16
 8001510:	d002      	beq.n	8001518 <HAL_CAN_IRQHandler+0x2ee>
 8001512:	2b20      	cmp	r3, #32
 8001514:	d005      	beq.n	8001522 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001516:	e01e      	b.n	8001556 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	2208      	movs	r2, #8
 800151c:	4313      	orrs	r3, r2
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001520:	e01a      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2210      	movs	r2, #16
 8001526:	4313      	orrs	r3, r2
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152a:	e015      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	2220      	movs	r2, #32
 8001530:	4313      	orrs	r3, r2
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001534:	e010      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	4313      	orrs	r3, r2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800153e:	e00b      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	4313      	orrs	r3, r2
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001548:	e006      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	0052      	lsls	r2, r2, #1
 8001550:	4313      	orrs	r3, r2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001554:	e000      	b.n	8001558 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001556:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2170      	movs	r1, #112	; 0x70
 8001564:	438a      	bics	r2, r1
 8001566:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2204      	movs	r2, #4
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f85c 	bl	8001642 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b00a      	add	sp, #40	; 0x28
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	0002      	movs	r2, r0
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b7f      	cmp	r3, #127	; 0x7f
 8001666:	d809      	bhi.n	800167c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	231f      	movs	r3, #31
 8001670:	401a      	ands	r2, r3
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_EnableIRQ+0x30>)
 8001674:	2101      	movs	r1, #1
 8001676:	4091      	lsls	r1, r2
 8001678:	000a      	movs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
  }
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	0002      	movs	r2, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b7f      	cmp	r3, #127	; 0x7f
 800169c:	d828      	bhi.n	80016f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	33c0      	adds	r3, #192	; 0xc0
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	589b      	ldr	r3, [r3, r2]
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	0011      	movs	r1, r2
 80016b4:	2203      	movs	r2, #3
 80016b6:	400a      	ands	r2, r1
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	21ff      	movs	r1, #255	; 0xff
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	401a      	ands	r2, r3
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	2303      	movs	r3, #3
 80016d6:	4003      	ands	r3, r0
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	430a      	orrs	r2, r1
 80016e8:	33c0      	adds	r3, #192	; 0xc0
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ee:	e031      	b.n	8001754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <__NVIC_SetPriority+0xd8>)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	0019      	movs	r1, r3
 80016f8:	230f      	movs	r3, #15
 80016fa:	400b      	ands	r3, r1
 80016fc:	3b08      	subs	r3, #8
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3306      	adds	r3, #6
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	0011      	movs	r1, r2
 8001710:	2203      	movs	r2, #3
 8001712:	400a      	ands	r2, r1
 8001714:	00d2      	lsls	r2, r2, #3
 8001716:	21ff      	movs	r1, #255	; 0xff
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	43d2      	mvns	r2, r2
 800171e:	401a      	ands	r2, r3
 8001720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	401a      	ands	r2, r3
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	2303      	movs	r3, #3
 8001732:	4003      	ands	r3, r0
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <__NVIC_SetPriority+0xd8>)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001c      	movs	r4, r3
 8001740:	230f      	movs	r3, #15
 8001742:	4023      	ands	r3, r4
 8001744:	3b08      	subs	r3, #8
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	430a      	orrs	r2, r1
 800174a:	3306      	adds	r3, #6
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18c3      	adds	r3, r0, r3
 8001750:	3304      	adds	r3, #4
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b003      	add	sp, #12
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	045b      	lsls	r3, r3, #17
 8001774:	429a      	cmp	r2, r3
 8001776:	d301      	bcc.n	800177c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001778:	2301      	movs	r3, #1
 800177a:	e010      	b.n	800179e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SysTick_Config+0x44>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	3a01      	subs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001784:	2301      	movs	r3, #1
 8001786:	425b      	negs	r3, r3
 8001788:	2103      	movs	r1, #3
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff ff7c 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x44>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x44>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	210f      	movs	r1, #15
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	0002      	movs	r2, r0
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ff33 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff ffaf 	bl	8001764 <SysTick_Config>
 8001806:	0003      	movs	r3, r0
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e149      	b.n	8001ab4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4091      	lsls	r1, r2
 800182a:	000a      	movs	r2, r1
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d100      	bne.n	8001838 <HAL_GPIO_Init+0x28>
 8001836:	e13a      	b.n	8001aae <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	0013      	movs	r3, r2
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	2201      	movs	r2, #1
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d017      	beq.n	80018ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	43da      	mvns	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d123      	bne.n	8001942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	58d3      	ldr	r3, [r2, r3]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2107      	movs	r1, #7
 8001926:	400b      	ands	r3, r1
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	6939      	ldr	r1, [r7, #16]
 8001940:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	401a      	ands	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	4013      	ands	r3, r2
 8001980:	d100      	bne.n	8001984 <HAL_GPIO_Init+0x174>
 8001982:	e094      	b.n	8001aae <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001984:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	619a      	str	r2, [r3, #24]
 8001990:	4b4e      	ldr	r3, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x2c0>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	589b      	ldr	r3, [r3, r2]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2203      	movs	r2, #3
 80019ae:	4013      	ands	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	2390      	movs	r3, #144	; 0x90
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1d6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <HAL_GPIO_Init+0x2c4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1d2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <HAL_GPIO_Init+0x2c8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1ce>
 80019da:	2302      	movs	r3, #2
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x1d8>
 80019de:	2305      	movs	r3, #5
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x1d8>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x1d8>
 80019e6:	2300      	movs	r3, #0
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	2103      	movs	r1, #3
 80019ec:	400a      	ands	r2, r1
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	; (8001ad0 <HAL_GPIO_Init+0x2c0>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	035b      	lsls	r3, r3, #13
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	039b      	lsls	r3, r3, #14
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	029b      	lsls	r3, r3, #10
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2b2>
 8001ac0:	e6ae      	b.n	8001820 <HAL_GPIO_Init+0x10>
  } 
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	40010400 	.word	0x40010400

08001ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	0008      	movs	r0, r1
 8001aea:	0011      	movs	r1, r2
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	1c02      	adds	r2, r0, #0
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	1c7b      	adds	r3, r7, #1
 8001af4:	1c0a      	adds	r2, r1, #0
 8001af6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af8:	1c7b      	adds	r3, r7, #1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b00:	1cbb      	adds	r3, r7, #2
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	1cbb      	adds	r3, r7, #2
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f000 fb76 	bl	800221c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	d100      	bne.n	8001b3c <HAL_RCC_OscConfig+0x20>
 8001b3a:	e08e      	b.n	8001c5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b3c:	4bc5      	ldr	r3, [pc, #788]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	220c      	movs	r2, #12
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00e      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b48:	4bc2      	ldr	r3, [pc, #776]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d117      	bne.n	8001b84 <HAL_RCC_OscConfig+0x68>
 8001b54:	4bbf      	ldr	r3, [pc, #764]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	23c0      	movs	r3, #192	; 0xc0
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10e      	bne.n	8001b84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4bbb      	ldr	r3, [pc, #748]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d100      	bne.n	8001b74 <HAL_RCC_OscConfig+0x58>
 8001b72:	e071      	b.n	8001c58 <HAL_RCC_OscConfig+0x13c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d000      	beq.n	8001b7e <HAL_RCC_OscConfig+0x62>
 8001b7c:	e06c      	b.n	8001c58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 fb4c 	bl	800221c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x80>
 8001b8c:	4bb1      	ldr	r3, [pc, #708]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4bb0      	ldr	r3, [pc, #704]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0249      	lsls	r1, r1, #9
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e02f      	b.n	8001bfc <HAL_RCC_OscConfig+0xe0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0xa2>
 8001ba4:	4bab      	ldr	r3, [pc, #684]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4baa      	ldr	r3, [pc, #680]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001baa:	49ab      	ldr	r1, [pc, #684]	; (8001e58 <HAL_RCC_OscConfig+0x33c>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	4ba8      	ldr	r3, [pc, #672]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4ba7      	ldr	r3, [pc, #668]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	49a9      	ldr	r1, [pc, #676]	; (8001e5c <HAL_RCC_OscConfig+0x340>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e01e      	b.n	8001bfc <HAL_RCC_OscConfig+0xe0>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10e      	bne.n	8001be4 <HAL_RCC_OscConfig+0xc8>
 8001bc6:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4ba2      	ldr	r3, [pc, #648]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	02c9      	lsls	r1, r1, #11
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b9f      	ldr	r3, [pc, #636]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b9e      	ldr	r3, [pc, #632]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0249      	lsls	r1, r1, #9
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xe0>
 8001be4:	4b9b      	ldr	r3, [pc, #620]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b9a      	ldr	r3, [pc, #616]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bea:	499b      	ldr	r1, [pc, #620]	; (8001e58 <HAL_RCC_OscConfig+0x33c>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b98      	ldr	r3, [pc, #608]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b97      	ldr	r3, [pc, #604]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	4999      	ldr	r1, [pc, #612]	; (8001e5c <HAL_RCC_OscConfig+0x340>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d014      	beq.n	8001c2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe ff58 	bl	8000ab8 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7fe ff53 	bl	8000ab8 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2fd      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c20:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	029b      	lsls	r3, r3, #10
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0xf2>
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7fe ff43 	bl	8000ab8 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7fe ff3e 	bl	8000ab8 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e2e8      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	029b      	lsls	r3, r3, #10
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x11c>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d100      	bne.n	8001c66 <HAL_RCC_OscConfig+0x14a>
 8001c64:	e06c      	b.n	8001d40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c70:	4b78      	ldr	r3, [pc, #480]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	220c      	movs	r2, #12
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d11f      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1a0>
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	025b      	lsls	r3, r3, #9
 8001c84:	401a      	ands	r2, r3
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d116      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x188>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e2bb      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	22f8      	movs	r2, #248	; 0xf8
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00da      	lsls	r2, r3, #3
 8001cb4:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	e041      	b.n	8001d40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d024      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc4:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fef2 	bl	8000ab8 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7fe feed 	bl	8000ab8 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e297      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0f1      	beq.n	8001cda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	22f8      	movs	r2, #248	; 0xf8
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00da      	lsls	r2, r3, #3
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e018      	b.n	8001d40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	438a      	bics	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe fecd 	bl	8000ab8 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe fec8 	bl	8000ab8 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e272      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d1f1      	bne.n	8001d24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2208      	movs	r2, #8
 8001d46:	4013      	ands	r3, r2
 8001d48:	d036      	beq.n	8001db8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe feab 	bl	8000ab8 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7fe fea6 	bl	8000ab8 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e250      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f1      	beq.n	8001d68 <HAL_RCC_OscConfig+0x24c>
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8a:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	438a      	bics	r2, r1
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7fe fe91 	bl	8000ab8 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7fe fe8c 	bl	8000ab8 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e236      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d1f1      	bne.n	8001d9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d100      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2a8>
 8001dc2:	e0b5      	b.n	8001f30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	201f      	movs	r0, #31
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	055b      	lsls	r3, r3, #21
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d110      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0549      	lsls	r1, r1, #21
 8001de2:	430a      	orrs	r2, r1
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	055b      	lsls	r3, r3, #21
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_OscConfig+0x344>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_RCC_OscConfig+0x344>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x344>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0049      	lsls	r1, r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e14:	f7fe fe50 	bl	8000ab8 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fe4b 	bl	8000ab8 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1f5      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x344>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10f      	bne.n	8001e64 <HAL_RCC_OscConfig+0x348>
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001e46:	6a1a      	ldr	r2, [r3, #32]
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
 8001e50:	e036      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3a4>
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	fffeffff 	.word	0xfffeffff
 8001e5c:	fffbffff 	.word	0xfffbffff
 8001e60:	40007000 	.word	0x40007000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x36a>
 8001e6c:	4bca      	ldr	r3, [pc, #808]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	4bc9      	ldr	r3, [pc, #804]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	438a      	bics	r2, r1
 8001e76:	621a      	str	r2, [r3, #32]
 8001e78:	4bc7      	ldr	r3, [pc, #796]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	4bc6      	ldr	r3, [pc, #792]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e7e:	2104      	movs	r1, #4
 8001e80:	438a      	bics	r2, r1
 8001e82:	621a      	str	r2, [r3, #32]
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3a4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x38c>
 8001e8e:	4bc2      	ldr	r3, [pc, #776]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4bc1      	ldr	r3, [pc, #772]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e94:	2104      	movs	r1, #4
 8001e96:	430a      	orrs	r2, r1
 8001e98:	621a      	str	r2, [r3, #32]
 8001e9a:	4bbf      	ldr	r3, [pc, #764]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4bbe      	ldr	r3, [pc, #760]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	621a      	str	r2, [r3, #32]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3a4>
 8001ea8:	4bbb      	ldr	r3, [pc, #748]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	4bba      	ldr	r3, [pc, #744]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	438a      	bics	r2, r1
 8001eb2:	621a      	str	r2, [r3, #32]
 8001eb4:	4bb8      	ldr	r3, [pc, #736]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	4bb7      	ldr	r3, [pc, #732]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001eba:	2104      	movs	r1, #4
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d014      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fdf6 	bl	8000ab8 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fdf1 	bl	8000ab8 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4aaf      	ldr	r2, [pc, #700]	; (800219c <HAL_RCC_OscConfig+0x680>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e19a      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	4bac      	ldr	r3, [pc, #688]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3b6>
 8001ef0:	e013      	b.n	8001f1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fde1 	bl	8000ab8 <HAL_GetTick>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e009      	b.n	8001f10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7fe fddc 	bl	8000ab8 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4aa5      	ldr	r2, [pc, #660]	; (800219c <HAL_RCC_OscConfig+0x680>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e185      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4ba1      	ldr	r3, [pc, #644]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	2202      	movs	r2, #2
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1a:	231f      	movs	r3, #31
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	4b9b      	ldr	r3, [pc, #620]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	499d      	ldr	r1, [pc, #628]	; (80021a0 <HAL_RCC_OscConfig+0x684>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	4013      	ands	r3, r2
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f42:	4b95      	ldr	r3, [pc, #596]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	4b94      	ldr	r3, [pc, #592]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	2104      	movs	r1, #4
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f4e:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f52:	4b91      	ldr	r3, [pc, #580]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fdad 	bl	8000ab8 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f64:	f7fe fda8 	bl	8000ab8 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e152      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f76:	4b88      	ldr	r3, [pc, #544]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f1      	beq.n	8001f64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f80:	4b85      	ldr	r3, [pc, #532]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	22f8      	movs	r2, #248	; 0xf8
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	00da      	lsls	r2, r3, #3
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
 8001f96:	e034      	b.n	8002002 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	d111      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fa0:	4b7d      	ldr	r3, [pc, #500]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa4:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	438a      	bics	r2, r1
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fac:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	22f8      	movs	r2, #248	; 0xf8
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	00da      	lsls	r2, r3, #3
 8001fbc:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc2:	e01e      	b.n	8002002 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fc4:	4b74      	ldr	r3, [pc, #464]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc8:	4b73      	ldr	r3, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fca:	2104      	movs	r1, #4
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	438a      	bics	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fd6c 	bl	8000ab8 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fe6:	f7fe fd67 	bl	8000ab8 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e111      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ff8:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f1      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	d05c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800200c:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	220c      	movs	r2, #12
 8002012:	4013      	ands	r3, r2
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d00e      	beq.n	8002036 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002018:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	220c      	movs	r2, #12
 800201e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002020:	2b08      	cmp	r3, #8
 8002022:	d114      	bne.n	800204e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002024:	4b5c      	ldr	r3, [pc, #368]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	401a      	ands	r2, r3
 800202e:	23c0      	movs	r3, #192	; 0xc0
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	429a      	cmp	r2, r3
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002036:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	4013      	ands	r3, r2
 8002040:	d040      	beq.n	80020c4 <HAL_RCC_OscConfig+0x5a8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d03c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0e6      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01b      	beq.n	800208e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002056:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe fd28 	bl	8000ab8 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206e:	f7fe fd23 	bl	8000ab8 <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0cd      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x552>
 800208c:	e01b      	b.n	80020c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800208e:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002094:	4943      	ldr	r1, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x688>)
 8002096:	400a      	ands	r2, r1
 8002098:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe fd0d 	bl	8000ab8 <HAL_GetTick>
 800209e:	0003      	movs	r3, r0
 80020a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a4:	f7fe fd08 	bl	8000ab8 <HAL_GetTick>
 80020a8:	0002      	movs	r2, r0
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e0b2      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	4013      	ands	r3, r2
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x588>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d100      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5b4>
 80020ce:	e0a4      	b.n	800221a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	220c      	movs	r2, #12
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d100      	bne.n	80020de <HAL_RCC_OscConfig+0x5c2>
 80020dc:	e078      	b.n	80021d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d14c      	bne.n	8002180 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 80020ec:	492e      	ldr	r1, [pc, #184]	; (80021a8 <HAL_RCC_OscConfig+0x68c>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fce1 	bl	8000ab8 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe fcdc 	bl	8000ab8 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e086      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	049b      	lsls	r3, r3, #18
 8002116:	4013      	ands	r3, r2
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	220f      	movs	r2, #15
 8002120:	4393      	bics	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_RCC_OscConfig+0x690>)
 8002134:	4013      	ands	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	431a      	orrs	r2, r3
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0449      	lsls	r1, r1, #17
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7fe fcaf 	bl	8000ab8 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fcaa 	bl	8000ab8 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e054      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x644>
 800217e:	e04c      	b.n	800221a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_RCC_OscConfig+0x67c>)
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <HAL_RCC_OscConfig+0x68c>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fc94 	bl	8000ab8 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x6a6>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40021000 	.word	0x40021000
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	fffeffff 	.word	0xfffeffff
 80021a8:	feffffff 	.word	0xfeffffff
 80021ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fc82 	bl	8000ab8 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e02c      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_RCC_OscConfig+0x708>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	049b      	lsls	r3, r3, #18
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x694>
 80021ce:	e024      	b.n	800221a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e01f      	b.n	800221c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_RCC_OscConfig+0x708>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_OscConfig+0x708>)
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	025b      	lsls	r3, r3, #9
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10e      	bne.n	8002216 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	220f      	movs	r2, #15
 80021fc:	401a      	ands	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d107      	bne.n	8002216 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	23f0      	movs	r3, #240	; 0xf0
 800220a:	039b      	lsls	r3, r3, #14
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b008      	add	sp, #32
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0bf      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d911      	bls.n	800226e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4393      	bics	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0a6      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d015      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2204      	movs	r2, #4
 800227e:	4013      	ands	r3, r2
 8002280:	d006      	beq.n	8002290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002288:	21e0      	movs	r1, #224	; 0xe0
 800228a:	00c9      	lsls	r1, r1, #3
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	22f0      	movs	r2, #240	; 0xf0
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
 80022ac:	d04c      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	029b      	lsls	r3, r3, #10
 80022be:	4013      	ands	r3, r2
 80022c0:	d120      	bne.n	8002304 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07a      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	049b      	lsls	r3, r3, #18
 80022d6:	4013      	ands	r3, r2
 80022d8:	d114      	bne.n	8002304 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06e      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80022e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	4013      	ands	r3, r2
 80022f0:	d108      	bne.n	8002304 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e062      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e05b      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	4393      	bics	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7fe fbce 	bl	8000ab8 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002320:	e009      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002322:	f7fe fbc9 	bl	8000ab8 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_RCC_ClockConfig+0x1a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e042      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	220c      	movs	r2, #12
 800233c:	401a      	ands	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1ec      	bne.n	8002322 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d211      	bcs.n	800237a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2201      	movs	r2, #1
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCC_ClockConfig+0x19c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4013      	ands	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e020      	b.n	80023bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2204      	movs	r2, #4
 8002380:	4013      	ands	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a11      	ldr	r2, [pc, #68]	; (80023d0 <HAL_RCC_ClockConfig+0x1a8>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002398:	f000 f820 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239c:	0001      	movs	r1, r0
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	220f      	movs	r2, #15
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x1ac>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	000a      	movs	r2, r1
 80023ae:	40da      	lsrs	r2, r3
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1b0>)
 80023b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f7fe fb39 	bl	8000a2c <HAL_InitTick>
  
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00001388 	.word	0x00001388
 80023d0:	fffff8ff 	.word	0xfffff8ff
 80023d4:	08002e58 	.word	0x08002e58
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	220c      	movs	r2, #12
 8002400:	4013      	ands	r3, r2
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d046      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0xb8>
 8002406:	d848      	bhi.n	800249a <HAL_RCC_GetSysClockFreq+0xbe>
 8002408:	2b04      	cmp	r3, #4
 800240a:	d002      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x36>
 800240c:	2b08      	cmp	r3, #8
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x3c>
 8002410:	e043      	b.n	800249a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002412:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002414:	613b      	str	r3, [r7, #16]
      break;
 8002416:	e043      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0c9b      	lsrs	r3, r3, #18
 800241c:	220f      	movs	r2, #15
 800241e:	4013      	ands	r3, r2
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002426:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	220f      	movs	r2, #15
 800242c:	4013      	ands	r3, r2
 800242e:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002430:	5cd3      	ldrb	r3, [r2, r3]
 8002432:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	401a      	ands	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	025b      	lsls	r3, r3, #9
 8002440:	429a      	cmp	r2, r3
 8002442:	d109      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	481a      	ldr	r0, [pc, #104]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002448:	f7fd fe5e 	bl	8000108 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	001a      	movs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4353      	muls	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e01a      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	025b      	lsls	r3, r3, #9
 800245e:	401a      	ands	r2, r3
 8002460:	23c0      	movs	r3, #192	; 0xc0
 8002462:	025b      	lsls	r3, r3, #9
 8002464:	429a      	cmp	r2, r3
 8002466:	d109      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	4814      	ldr	r0, [pc, #80]	; (80024bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800246c:	f7fd fe4c 	bl	8000108 <__udivsi3>
 8002470:	0003      	movs	r3, r0
 8002472:	001a      	movs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4353      	muls	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e008      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	480c      	ldr	r0, [pc, #48]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002480:	f7fd fe42 	bl	8000108 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	001a      	movs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4353      	muls	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	613b      	str	r3, [r7, #16]
      break;
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	e002      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800249c:	613b      	str	r3, [r7, #16]
      break;
 800249e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024a0:	693b      	ldr	r3, [r7, #16]
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	007a1200 	.word	0x007a1200
 80024b4:	08002e68 	.word	0x08002e68
 80024b8:	08002e78 	.word	0x08002e78
 80024bc:	02dc6c00 	.word	0x02dc6c00

080024c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e042      	b.n	8002558 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	; 0x3d
 80024d6:	5c9b      	ldrb	r3, [r3, r2]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	223c      	movs	r2, #60	; 0x3c
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe f9eb 	bl	80008c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	223d      	movs	r2, #61	; 0x3d
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	0019      	movs	r1, r3
 8002500:	0010      	movs	r0, r2
 8002502:	f000 f99f 	bl	8002844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2246      	movs	r2, #70	; 0x46
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223e      	movs	r2, #62	; 0x3e
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223f      	movs	r2, #63	; 0x3f
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2241      	movs	r2, #65	; 0x41
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2242      	movs	r2, #66	; 0x42
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2243      	movs	r2, #67	; 0x43
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2244      	movs	r2, #68	; 0x44
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2245      	movs	r2, #69	; 0x45
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	223d      	movs	r2, #61	; 0x3d
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <HAL_TIM_PWM_Start+0x22>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	223e      	movs	r2, #62	; 0x3e
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	4193      	sbcs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e01f      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d108      	bne.n	800259a <HAL_TIM_PWM_Start+0x3a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223f      	movs	r2, #63	; 0x3f
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	4193      	sbcs	r3, r2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e013      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d108      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x52>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	4193      	sbcs	r3, r2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e007      	b.n	80025c2 <HAL_TIM_PWM_Start+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	4193      	sbcs	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06a      	b.n	80026a0 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0x7a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223e      	movs	r2, #62	; 0x3e
 80025d4:	2102      	movs	r1, #2
 80025d6:	5499      	strb	r1, [r3, r2]
 80025d8:	e013      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0x8a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	223f      	movs	r2, #63	; 0x3f
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d104      	bne.n	80025fa <HAL_TIM_PWM_Start+0x9a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]
 80025f8:	e003      	b.n	8002602 <HAL_TIM_PWM_Start+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	2102      	movs	r1, #2
 8002600:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fb70 	bl	8002cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <HAL_TIM_PWM_Start+0x148>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_TIM_PWM_Start+0xce>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_TIM_PWM_Start+0x14c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_TIM_PWM_Start+0xce>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_TIM_PWM_Start+0x150>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_TIM_PWM_Start+0xd2>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_TIM_PWM_Start+0xd4>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0209      	lsls	r1, r1, #8
 8002646:	430a      	orrs	r2, r1
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <HAL_TIM_PWM_Start+0x148>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00a      	beq.n	800266a <HAL_TIM_PWM_Start+0x10a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	429a      	cmp	r2, r3
 800265e:	d004      	beq.n	800266a <HAL_TIM_PWM_Start+0x10a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_TIM_PWM_Start+0x154>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d111      	bne.n	800268e <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2207      	movs	r2, #7
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b06      	cmp	r3, #6
 800267a:	d010      	beq.n	800269e <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	e007      	b.n	800269e <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40014400 	.word	0x40014400
 80026b0:	40014800 	.word	0x40014800
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2317      	movs	r3, #23
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	223c      	movs	r2, #60	; 0x3c
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_TIM_PWM_ConfigChannel+0x22>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0ad      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	223c      	movs	r2, #60	; 0x3c
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d100      	bne.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80026e8:	e076      	b.n	80027d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d900      	bls.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80026f0:	e095      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x166>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d04e      	beq.n	8002796 <HAL_TIM_PWM_ConfigChannel+0xde>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d900      	bls.n	8002700 <HAL_TIM_PWM_ConfigChannel+0x48>
 80026fe:	e08e      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d021      	beq.n	8002750 <HAL_TIM_PWM_ConfigChannel+0x98>
 800270c:	e087      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f90a 	bl	8002930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2108      	movs	r1, #8
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2104      	movs	r1, #4
 8002738:	438a      	bics	r2, r1
 800273a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6999      	ldr	r1, [r3, #24]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	619a      	str	r2, [r3, #24]
      break;
 800274e:	e06b      	b.n	8002828 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f000 f967 	bl	8002a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0109      	lsls	r1, r1, #4
 800276c:	430a      	orrs	r2, r1
 800276e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4931      	ldr	r1, [pc, #196]	; (8002840 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800277c:	400a      	ands	r2, r1
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6999      	ldr	r1, [r3, #24]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	021a      	lsls	r2, r3, #8
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	619a      	str	r2, [r3, #24]
      break;
 8002794:	e048      	b.n	8002828 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	0011      	movs	r1, r2
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f9c2 	bl	8002b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2108      	movs	r1, #8
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2104      	movs	r1, #4
 80027c0:	438a      	bics	r2, r1
 80027c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69d9      	ldr	r1, [r3, #28]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	61da      	str	r2, [r3, #28]
      break;
 80027d6:	e027      	b.n	8002828 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fa21 	bl	8002c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0109      	lsls	r1, r1, #4
 80027f4:	430a      	orrs	r2, r1
 80027f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	490f      	ldr	r1, [pc, #60]	; (8002840 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002804:	400a      	ands	r2, r1
 8002806:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69d9      	ldr	r1, [r3, #28]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	021a      	lsls	r2, r3, #8
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
      break;
 800281c:	e004      	b.n	8002828 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800281e:	2317      	movs	r3, #23
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
      break;
 8002826:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	223c      	movs	r2, #60	; 0x3c
 800282c:	2100      	movs	r1, #0
 800282e:	5499      	strb	r1, [r3, r2]

  return status;
 8002830:	2317      	movs	r3, #23
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	781b      	ldrb	r3, [r3, #0]
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	fffffbff 	.word	0xfffffbff

08002844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a30      	ldr	r2, [pc, #192]	; (8002918 <TIM_Base_SetConfig+0xd4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d008      	beq.n	800286e <TIM_Base_SetConfig+0x2a>
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	429a      	cmp	r2, r3
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x2a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2c      	ldr	r2, [pc, #176]	; (800291c <TIM_Base_SetConfig+0xd8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2270      	movs	r2, #112	; 0x70
 8002872:	4393      	bics	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <TIM_Base_SetConfig+0xd4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d014      	beq.n	80028b2 <TIM_Base_SetConfig+0x6e>
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	429a      	cmp	r2, r3
 8002890:	d00f      	beq.n	80028b2 <TIM_Base_SetConfig+0x6e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <TIM_Base_SetConfig+0xd8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0x6e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <TIM_Base_SetConfig+0xdc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x6e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <TIM_Base_SetConfig+0xe0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x6e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <TIM_Base_SetConfig+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <TIM_Base_SetConfig+0xe8>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	4393      	bics	r3, r2
 80028ca:	001a      	movs	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <TIM_Base_SetConfig+0xd4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0xbe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <TIM_Base_SetConfig+0xe0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0xbe>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <TIM_Base_SetConfig+0xe4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d103      	bne.n	800290a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	615a      	str	r2, [r3, #20]
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b004      	add	sp, #16
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40002000 	.word	0x40002000
 8002924:	40014400 	.word	0x40014400
 8002928:	40014800 	.word	0x40014800
 800292c:	fffffcff 	.word	0xfffffcff

08002930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	2201      	movs	r2, #1
 8002940:	4393      	bics	r3, r2
 8002942:	001a      	movs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2270      	movs	r2, #112	; 0x70
 800295e:	4393      	bics	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2203      	movs	r2, #3
 8002966:	4393      	bics	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2202      	movs	r2, #2
 8002978:	4393      	bics	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <TIM_OC1_SetConfig+0xe8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <TIM_OC1_SetConfig+0x6e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <TIM_OC1_SetConfig+0xec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d003      	beq.n	800299e <TIM_OC1_SetConfig+0x6e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <TIM_OC1_SetConfig+0xf0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2208      	movs	r2, #8
 80029a2:	4393      	bics	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2204      	movs	r2, #4
 80029b4:	4393      	bics	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <TIM_OC1_SetConfig+0xe8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d007      	beq.n	80029d0 <TIM_OC1_SetConfig+0xa0>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <TIM_OC1_SetConfig+0xec>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_OC1_SetConfig+0xa0>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <TIM_OC1_SetConfig+0xf0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <TIM_OC1_SetConfig+0xf4>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <TIM_OC1_SetConfig+0xf8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b006      	add	sp, #24
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800
 8002a24:	fffffeff 	.word	0xfffffeff
 8002a28:	fffffdff 	.word	0xfffffdff

08002a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	001a      	movs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <TIM_OC2_SetConfig+0xe0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <TIM_OC2_SetConfig+0xe4>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4393      	bics	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <TIM_OC2_SetConfig+0xe8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10d      	bne.n	8002aaa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	4393      	bics	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <TIM_OC2_SetConfig+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_OC2_SetConfig+0x96>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <TIM_OC2_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC2_SetConfig+0x96>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <TIM_OC2_SetConfig+0xf0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <TIM_OC2_SetConfig+0xf4>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <TIM_OC2_SetConfig+0xf8>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b006      	add	sp, #24
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	ffff8fff 	.word	0xffff8fff
 8002b10:	fffffcff 	.word	0xfffffcff
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800
 8002b20:	fffffbff 	.word	0xfffffbff
 8002b24:	fffff7ff 	.word	0xfffff7ff

08002b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a33      	ldr	r2, [pc, #204]	; (8002c04 <TIM_OC3_SetConfig+0xdc>)
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2270      	movs	r2, #112	; 0x70
 8002b54:	4393      	bics	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <TIM_OC3_SetConfig+0xe0>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <TIM_OC3_SetConfig+0xe4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <TIM_OC3_SetConfig+0xe8>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_OC3_SetConfig+0xec>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <TIM_OC3_SetConfig+0xe4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_OC3_SetConfig+0x92>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <TIM_OC3_SetConfig+0xf0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_OC3_SetConfig+0x92>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <TIM_OC3_SetConfig+0xf4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d113      	bne.n	8002be2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <TIM_OC3_SetConfig+0xf8>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <TIM_OC3_SetConfig+0xfc>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b006      	add	sp, #24
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fffffeff 	.word	0xfffffeff
 8002c08:	fffffdff 	.word	0xfffffdff
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	fffff7ff 	.word	0xfffff7ff
 8002c14:	fffffbff 	.word	0xfffffbff
 8002c18:	40014400 	.word	0x40014400
 8002c1c:	40014800 	.word	0x40014800
 8002c20:	ffffefff 	.word	0xffffefff
 8002c24:	ffffdfff 	.word	0xffffdfff

08002c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_OC4_SetConfig+0xa8>)
 8002c38:	401a      	ands	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <TIM_OC4_SetConfig+0xac>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <TIM_OC4_SetConfig+0xb0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <TIM_OC4_SetConfig+0xb4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <TIM_OC4_SetConfig+0xb8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_OC4_SetConfig+0x70>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <TIM_OC4_SetConfig+0xbc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_OC4_SetConfig+0x70>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <TIM_OC4_SetConfig+0xc0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d109      	bne.n	8002cac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <TIM_OC4_SetConfig+0xc4>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b006      	add	sp, #24
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	ffffefff 	.word	0xffffefff
 8002cd4:	ffff8fff 	.word	0xffff8fff
 8002cd8:	fffffcff 	.word	0xfffffcff
 8002cdc:	ffffdfff 	.word	0xffffdfff
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	40014800 	.word	0x40014800
 8002cec:	ffffbfff 	.word	0xffffbfff

08002cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	221f      	movs	r2, #31
 8002d00:	4013      	ands	r3, r2
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	0013      	movs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	43d2      	mvns	r2, r2
 8002d12:	401a      	ands	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	211f      	movs	r1, #31
 8002d20:	400b      	ands	r3, r1
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4099      	lsls	r1, r3
 8002d26:	000b      	movs	r3, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b006      	add	sp, #24
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223c      	movs	r2, #60	; 0x3c
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e042      	b.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	223c      	movs	r2, #60	; 0x3c
 8002d54:	2101      	movs	r1, #1
 8002d56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	223d      	movs	r2, #61	; 0x3d
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2270      	movs	r2, #112	; 0x70
 8002d74:	4393      	bics	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00a      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d004      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	4393      	bics	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	223d      	movs	r2, #61	; 0x3d
 8002dc8:	2101      	movs	r1, #1
 8002dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	223c      	movs	r2, #60	; 0x3c
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400

08002de8 <__libc_init_array>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	2600      	movs	r6, #0
 8002dec:	4d0c      	ldr	r5, [pc, #48]	; (8002e20 <__libc_init_array+0x38>)
 8002dee:	4c0d      	ldr	r4, [pc, #52]	; (8002e24 <__libc_init_array+0x3c>)
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	42a6      	cmp	r6, r4
 8002df6:	d109      	bne.n	8002e0c <__libc_init_array+0x24>
 8002df8:	2600      	movs	r6, #0
 8002dfa:	f000 f821 	bl	8002e40 <_init>
 8002dfe:	4d0a      	ldr	r5, [pc, #40]	; (8002e28 <__libc_init_array+0x40>)
 8002e00:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <__libc_init_array+0x44>)
 8002e02:	1b64      	subs	r4, r4, r5
 8002e04:	10a4      	asrs	r4, r4, #2
 8002e06:	42a6      	cmp	r6, r4
 8002e08:	d105      	bne.n	8002e16 <__libc_init_array+0x2e>
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	00b3      	lsls	r3, r6, #2
 8002e0e:	58eb      	ldr	r3, [r5, r3]
 8002e10:	4798      	blx	r3
 8002e12:	3601      	adds	r6, #1
 8002e14:	e7ee      	b.n	8002df4 <__libc_init_array+0xc>
 8002e16:	00b3      	lsls	r3, r6, #2
 8002e18:	58eb      	ldr	r3, [r5, r3]
 8002e1a:	4798      	blx	r3
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	e7f2      	b.n	8002e06 <__libc_init_array+0x1e>
 8002e20:	08002e88 	.word	0x08002e88
 8002e24:	08002e88 	.word	0x08002e88
 8002e28:	08002e88 	.word	0x08002e88
 8002e2c:	08002e8c 	.word	0x08002e8c

08002e30 <memset>:
 8002e30:	0003      	movs	r3, r0
 8002e32:	1882      	adds	r2, r0, r2
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
